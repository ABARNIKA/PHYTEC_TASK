# UDP Chat Application in C

This project implements a **UDP-based client-server chat system** using the C programming language. The client sends and receives messages to/from the server using datagram sockets (UDP). It is designed to work across systems, including running the server on a PC and the client on an embedded board like the **RBA5D2X**, enabling basic real-time communication like a chat application.

---

## 📁 Files

- `udp_client.c` → UDP Client Source Code  
- `udp_server.c` → UDP Server Source Code  

---

## ⚙️ How It Works

- The **server** listens on a specific port and waits for messages from the client.
- The **client** connects to the server using the server’s IP and port and sends messages.
- The server receives and responds to each message, allowing an interactive back-and-forth exchange.
- The chat runs in an infinite loop on both ends to maintain continuous communication.

---

## 🧠 Concepts Used

- Socket programming using `AF_INET` (IPv4) and `SOCK_DGRAM` (UDP)
- Connectionless communication via UDP
- Functions: `sendto()`, `recvfrom()`
- Buffer usage and basic error handling
- Infinite loop for persistent communication
- Cross-compilation for embedded systems (RBA5D2X)

---

## 🛠️ Compilation

Use the `gcc` compiler to compile both the server and client for a regular PC environment.

### On Host PC (Linux):
```bash
- gcc udp_server.c -o udp_server
- gcc udp_client.c -o udp_client
How to Run
### 🖥️ Start the Server (on Host PC)

- ./udp_server <port>
Example:
- ./udp_server 8085
## 📟 Start the Client

-./udp_client <server_ip> <server_port>
Example:
- **./udp_client 127.0.0.1 8085**
##  Host (PC) and Client (RBA5D2X) Setup
- In the same project, we implement a task where:

- The host PC runs udp_server.c.

- The RBA5D2X board acts as the client, communicating with the server over UDP like a chat application.

