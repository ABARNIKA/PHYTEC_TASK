
Graphics_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b38  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000029f8  08005cfc  08005cfc  00006cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086f4  080086f4  0000a00c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080086f4  080086f4  000096f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086fc  080086fc  0000a00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086fc  080086fc  000096fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008700  08008700  00009700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08008704  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  2000000c  08008710  0000a00c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  08008710  0000a288  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a00c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009cb1  00000000  00000000  0000a03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e08  00000000  00000000  00013ced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000978  00000000  00000000  00015af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000733  00000000  00000000  00016470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000210b1  00000000  00000000  00016ba3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ce32  00000000  00000000  00037c54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c96eb  00000000  00000000  00044a86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010e171  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027c4  00000000  00000000  0010e1b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00110978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08005ce4 	.word	0x08005ce4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08005ce4 	.word	0x08005ce4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000534:	f000 f9e0 	bl	80008f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000538:	f000 f808 	bl	800054c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
    MX_GPIO_Init();
 800053c:	f000 f894 	bl	8000668 <MX_GPIO_Init>
    MX_I2C1_Init();
 8000540:	f000 f864 	bl	800060c <MX_I2C1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  ssd1306_TestAll();
 8000544:	f004 fde4 	bl	8005110 <ssd1306_TestAll>
 8000548:	e7fc      	b.n	8000544 <main+0x14>
	...

0800054c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b094      	sub	sp, #80	@ 0x50
 8000550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000552:	f107 031c 	add.w	r3, r7, #28
 8000556:	2234      	movs	r2, #52	@ 0x34
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f004 fe22 	bl	80051a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000560:	f107 0308 	add.w	r3, r7, #8
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]
 800056e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000570:	2300      	movs	r3, #0
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	4b23      	ldr	r3, [pc, #140]	@ (8000604 <SystemClock_Config+0xb8>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000578:	4a22      	ldr	r2, [pc, #136]	@ (8000604 <SystemClock_Config+0xb8>)
 800057a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800057e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000580:	4b20      	ldr	r3, [pc, #128]	@ (8000604 <SystemClock_Config+0xb8>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000584:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800058c:	2300      	movs	r3, #0
 800058e:	603b      	str	r3, [r7, #0]
 8000590:	4b1d      	ldr	r3, [pc, #116]	@ (8000608 <SystemClock_Config+0xbc>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000598:	4a1b      	ldr	r2, [pc, #108]	@ (8000608 <SystemClock_Config+0xbc>)
 800059a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800059e:	6013      	str	r3, [r2, #0]
 80005a0:	4b19      	ldr	r3, [pc, #100]	@ (8000608 <SystemClock_Config+0xbc>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005a8:	603b      	str	r3, [r7, #0]
 80005aa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ac:	2302      	movs	r3, #2
 80005ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b0:	2301      	movs	r3, #1
 80005b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b4:	2310      	movs	r3, #16
 80005b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005b8:	2300      	movs	r3, #0
 80005ba:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005bc:	f107 031c 	add.w	r3, r7, #28
 80005c0:	4618      	mov	r0, r3
 80005c2:	f003 f96f 	bl	80038a4 <HAL_RCC_OscConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005cc:	f000 f882 	bl	80006d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d0:	230f      	movs	r3, #15
 80005d2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005d4:	2300      	movs	r3, #0
 80005d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e0:	2300      	movs	r3, #0
 80005e2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005e4:	f107 0308 	add.w	r3, r7, #8
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f002 feaa 	bl	8003344 <HAL_RCC_ClockConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005f6:	f000 f86d 	bl	80006d4 <Error_Handler>
  }
}
 80005fa:	bf00      	nop
 80005fc:	3750      	adds	r7, #80	@ 0x50
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40023800 	.word	0x40023800
 8000608:	40007000 	.word	0x40007000

0800060c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000610:	4b12      	ldr	r3, [pc, #72]	@ (800065c <MX_I2C1_Init+0x50>)
 8000612:	4a13      	ldr	r2, [pc, #76]	@ (8000660 <MX_I2C1_Init+0x54>)
 8000614:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000616:	4b11      	ldr	r3, [pc, #68]	@ (800065c <MX_I2C1_Init+0x50>)
 8000618:	4a12      	ldr	r2, [pc, #72]	@ (8000664 <MX_I2C1_Init+0x58>)
 800061a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800061c:	4b0f      	ldr	r3, [pc, #60]	@ (800065c <MX_I2C1_Init+0x50>)
 800061e:	2200      	movs	r2, #0
 8000620:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000622:	4b0e      	ldr	r3, [pc, #56]	@ (800065c <MX_I2C1_Init+0x50>)
 8000624:	2200      	movs	r2, #0
 8000626:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000628:	4b0c      	ldr	r3, [pc, #48]	@ (800065c <MX_I2C1_Init+0x50>)
 800062a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800062e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000630:	4b0a      	ldr	r3, [pc, #40]	@ (800065c <MX_I2C1_Init+0x50>)
 8000632:	2200      	movs	r2, #0
 8000634:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000636:	4b09      	ldr	r3, [pc, #36]	@ (800065c <MX_I2C1_Init+0x50>)
 8000638:	2200      	movs	r2, #0
 800063a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800063c:	4b07      	ldr	r3, [pc, #28]	@ (800065c <MX_I2C1_Init+0x50>)
 800063e:	2200      	movs	r2, #0
 8000640:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000642:	4b06      	ldr	r3, [pc, #24]	@ (800065c <MX_I2C1_Init+0x50>)
 8000644:	2200      	movs	r2, #0
 8000646:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000648:	4804      	ldr	r0, [pc, #16]	@ (800065c <MX_I2C1_Init+0x50>)
 800064a:	f000 fcc1 	bl	8000fd0 <HAL_I2C_Init>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000654:	f000 f83e 	bl	80006d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20000028 	.word	0x20000028
 8000660:	40005400 	.word	0x40005400
 8000664:	000186a0 	.word	0x000186a0

08000668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	60fb      	str	r3, [r7, #12]
 8000672:	4b17      	ldr	r3, [pc, #92]	@ (80006d0 <MX_GPIO_Init+0x68>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000676:	4a16      	ldr	r2, [pc, #88]	@ (80006d0 <MX_GPIO_Init+0x68>)
 8000678:	f043 0304 	orr.w	r3, r3, #4
 800067c:	6313      	str	r3, [r2, #48]	@ 0x30
 800067e:	4b14      	ldr	r3, [pc, #80]	@ (80006d0 <MX_GPIO_Init+0x68>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	f003 0304 	and.w	r3, r3, #4
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	4b10      	ldr	r3, [pc, #64]	@ (80006d0 <MX_GPIO_Init+0x68>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000692:	4a0f      	ldr	r2, [pc, #60]	@ (80006d0 <MX_GPIO_Init+0x68>)
 8000694:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000698:	6313      	str	r3, [r2, #48]	@ 0x30
 800069a:	4b0d      	ldr	r3, [pc, #52]	@ (80006d0 <MX_GPIO_Init+0x68>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	4b09      	ldr	r3, [pc, #36]	@ (80006d0 <MX_GPIO_Init+0x68>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	4a08      	ldr	r2, [pc, #32]	@ (80006d0 <MX_GPIO_Init+0x68>)
 80006b0:	f043 0302 	orr.w	r3, r3, #2
 80006b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006b6:	4b06      	ldr	r3, [pc, #24]	@ (80006d0 <MX_GPIO_Init+0x68>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	f003 0302 	and.w	r3, r3, #2
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80006c2:	bf00      	nop
 80006c4:	3714      	adds	r7, #20
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	40023800 	.word	0x40023800

080006d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d8:	b672      	cpsid	i
}
 80006da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006dc:	bf00      	nop
 80006de:	e7fd      	b.n	80006dc <Error_Handler+0x8>

080006e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	4b13      	ldr	r3, [pc, #76]	@ (8000738 <HAL_MspInit+0x58>)
 80006ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006ee:	4a12      	ldr	r2, [pc, #72]	@ (8000738 <HAL_MspInit+0x58>)
 80006f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80006f6:	4b10      	ldr	r3, [pc, #64]	@ (8000738 <HAL_MspInit+0x58>)
 80006f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	603b      	str	r3, [r7, #0]
 8000706:	4b0c      	ldr	r3, [pc, #48]	@ (8000738 <HAL_MspInit+0x58>)
 8000708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800070a:	4a0b      	ldr	r2, [pc, #44]	@ (8000738 <HAL_MspInit+0x58>)
 800070c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000710:	6413      	str	r3, [r2, #64]	@ 0x40
 8000712:	4b09      	ldr	r3, [pc, #36]	@ (8000738 <HAL_MspInit+0x58>)
 8000714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000716:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800071a:	603b      	str	r3, [r7, #0]
 800071c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800071e:	2200      	movs	r2, #0
 8000720:	2100      	movs	r1, #0
 8000722:	2005      	movs	r0, #5
 8000724:	f000 fa59 	bl	8000bda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000728:	2005      	movs	r0, #5
 800072a:	f000 fa72 	bl	8000c12 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800072e:	bf00      	nop
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40023800 	.word	0x40023800

0800073c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08a      	sub	sp, #40	@ 0x28
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000744:	f107 0314 	add.w	r3, r7, #20
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a21      	ldr	r2, [pc, #132]	@ (80007e0 <HAL_I2C_MspInit+0xa4>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d13c      	bne.n	80007d8 <HAL_I2C_MspInit+0x9c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	613b      	str	r3, [r7, #16]
 8000762:	4b20      	ldr	r3, [pc, #128]	@ (80007e4 <HAL_I2C_MspInit+0xa8>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	4a1f      	ldr	r2, [pc, #124]	@ (80007e4 <HAL_I2C_MspInit+0xa8>)
 8000768:	f043 0302 	orr.w	r3, r3, #2
 800076c:	6313      	str	r3, [r2, #48]	@ 0x30
 800076e:	4b1d      	ldr	r3, [pc, #116]	@ (80007e4 <HAL_I2C_MspInit+0xa8>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	f003 0302 	and.w	r3, r3, #2
 8000776:	613b      	str	r3, [r7, #16]
 8000778:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800077a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800077e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000780:	2312      	movs	r3, #18
 8000782:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000788:	2303      	movs	r3, #3
 800078a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800078c:	2304      	movs	r3, #4
 800078e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	4619      	mov	r1, r3
 8000796:	4814      	ldr	r0, [pc, #80]	@ (80007e8 <HAL_I2C_MspInit+0xac>)
 8000798:	f000 fa86 	bl	8000ca8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800079c:	2300      	movs	r3, #0
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	4b10      	ldr	r3, [pc, #64]	@ (80007e4 <HAL_I2C_MspInit+0xa8>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a4:	4a0f      	ldr	r2, [pc, #60]	@ (80007e4 <HAL_I2C_MspInit+0xa8>)
 80007a6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80007ac:	4b0d      	ldr	r3, [pc, #52]	@ (80007e4 <HAL_I2C_MspInit+0xa8>)
 80007ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80007b8:	2200      	movs	r2, #0
 80007ba:	2100      	movs	r1, #0
 80007bc:	201f      	movs	r0, #31
 80007be:	f000 fa0c 	bl	8000bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80007c2:	201f      	movs	r0, #31
 80007c4:	f000 fa25 	bl	8000c12 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80007c8:	2200      	movs	r2, #0
 80007ca:	2100      	movs	r1, #0
 80007cc:	2020      	movs	r0, #32
 80007ce:	f000 fa04 	bl	8000bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80007d2:	2020      	movs	r0, #32
 80007d4:	f000 fa1d 	bl	8000c12 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80007d8:	bf00      	nop
 80007da:	3728      	adds	r7, #40	@ 0x28
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40005400 	.word	0x40005400
 80007e4:	40023800 	.word	0x40023800
 80007e8:	40020400 	.word	0x40020400

080007ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007f0:	bf00      	nop
 80007f2:	e7fd      	b.n	80007f0 <NMI_Handler+0x4>

080007f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f8:	bf00      	nop
 80007fa:	e7fd      	b.n	80007f8 <HardFault_Handler+0x4>

080007fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000800:	bf00      	nop
 8000802:	e7fd      	b.n	8000800 <MemManage_Handler+0x4>

08000804 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000808:	bf00      	nop
 800080a:	e7fd      	b.n	8000808 <BusFault_Handler+0x4>

0800080c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000810:	bf00      	nop
 8000812:	e7fd      	b.n	8000810 <UsageFault_Handler+0x4>

08000814 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr

08000822 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr

0800083e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000842:	f000 f8ab 	bl	800099c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}

0800084a <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr

08000858 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800085c:	4802      	ldr	r0, [pc, #8]	@ (8000868 <I2C1_EV_IRQHandler+0x10>)
 800085e:	f000 fe0b 	bl	8001478 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000028 	.word	0x20000028

0800086c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000870:	4802      	ldr	r0, [pc, #8]	@ (800087c <I2C1_ER_IRQHandler+0x10>)
 8000872:	f000 ff72 	bl	800175a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000028 	.word	0x20000028

08000880 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000884:	4b06      	ldr	r3, [pc, #24]	@ (80008a0 <SystemInit+0x20>)
 8000886:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800088a:	4a05      	ldr	r2, [pc, #20]	@ (80008a0 <SystemInit+0x20>)
 800088c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000890:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	e000ed00 	.word	0xe000ed00

080008a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80008a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008dc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80008a8:	f7ff ffea 	bl	8000880 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008ac:	480c      	ldr	r0, [pc, #48]	@ (80008e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008ae:	490d      	ldr	r1, [pc, #52]	@ (80008e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008b0:	4a0d      	ldr	r2, [pc, #52]	@ (80008e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b4:	e002      	b.n	80008bc <LoopCopyDataInit>

080008b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ba:	3304      	adds	r3, #4

080008bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008c0:	d3f9      	bcc.n	80008b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008c2:	4a0a      	ldr	r2, [pc, #40]	@ (80008ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008c4:	4c0a      	ldr	r4, [pc, #40]	@ (80008f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c8:	e001      	b.n	80008ce <LoopFillZerobss>

080008ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008cc:	3204      	adds	r2, #4

080008ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008d0:	d3fb      	bcc.n	80008ca <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80008d2:	f004 fc6f 	bl	80051b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008d6:	f7ff fe2b 	bl	8000530 <main>
  bx  lr    
 80008da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008e8:	08008704 	.word	0x08008704
  ldr r2, =_sbss
 80008ec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008f0:	20000288 	.word	0x20000288

080008f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008f4:	e7fe      	b.n	80008f4 <ADC_IRQHandler>
	...

080008f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000938 <HAL_Init+0x40>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a0d      	ldr	r2, [pc, #52]	@ (8000938 <HAL_Init+0x40>)
 8000902:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000906:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000908:	4b0b      	ldr	r3, [pc, #44]	@ (8000938 <HAL_Init+0x40>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a0a      	ldr	r2, [pc, #40]	@ (8000938 <HAL_Init+0x40>)
 800090e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000912:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000914:	4b08      	ldr	r3, [pc, #32]	@ (8000938 <HAL_Init+0x40>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a07      	ldr	r2, [pc, #28]	@ (8000938 <HAL_Init+0x40>)
 800091a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800091e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000920:	2003      	movs	r0, #3
 8000922:	f000 f94f 	bl	8000bc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000926:	200f      	movs	r0, #15
 8000928:	f000 f808 	bl	800093c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800092c:	f7ff fed8 	bl	80006e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000930:	2300      	movs	r3, #0
}
 8000932:	4618      	mov	r0, r3
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40023c00 	.word	0x40023c00

0800093c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000944:	4b12      	ldr	r3, [pc, #72]	@ (8000990 <HAL_InitTick+0x54>)
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	4b12      	ldr	r3, [pc, #72]	@ (8000994 <HAL_InitTick+0x58>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	4619      	mov	r1, r3
 800094e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000952:	fbb3 f3f1 	udiv	r3, r3, r1
 8000956:	fbb2 f3f3 	udiv	r3, r2, r3
 800095a:	4618      	mov	r0, r3
 800095c:	f000 f967 	bl	8000c2e <HAL_SYSTICK_Config>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000966:	2301      	movs	r3, #1
 8000968:	e00e      	b.n	8000988 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2b0f      	cmp	r3, #15
 800096e:	d80a      	bhi.n	8000986 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000970:	2200      	movs	r2, #0
 8000972:	6879      	ldr	r1, [r7, #4]
 8000974:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000978:	f000 f92f 	bl	8000bda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800097c:	4a06      	ldr	r2, [pc, #24]	@ (8000998 <HAL_InitTick+0x5c>)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000982:	2300      	movs	r3, #0
 8000984:	e000      	b.n	8000988 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000986:	2301      	movs	r3, #1
}
 8000988:	4618      	mov	r0, r3
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20000000 	.word	0x20000000
 8000994:	20000008 	.word	0x20000008
 8000998:	20000004 	.word	0x20000004

0800099c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009a0:	4b06      	ldr	r3, [pc, #24]	@ (80009bc <HAL_IncTick+0x20>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	461a      	mov	r2, r3
 80009a6:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <HAL_IncTick+0x24>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4413      	add	r3, r2
 80009ac:	4a04      	ldr	r2, [pc, #16]	@ (80009c0 <HAL_IncTick+0x24>)
 80009ae:	6013      	str	r3, [r2, #0]
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	20000008 	.word	0x20000008
 80009c0:	2000007c 	.word	0x2000007c

080009c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  return uwTick;
 80009c8:	4b03      	ldr	r3, [pc, #12]	@ (80009d8 <HAL_GetTick+0x14>)
 80009ca:	681b      	ldr	r3, [r3, #0]
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	2000007c 	.word	0x2000007c

080009dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009e4:	f7ff ffee 	bl	80009c4 <HAL_GetTick>
 80009e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80009f4:	d005      	beq.n	8000a02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000a20 <HAL_Delay+0x44>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	461a      	mov	r2, r3
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	4413      	add	r3, r2
 8000a00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a02:	bf00      	nop
 8000a04:	f7ff ffde 	bl	80009c4 <HAL_GetTick>
 8000a08:	4602      	mov	r2, r0
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	68fa      	ldr	r2, [r7, #12]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d8f7      	bhi.n	8000a04 <HAL_Delay+0x28>
  {
  }
}
 8000a14:	bf00      	nop
 8000a16:	bf00      	nop
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000008 	.word	0x20000008

08000a24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b085      	sub	sp, #20
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	f003 0307 	and.w	r3, r3, #7
 8000a32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a34:	4b0c      	ldr	r3, [pc, #48]	@ (8000a68 <__NVIC_SetPriorityGrouping+0x44>)
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a3a:	68ba      	ldr	r2, [r7, #8]
 8000a3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a40:	4013      	ands	r3, r2
 8000a42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a56:	4a04      	ldr	r2, [pc, #16]	@ (8000a68 <__NVIC_SetPriorityGrouping+0x44>)
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	60d3      	str	r3, [r2, #12]
}
 8000a5c:	bf00      	nop
 8000a5e:	3714      	adds	r7, #20
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a70:	4b04      	ldr	r3, [pc, #16]	@ (8000a84 <__NVIC_GetPriorityGrouping+0x18>)
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	0a1b      	lsrs	r3, r3, #8
 8000a76:	f003 0307 	and.w	r3, r3, #7
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	db0b      	blt.n	8000ab2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	f003 021f 	and.w	r2, r3, #31
 8000aa0:	4907      	ldr	r1, [pc, #28]	@ (8000ac0 <__NVIC_EnableIRQ+0x38>)
 8000aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa6:	095b      	lsrs	r3, r3, #5
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	fa00 f202 	lsl.w	r2, r0, r2
 8000aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ab2:	bf00      	nop
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	e000e100 	.word	0xe000e100

08000ac4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	6039      	str	r1, [r7, #0]
 8000ace:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	db0a      	blt.n	8000aee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	490c      	ldr	r1, [pc, #48]	@ (8000b10 <__NVIC_SetPriority+0x4c>)
 8000ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae2:	0112      	lsls	r2, r2, #4
 8000ae4:	b2d2      	uxtb	r2, r2
 8000ae6:	440b      	add	r3, r1
 8000ae8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aec:	e00a      	b.n	8000b04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	b2da      	uxtb	r2, r3
 8000af2:	4908      	ldr	r1, [pc, #32]	@ (8000b14 <__NVIC_SetPriority+0x50>)
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	f003 030f 	and.w	r3, r3, #15
 8000afa:	3b04      	subs	r3, #4
 8000afc:	0112      	lsls	r2, r2, #4
 8000afe:	b2d2      	uxtb	r2, r2
 8000b00:	440b      	add	r3, r1
 8000b02:	761a      	strb	r2, [r3, #24]
}
 8000b04:	bf00      	nop
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	e000e100 	.word	0xe000e100
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b089      	sub	sp, #36	@ 0x24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	60f8      	str	r0, [r7, #12]
 8000b20:	60b9      	str	r1, [r7, #8]
 8000b22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	f003 0307 	and.w	r3, r3, #7
 8000b2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b2c:	69fb      	ldr	r3, [r7, #28]
 8000b2e:	f1c3 0307 	rsb	r3, r3, #7
 8000b32:	2b04      	cmp	r3, #4
 8000b34:	bf28      	it	cs
 8000b36:	2304      	movcs	r3, #4
 8000b38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	3304      	adds	r3, #4
 8000b3e:	2b06      	cmp	r3, #6
 8000b40:	d902      	bls.n	8000b48 <NVIC_EncodePriority+0x30>
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	3b03      	subs	r3, #3
 8000b46:	e000      	b.n	8000b4a <NVIC_EncodePriority+0x32>
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000b50:	69bb      	ldr	r3, [r7, #24]
 8000b52:	fa02 f303 	lsl.w	r3, r2, r3
 8000b56:	43da      	mvns	r2, r3
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	401a      	ands	r2, r3
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b60:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6a:	43d9      	mvns	r1, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b70:	4313      	orrs	r3, r2
         );
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3724      	adds	r7, #36	@ 0x24
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
	...

08000b80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b90:	d301      	bcc.n	8000b96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b92:	2301      	movs	r3, #1
 8000b94:	e00f      	b.n	8000bb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b96:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc0 <SysTick_Config+0x40>)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b9e:	210f      	movs	r1, #15
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ba4:	f7ff ff8e 	bl	8000ac4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ba8:	4b05      	ldr	r3, [pc, #20]	@ (8000bc0 <SysTick_Config+0x40>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bae:	4b04      	ldr	r3, [pc, #16]	@ (8000bc0 <SysTick_Config+0x40>)
 8000bb0:	2207      	movs	r2, #7
 8000bb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	e000e010 	.word	0xe000e010

08000bc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f7ff ff29 	bl	8000a24 <__NVIC_SetPriorityGrouping>
}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b086      	sub	sp, #24
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	4603      	mov	r3, r0
 8000be2:	60b9      	str	r1, [r7, #8]
 8000be4:	607a      	str	r2, [r7, #4]
 8000be6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bec:	f7ff ff3e 	bl	8000a6c <__NVIC_GetPriorityGrouping>
 8000bf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bf2:	687a      	ldr	r2, [r7, #4]
 8000bf4:	68b9      	ldr	r1, [r7, #8]
 8000bf6:	6978      	ldr	r0, [r7, #20]
 8000bf8:	f7ff ff8e 	bl	8000b18 <NVIC_EncodePriority>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c02:	4611      	mov	r1, r2
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff ff5d 	bl	8000ac4 <__NVIC_SetPriority>
}
 8000c0a:	bf00      	nop
 8000c0c:	3718      	adds	r7, #24
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b082      	sub	sp, #8
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	4603      	mov	r3, r0
 8000c1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff ff31 	bl	8000a88 <__NVIC_EnableIRQ>
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b082      	sub	sp, #8
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f7ff ffa2 	bl	8000b80 <SysTick_Config>
 8000c3c:	4603      	mov	r3, r0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c46:	b480      	push	{r7}
 8000c48:	b083      	sub	sp, #12
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	2b02      	cmp	r3, #2
 8000c58:	d004      	beq.n	8000c64 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2280      	movs	r2, #128	@ 0x80
 8000c5e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000c60:	2301      	movs	r3, #1
 8000c62:	e00c      	b.n	8000c7e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2205      	movs	r2, #5
 8000c68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f022 0201 	bic.w	r2, r2, #1
 8000c7a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	b083      	sub	sp, #12
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000c98:	b2db      	uxtb	r3, r3
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
	...

08000ca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b089      	sub	sp, #36	@ 0x24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61fb      	str	r3, [r7, #28]
 8000cc2:	e165      	b.n	8000f90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	697a      	ldr	r2, [r7, #20]
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	f040 8154 	bne.w	8000f8a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f003 0303 	and.w	r3, r3, #3
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d005      	beq.n	8000cfa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cf6:	2b02      	cmp	r3, #2
 8000cf8:	d130      	bne.n	8000d5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	689b      	ldr	r3, [r3, #8]
 8000cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	2203      	movs	r2, #3
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	43db      	mvns	r3, r3
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	68da      	ldr	r2, [r3, #12]
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	69ba      	ldr	r2, [r7, #24]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d30:	2201      	movs	r2, #1
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	69ba      	ldr	r2, [r7, #24]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	091b      	lsrs	r3, r3, #4
 8000d46:	f003 0201 	and.w	r2, r3, #1
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	4313      	orrs	r3, r2
 8000d54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f003 0303 	and.w	r3, r3, #3
 8000d64:	2b03      	cmp	r3, #3
 8000d66:	d017      	beq.n	8000d98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	2203      	movs	r2, #3
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	689a      	ldr	r2, [r3, #8]
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f003 0303 	and.w	r3, r3, #3
 8000da0:	2b02      	cmp	r3, #2
 8000da2:	d123      	bne.n	8000dec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	08da      	lsrs	r2, r3, #3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3208      	adds	r2, #8
 8000dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	f003 0307 	and.w	r3, r3, #7
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	220f      	movs	r2, #15
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	69ba      	ldr	r2, [r7, #24]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	691a      	ldr	r2, [r3, #16]
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	08da      	lsrs	r2, r3, #3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	3208      	adds	r2, #8
 8000de6:	69b9      	ldr	r1, [r7, #24]
 8000de8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	2203      	movs	r2, #3
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	4013      	ands	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f003 0203 	and.w	r2, r3, #3
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	f000 80ae 	beq.w	8000f8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	4b5d      	ldr	r3, [pc, #372]	@ (8000fa8 <HAL_GPIO_Init+0x300>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e36:	4a5c      	ldr	r2, [pc, #368]	@ (8000fa8 <HAL_GPIO_Init+0x300>)
 8000e38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e3e:	4b5a      	ldr	r3, [pc, #360]	@ (8000fa8 <HAL_GPIO_Init+0x300>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e4a:	4a58      	ldr	r2, [pc, #352]	@ (8000fac <HAL_GPIO_Init+0x304>)
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	089b      	lsrs	r3, r3, #2
 8000e50:	3302      	adds	r3, #2
 8000e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	f003 0303 	and.w	r3, r3, #3
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	220f      	movs	r2, #15
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43db      	mvns	r3, r3
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a4f      	ldr	r2, [pc, #316]	@ (8000fb0 <HAL_GPIO_Init+0x308>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d025      	beq.n	8000ec2 <HAL_GPIO_Init+0x21a>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a4e      	ldr	r2, [pc, #312]	@ (8000fb4 <HAL_GPIO_Init+0x30c>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d01f      	beq.n	8000ebe <HAL_GPIO_Init+0x216>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a4d      	ldr	r2, [pc, #308]	@ (8000fb8 <HAL_GPIO_Init+0x310>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d019      	beq.n	8000eba <HAL_GPIO_Init+0x212>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a4c      	ldr	r2, [pc, #304]	@ (8000fbc <HAL_GPIO_Init+0x314>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d013      	beq.n	8000eb6 <HAL_GPIO_Init+0x20e>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a4b      	ldr	r2, [pc, #300]	@ (8000fc0 <HAL_GPIO_Init+0x318>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d00d      	beq.n	8000eb2 <HAL_GPIO_Init+0x20a>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a4a      	ldr	r2, [pc, #296]	@ (8000fc4 <HAL_GPIO_Init+0x31c>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d007      	beq.n	8000eae <HAL_GPIO_Init+0x206>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a49      	ldr	r2, [pc, #292]	@ (8000fc8 <HAL_GPIO_Init+0x320>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d101      	bne.n	8000eaa <HAL_GPIO_Init+0x202>
 8000ea6:	2306      	movs	r3, #6
 8000ea8:	e00c      	b.n	8000ec4 <HAL_GPIO_Init+0x21c>
 8000eaa:	2307      	movs	r3, #7
 8000eac:	e00a      	b.n	8000ec4 <HAL_GPIO_Init+0x21c>
 8000eae:	2305      	movs	r3, #5
 8000eb0:	e008      	b.n	8000ec4 <HAL_GPIO_Init+0x21c>
 8000eb2:	2304      	movs	r3, #4
 8000eb4:	e006      	b.n	8000ec4 <HAL_GPIO_Init+0x21c>
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	e004      	b.n	8000ec4 <HAL_GPIO_Init+0x21c>
 8000eba:	2302      	movs	r3, #2
 8000ebc:	e002      	b.n	8000ec4 <HAL_GPIO_Init+0x21c>
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e000      	b.n	8000ec4 <HAL_GPIO_Init+0x21c>
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	69fa      	ldr	r2, [r7, #28]
 8000ec6:	f002 0203 	and.w	r2, r2, #3
 8000eca:	0092      	lsls	r2, r2, #2
 8000ecc:	4093      	lsls	r3, r2
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ed4:	4935      	ldr	r1, [pc, #212]	@ (8000fac <HAL_GPIO_Init+0x304>)
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	089b      	lsrs	r3, r3, #2
 8000eda:	3302      	adds	r3, #2
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ee2:	4b3a      	ldr	r3, [pc, #232]	@ (8000fcc <HAL_GPIO_Init+0x324>)
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	43db      	mvns	r3, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d003      	beq.n	8000f06 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f06:	4a31      	ldr	r2, [pc, #196]	@ (8000fcc <HAL_GPIO_Init+0x324>)
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f0c:	4b2f      	ldr	r3, [pc, #188]	@ (8000fcc <HAL_GPIO_Init+0x324>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	43db      	mvns	r3, r3
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d003      	beq.n	8000f30 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f30:	4a26      	ldr	r2, [pc, #152]	@ (8000fcc <HAL_GPIO_Init+0x324>)
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f36:	4b25      	ldr	r3, [pc, #148]	@ (8000fcc <HAL_GPIO_Init+0x324>)
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4013      	ands	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d003      	beq.n	8000f5a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f5a:	4a1c      	ldr	r2, [pc, #112]	@ (8000fcc <HAL_GPIO_Init+0x324>)
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f60:	4b1a      	ldr	r3, [pc, #104]	@ (8000fcc <HAL_GPIO_Init+0x324>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d003      	beq.n	8000f84 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f84:	4a11      	ldr	r2, [pc, #68]	@ (8000fcc <HAL_GPIO_Init+0x324>)
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	61fb      	str	r3, [r7, #28]
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	2b0f      	cmp	r3, #15
 8000f94:	f67f ae96 	bls.w	8000cc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f98:	bf00      	nop
 8000f9a:	bf00      	nop
 8000f9c:	3724      	adds	r7, #36	@ 0x24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	40013800 	.word	0x40013800
 8000fb0:	40020000 	.word	0x40020000
 8000fb4:	40020400 	.word	0x40020400
 8000fb8:	40020800 	.word	0x40020800
 8000fbc:	40020c00 	.word	0x40020c00
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	40021400 	.word	0x40021400
 8000fc8:	40021800 	.word	0x40021800
 8000fcc:	40013c00 	.word	0x40013c00

08000fd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d101      	bne.n	8000fe2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e12b      	b.n	800123a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d106      	bne.n	8000ffc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f7ff fba0 	bl	800073c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2224      	movs	r2, #36	@ 0x24
 8001000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f022 0201 	bic.w	r2, r2, #1
 8001012:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001022:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001032:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001034:	f002 fa78 	bl	8003528 <HAL_RCC_GetPCLK1Freq>
 8001038:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	4a81      	ldr	r2, [pc, #516]	@ (8001244 <HAL_I2C_Init+0x274>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d807      	bhi.n	8001054 <HAL_I2C_Init+0x84>
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	4a80      	ldr	r2, [pc, #512]	@ (8001248 <HAL_I2C_Init+0x278>)
 8001048:	4293      	cmp	r3, r2
 800104a:	bf94      	ite	ls
 800104c:	2301      	movls	r3, #1
 800104e:	2300      	movhi	r3, #0
 8001050:	b2db      	uxtb	r3, r3
 8001052:	e006      	b.n	8001062 <HAL_I2C_Init+0x92>
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	4a7d      	ldr	r2, [pc, #500]	@ (800124c <HAL_I2C_Init+0x27c>)
 8001058:	4293      	cmp	r3, r2
 800105a:	bf94      	ite	ls
 800105c:	2301      	movls	r3, #1
 800105e:	2300      	movhi	r3, #0
 8001060:	b2db      	uxtb	r3, r3
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e0e7      	b.n	800123a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	4a78      	ldr	r2, [pc, #480]	@ (8001250 <HAL_I2C_Init+0x280>)
 800106e:	fba2 2303 	umull	r2, r3, r2, r3
 8001072:	0c9b      	lsrs	r3, r3, #18
 8001074:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	68ba      	ldr	r2, [r7, #8]
 8001086:	430a      	orrs	r2, r1
 8001088:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	6a1b      	ldr	r3, [r3, #32]
 8001090:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	4a6a      	ldr	r2, [pc, #424]	@ (8001244 <HAL_I2C_Init+0x274>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d802      	bhi.n	80010a4 <HAL_I2C_Init+0xd4>
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	3301      	adds	r3, #1
 80010a2:	e009      	b.n	80010b8 <HAL_I2C_Init+0xe8>
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80010aa:	fb02 f303 	mul.w	r3, r2, r3
 80010ae:	4a69      	ldr	r2, [pc, #420]	@ (8001254 <HAL_I2C_Init+0x284>)
 80010b0:	fba2 2303 	umull	r2, r3, r2, r3
 80010b4:	099b      	lsrs	r3, r3, #6
 80010b6:	3301      	adds	r3, #1
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	6812      	ldr	r2, [r2, #0]
 80010bc:	430b      	orrs	r3, r1
 80010be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	69db      	ldr	r3, [r3, #28]
 80010c6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80010ca:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	495c      	ldr	r1, [pc, #368]	@ (8001244 <HAL_I2C_Init+0x274>)
 80010d4:	428b      	cmp	r3, r1
 80010d6:	d819      	bhi.n	800110c <HAL_I2C_Init+0x13c>
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	1e59      	subs	r1, r3, #1
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80010e6:	1c59      	adds	r1, r3, #1
 80010e8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80010ec:	400b      	ands	r3, r1
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d00a      	beq.n	8001108 <HAL_I2C_Init+0x138>
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	1e59      	subs	r1, r3, #1
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001100:	3301      	adds	r3, #1
 8001102:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001106:	e051      	b.n	80011ac <HAL_I2C_Init+0x1dc>
 8001108:	2304      	movs	r3, #4
 800110a:	e04f      	b.n	80011ac <HAL_I2C_Init+0x1dc>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d111      	bne.n	8001138 <HAL_I2C_Init+0x168>
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	1e58      	subs	r0, r3, #1
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6859      	ldr	r1, [r3, #4]
 800111c:	460b      	mov	r3, r1
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	440b      	add	r3, r1
 8001122:	fbb0 f3f3 	udiv	r3, r0, r3
 8001126:	3301      	adds	r3, #1
 8001128:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800112c:	2b00      	cmp	r3, #0
 800112e:	bf0c      	ite	eq
 8001130:	2301      	moveq	r3, #1
 8001132:	2300      	movne	r3, #0
 8001134:	b2db      	uxtb	r3, r3
 8001136:	e012      	b.n	800115e <HAL_I2C_Init+0x18e>
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	1e58      	subs	r0, r3, #1
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6859      	ldr	r1, [r3, #4]
 8001140:	460b      	mov	r3, r1
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	440b      	add	r3, r1
 8001146:	0099      	lsls	r1, r3, #2
 8001148:	440b      	add	r3, r1
 800114a:	fbb0 f3f3 	udiv	r3, r0, r3
 800114e:	3301      	adds	r3, #1
 8001150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001154:	2b00      	cmp	r3, #0
 8001156:	bf0c      	ite	eq
 8001158:	2301      	moveq	r3, #1
 800115a:	2300      	movne	r3, #0
 800115c:	b2db      	uxtb	r3, r3
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <HAL_I2C_Init+0x196>
 8001162:	2301      	movs	r3, #1
 8001164:	e022      	b.n	80011ac <HAL_I2C_Init+0x1dc>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d10e      	bne.n	800118c <HAL_I2C_Init+0x1bc>
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	1e58      	subs	r0, r3, #1
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6859      	ldr	r1, [r3, #4]
 8001176:	460b      	mov	r3, r1
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	440b      	add	r3, r1
 800117c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001180:	3301      	adds	r3, #1
 8001182:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001186:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800118a:	e00f      	b.n	80011ac <HAL_I2C_Init+0x1dc>
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	1e58      	subs	r0, r3, #1
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6859      	ldr	r1, [r3, #4]
 8001194:	460b      	mov	r3, r1
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	440b      	add	r3, r1
 800119a:	0099      	lsls	r1, r3, #2
 800119c:	440b      	add	r3, r1
 800119e:	fbb0 f3f3 	udiv	r3, r0, r3
 80011a2:	3301      	adds	r3, #1
 80011a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80011ac:	6879      	ldr	r1, [r7, #4]
 80011ae:	6809      	ldr	r1, [r1, #0]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	69da      	ldr	r2, [r3, #28]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6a1b      	ldr	r3, [r3, #32]
 80011c6:	431a      	orrs	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	430a      	orrs	r2, r1
 80011ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80011da:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	6911      	ldr	r1, [r2, #16]
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	68d2      	ldr	r2, [r2, #12]
 80011e6:	4311      	orrs	r1, r2
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	6812      	ldr	r2, [r2, #0]
 80011ec:	430b      	orrs	r3, r1
 80011ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	68db      	ldr	r3, [r3, #12]
 80011f6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	695a      	ldr	r2, [r3, #20]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	699b      	ldr	r3, [r3, #24]
 8001202:	431a      	orrs	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	430a      	orrs	r2, r1
 800120a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f042 0201 	orr.w	r2, r2, #1
 800121a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2200      	movs	r2, #0
 8001220:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2220      	movs	r2, #32
 8001226:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2200      	movs	r2, #0
 800122e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2200      	movs	r2, #0
 8001234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	000186a0 	.word	0x000186a0
 8001248:	001e847f 	.word	0x001e847f
 800124c:	003d08ff 	.word	0x003d08ff
 8001250:	431bde83 	.word	0x431bde83
 8001254:	10624dd3 	.word	0x10624dd3

08001258 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	695b      	ldr	r3, [r3, #20]
 8001266:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800126a:	2b80      	cmp	r3, #128	@ 0x80
 800126c:	d103      	bne.n	8001276 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2200      	movs	r2, #0
 8001274:	611a      	str	r2, [r3, #16]
  }
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
	...

08001284 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af02      	add	r7, sp, #8
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	4608      	mov	r0, r1
 800128e:	4611      	mov	r1, r2
 8001290:	461a      	mov	r2, r3
 8001292:	4603      	mov	r3, r0
 8001294:	817b      	strh	r3, [r7, #10]
 8001296:	460b      	mov	r3, r1
 8001298:	813b      	strh	r3, [r7, #8]
 800129a:	4613      	mov	r3, r2
 800129c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800129e:	f7ff fb91 	bl	80009c4 <HAL_GetTick>
 80012a2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2b20      	cmp	r3, #32
 80012ae:	f040 80d9 	bne.w	8001464 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	2319      	movs	r3, #25
 80012b8:	2201      	movs	r2, #1
 80012ba:	496d      	ldr	r1, [pc, #436]	@ (8001470 <HAL_I2C_Mem_Write+0x1ec>)
 80012bc:	68f8      	ldr	r0, [r7, #12]
 80012be:	f001 fe1b 	bl	8002ef8 <I2C_WaitOnFlagUntilTimeout>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80012c8:	2302      	movs	r3, #2
 80012ca:	e0cc      	b.n	8001466 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d101      	bne.n	80012da <HAL_I2C_Mem_Write+0x56>
 80012d6:	2302      	movs	r3, #2
 80012d8:	e0c5      	b.n	8001466 <HAL_I2C_Mem_Write+0x1e2>
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2201      	movs	r2, #1
 80012de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d007      	beq.n	8001300 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f042 0201 	orr.w	r2, r2, #1
 80012fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800130e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2221      	movs	r2, #33	@ 0x21
 8001314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	2240      	movs	r2, #64	@ 0x40
 800131c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	2200      	movs	r2, #0
 8001324:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	6a3a      	ldr	r2, [r7, #32]
 800132a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001330:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001336:	b29a      	uxth	r2, r3
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	4a4d      	ldr	r2, [pc, #308]	@ (8001474 <HAL_I2C_Mem_Write+0x1f0>)
 8001340:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001342:	88f8      	ldrh	r0, [r7, #6]
 8001344:	893a      	ldrh	r2, [r7, #8]
 8001346:	8979      	ldrh	r1, [r7, #10]
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	9301      	str	r3, [sp, #4]
 800134c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800134e:	9300      	str	r3, [sp, #0]
 8001350:	4603      	mov	r3, r0
 8001352:	68f8      	ldr	r0, [r7, #12]
 8001354:	f001 fc92 	bl	8002c7c <I2C_RequestMemoryWrite>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d052      	beq.n	8001404 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e081      	b.n	8001466 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001362:	697a      	ldr	r2, [r7, #20]
 8001364:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001366:	68f8      	ldr	r0, [r7, #12]
 8001368:	f001 fee0 	bl	800312c <I2C_WaitOnTXEFlagUntilTimeout>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d00d      	beq.n	800138e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001376:	2b04      	cmp	r3, #4
 8001378:	d107      	bne.n	800138a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001388:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e06b      	b.n	8001466 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001392:	781a      	ldrb	r2, [r3, #0]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800139e:	1c5a      	adds	r2, r3, #1
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013a8:	3b01      	subs	r3, #1
 80013aa:	b29a      	uxth	r2, r3
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	3b01      	subs	r3, #1
 80013b8:	b29a      	uxth	r2, r3
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	695b      	ldr	r3, [r3, #20]
 80013c4:	f003 0304 	and.w	r3, r3, #4
 80013c8:	2b04      	cmp	r3, #4
 80013ca:	d11b      	bne.n	8001404 <HAL_I2C_Mem_Write+0x180>
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d017      	beq.n	8001404 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013d8:	781a      	ldrb	r2, [r3, #0]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013e4:	1c5a      	adds	r2, r3, #1
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013ee:	3b01      	subs	r3, #1
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	3b01      	subs	r3, #1
 80013fe:	b29a      	uxth	r2, r3
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001408:	2b00      	cmp	r3, #0
 800140a:	d1aa      	bne.n	8001362 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800140c:	697a      	ldr	r2, [r7, #20]
 800140e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001410:	68f8      	ldr	r0, [r7, #12]
 8001412:	f001 fed3 	bl	80031bc <I2C_WaitOnBTFFlagUntilTimeout>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d00d      	beq.n	8001438 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001420:	2b04      	cmp	r3, #4
 8001422:	d107      	bne.n	8001434 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001432:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e016      	b.n	8001466 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001446:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2220      	movs	r2, #32
 800144c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2200      	movs	r2, #0
 8001454:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	2200      	movs	r2, #0
 800145c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001460:	2300      	movs	r3, #0
 8001462:	e000      	b.n	8001466 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001464:	2302      	movs	r3, #2
  }
}
 8001466:	4618      	mov	r0, r3
 8001468:	3718      	adds	r7, #24
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	00100002 	.word	0x00100002
 8001474:	ffff0000 	.word	0xffff0000

08001478 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b088      	sub	sp, #32
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001480:	2300      	movs	r3, #0
 8001482:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001490:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001498:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80014a0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
 80014a4:	2b10      	cmp	r3, #16
 80014a6:	d003      	beq.n	80014b0 <HAL_I2C_EV_IRQHandler+0x38>
 80014a8:	7bfb      	ldrb	r3, [r7, #15]
 80014aa:	2b40      	cmp	r3, #64	@ 0x40
 80014ac:	f040 80c1 	bne.w	8001632 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	695b      	ldr	r3, [r3, #20]
 80014be:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d10d      	bne.n	80014e6 <HAL_I2C_EV_IRQHandler+0x6e>
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80014d0:	d003      	beq.n	80014da <HAL_I2C_EV_IRQHandler+0x62>
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80014d8:	d101      	bne.n	80014de <HAL_I2C_EV_IRQHandler+0x66>
 80014da:	2301      	movs	r3, #1
 80014dc:	e000      	b.n	80014e0 <HAL_I2C_EV_IRQHandler+0x68>
 80014de:	2300      	movs	r3, #0
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	f000 8132 	beq.w	800174a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d00c      	beq.n	800150a <HAL_I2C_EV_IRQHandler+0x92>
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	0a5b      	lsrs	r3, r3, #9
 80014f4:	f003 0301 	and.w	r3, r3, #1
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d006      	beq.n	800150a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f001 ff06 	bl	800330e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f000 fd9b 	bl	800203e <I2C_Master_SB>
 8001508:	e092      	b.n	8001630 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	08db      	lsrs	r3, r3, #3
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	2b00      	cmp	r3, #0
 8001514:	d009      	beq.n	800152a <HAL_I2C_EV_IRQHandler+0xb2>
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	0a5b      	lsrs	r3, r3, #9
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f000 fe11 	bl	800214a <I2C_Master_ADD10>
 8001528:	e082      	b.n	8001630 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	085b      	lsrs	r3, r3, #1
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	2b00      	cmp	r3, #0
 8001534:	d009      	beq.n	800154a <HAL_I2C_EV_IRQHandler+0xd2>
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	0a5b      	lsrs	r3, r3, #9
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	2b00      	cmp	r3, #0
 8001540:	d003      	beq.n	800154a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f000 fe2b 	bl	800219e <I2C_Master_ADDR>
 8001548:	e072      	b.n	8001630 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	089b      	lsrs	r3, r3, #2
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	2b00      	cmp	r3, #0
 8001554:	d03b      	beq.n	80015ce <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001560:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001564:	f000 80f3 	beq.w	800174e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	09db      	lsrs	r3, r3, #7
 800156c:	f003 0301 	and.w	r3, r3, #1
 8001570:	2b00      	cmp	r3, #0
 8001572:	d00f      	beq.n	8001594 <HAL_I2C_EV_IRQHandler+0x11c>
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	0a9b      	lsrs	r3, r3, #10
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	2b00      	cmp	r3, #0
 800157e:	d009      	beq.n	8001594 <HAL_I2C_EV_IRQHandler+0x11c>
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	089b      	lsrs	r3, r3, #2
 8001584:	f003 0301 	and.w	r3, r3, #1
 8001588:	2b00      	cmp	r3, #0
 800158a:	d103      	bne.n	8001594 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f000 f9f3 	bl	8001978 <I2C_MasterTransmit_TXE>
 8001592:	e04d      	b.n	8001630 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	089b      	lsrs	r3, r3, #2
 8001598:	f003 0301 	and.w	r3, r3, #1
 800159c:	2b00      	cmp	r3, #0
 800159e:	f000 80d6 	beq.w	800174e <HAL_I2C_EV_IRQHandler+0x2d6>
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	0a5b      	lsrs	r3, r3, #9
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	f000 80cf 	beq.w	800174e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80015b0:	7bbb      	ldrb	r3, [r7, #14]
 80015b2:	2b21      	cmp	r3, #33	@ 0x21
 80015b4:	d103      	bne.n	80015be <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f000 fa7a 	bl	8001ab0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80015bc:	e0c7      	b.n	800174e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80015be:	7bfb      	ldrb	r3, [r7, #15]
 80015c0:	2b40      	cmp	r3, #64	@ 0x40
 80015c2:	f040 80c4 	bne.w	800174e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 fae8 	bl	8001b9c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80015cc:	e0bf      	b.n	800174e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80015dc:	f000 80b7 	beq.w	800174e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	099b      	lsrs	r3, r3, #6
 80015e4:	f003 0301 	and.w	r3, r3, #1
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d00f      	beq.n	800160c <HAL_I2C_EV_IRQHandler+0x194>
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	0a9b      	lsrs	r3, r3, #10
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d009      	beq.n	800160c <HAL_I2C_EV_IRQHandler+0x194>
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	089b      	lsrs	r3, r3, #2
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	2b00      	cmp	r3, #0
 8001602:	d103      	bne.n	800160c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f000 fb61 	bl	8001ccc <I2C_MasterReceive_RXNE>
 800160a:	e011      	b.n	8001630 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	089b      	lsrs	r3, r3, #2
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	2b00      	cmp	r3, #0
 8001616:	f000 809a 	beq.w	800174e <HAL_I2C_EV_IRQHandler+0x2d6>
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	0a5b      	lsrs	r3, r3, #9
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	2b00      	cmp	r3, #0
 8001624:	f000 8093 	beq.w	800174e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f000 fc17 	bl	8001e5c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800162e:	e08e      	b.n	800174e <HAL_I2C_EV_IRQHandler+0x2d6>
 8001630:	e08d      	b.n	800174e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001636:	2b00      	cmp	r3, #0
 8001638:	d004      	beq.n	8001644 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	695b      	ldr	r3, [r3, #20]
 8001640:	61fb      	str	r3, [r7, #28]
 8001642:	e007      	b.n	8001654 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	085b      	lsrs	r3, r3, #1
 8001658:	f003 0301 	and.w	r3, r3, #1
 800165c:	2b00      	cmp	r3, #0
 800165e:	d012      	beq.n	8001686 <HAL_I2C_EV_IRQHandler+0x20e>
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	0a5b      	lsrs	r3, r3, #9
 8001664:	f003 0301 	and.w	r3, r3, #1
 8001668:	2b00      	cmp	r3, #0
 800166a:	d00c      	beq.n	8001686 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001670:	2b00      	cmp	r3, #0
 8001672:	d003      	beq.n	800167c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800167c:	69b9      	ldr	r1, [r7, #24]
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f000 ffdc 	bl	800263c <I2C_Slave_ADDR>
 8001684:	e066      	b.n	8001754 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	091b      	lsrs	r3, r3, #4
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	2b00      	cmp	r3, #0
 8001690:	d009      	beq.n	80016a6 <HAL_I2C_EV_IRQHandler+0x22e>
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	0a5b      	lsrs	r3, r3, #9
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	2b00      	cmp	r3, #0
 800169c:	d003      	beq.n	80016a6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f001 f816 	bl	80026d0 <I2C_Slave_STOPF>
 80016a4:	e056      	b.n	8001754 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80016a6:	7bbb      	ldrb	r3, [r7, #14]
 80016a8:	2b21      	cmp	r3, #33	@ 0x21
 80016aa:	d002      	beq.n	80016b2 <HAL_I2C_EV_IRQHandler+0x23a>
 80016ac:	7bbb      	ldrb	r3, [r7, #14]
 80016ae:	2b29      	cmp	r3, #41	@ 0x29
 80016b0:	d125      	bne.n	80016fe <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	09db      	lsrs	r3, r3, #7
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d00f      	beq.n	80016de <HAL_I2C_EV_IRQHandler+0x266>
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	0a9b      	lsrs	r3, r3, #10
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d009      	beq.n	80016de <HAL_I2C_EV_IRQHandler+0x266>
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	089b      	lsrs	r3, r3, #2
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d103      	bne.n	80016de <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f000 fef2 	bl	80024c0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80016dc:	e039      	b.n	8001752 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	089b      	lsrs	r3, r3, #2
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d033      	beq.n	8001752 <HAL_I2C_EV_IRQHandler+0x2da>
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	0a5b      	lsrs	r3, r3, #9
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d02d      	beq.n	8001752 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f000 ff1f 	bl	800253a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80016fc:	e029      	b.n	8001752 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	099b      	lsrs	r3, r3, #6
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	2b00      	cmp	r3, #0
 8001708:	d00f      	beq.n	800172a <HAL_I2C_EV_IRQHandler+0x2b2>
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	0a9b      	lsrs	r3, r3, #10
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	2b00      	cmp	r3, #0
 8001714:	d009      	beq.n	800172a <HAL_I2C_EV_IRQHandler+0x2b2>
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	089b      	lsrs	r3, r3, #2
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	2b00      	cmp	r3, #0
 8001720:	d103      	bne.n	800172a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f000 ff2a 	bl	800257c <I2C_SlaveReceive_RXNE>
 8001728:	e014      	b.n	8001754 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	089b      	lsrs	r3, r3, #2
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	2b00      	cmp	r3, #0
 8001734:	d00e      	beq.n	8001754 <HAL_I2C_EV_IRQHandler+0x2dc>
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	0a5b      	lsrs	r3, r3, #9
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	2b00      	cmp	r3, #0
 8001740:	d008      	beq.n	8001754 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f000 ff58 	bl	80025f8 <I2C_SlaveReceive_BTF>
 8001748:	e004      	b.n	8001754 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800174a:	bf00      	nop
 800174c:	e002      	b.n	8001754 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800174e:	bf00      	nop
 8001750:	e000      	b.n	8001754 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001752:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001754:	3720      	adds	r7, #32
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b08a      	sub	sp, #40	@ 0x28
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	695b      	ldr	r3, [r3, #20]
 8001768:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001772:	2300      	movs	r3, #0
 8001774:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800177c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800177e:	6a3b      	ldr	r3, [r7, #32]
 8001780:	0a1b      	lsrs	r3, r3, #8
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	2b00      	cmp	r3, #0
 8001788:	d00e      	beq.n	80017a8 <HAL_I2C_ER_IRQHandler+0x4e>
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	0a1b      	lsrs	r3, r3, #8
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	2b00      	cmp	r3, #0
 8001794:	d008      	beq.n	80017a8 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80017a6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80017a8:	6a3b      	ldr	r3, [r7, #32]
 80017aa:	0a5b      	lsrs	r3, r3, #9
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d00e      	beq.n	80017d2 <HAL_I2C_ER_IRQHandler+0x78>
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	0a1b      	lsrs	r3, r3, #8
 80017b8:	f003 0301 	and.w	r3, r3, #1
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d008      	beq.n	80017d2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80017c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c2:	f043 0302 	orr.w	r3, r3, #2
 80017c6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80017d0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80017d2:	6a3b      	ldr	r3, [r7, #32]
 80017d4:	0a9b      	lsrs	r3, r3, #10
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d03f      	beq.n	800185e <HAL_I2C_ER_IRQHandler+0x104>
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	0a1b      	lsrs	r3, r3, #8
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d039      	beq.n	800185e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80017ea:	7efb      	ldrb	r3, [r7, #27]
 80017ec:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017fc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001802:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001804:	7ebb      	ldrb	r3, [r7, #26]
 8001806:	2b20      	cmp	r3, #32
 8001808:	d112      	bne.n	8001830 <HAL_I2C_ER_IRQHandler+0xd6>
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d10f      	bne.n	8001830 <HAL_I2C_ER_IRQHandler+0xd6>
 8001810:	7cfb      	ldrb	r3, [r7, #19]
 8001812:	2b21      	cmp	r3, #33	@ 0x21
 8001814:	d008      	beq.n	8001828 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001816:	7cfb      	ldrb	r3, [r7, #19]
 8001818:	2b29      	cmp	r3, #41	@ 0x29
 800181a:	d005      	beq.n	8001828 <HAL_I2C_ER_IRQHandler+0xce>
 800181c:	7cfb      	ldrb	r3, [r7, #19]
 800181e:	2b28      	cmp	r3, #40	@ 0x28
 8001820:	d106      	bne.n	8001830 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2b21      	cmp	r3, #33	@ 0x21
 8001826:	d103      	bne.n	8001830 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f001 f881 	bl	8002930 <I2C_Slave_AF>
 800182e:	e016      	b.n	800185e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001838:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800183a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800183c:	f043 0304 	orr.w	r3, r3, #4
 8001840:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001842:	7efb      	ldrb	r3, [r7, #27]
 8001844:	2b10      	cmp	r3, #16
 8001846:	d002      	beq.n	800184e <HAL_I2C_ER_IRQHandler+0xf4>
 8001848:	7efb      	ldrb	r3, [r7, #27]
 800184a:	2b40      	cmp	r3, #64	@ 0x40
 800184c:	d107      	bne.n	800185e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800185c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800185e:	6a3b      	ldr	r3, [r7, #32]
 8001860:	0adb      	lsrs	r3, r3, #11
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	2b00      	cmp	r3, #0
 8001868:	d00e      	beq.n	8001888 <HAL_I2C_ER_IRQHandler+0x12e>
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	0a1b      	lsrs	r3, r3, #8
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	2b00      	cmp	r3, #0
 8001874:	d008      	beq.n	8001888 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001878:	f043 0308 	orr.w	r3, r3, #8
 800187c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8001886:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800188a:	2b00      	cmp	r3, #0
 800188c:	d008      	beq.n	80018a0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001894:	431a      	orrs	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f001 f8bc 	bl	8002a18 <I2C_ITError>
  }
}
 80018a0:	bf00      	nop
 80018a2:	3728      	adds	r7, #40	@ 0x28
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	460b      	mov	r3, r1
 8001902:	70fb      	strb	r3, [r7, #3]
 8001904:	4613      	mov	r3, r2
 8001906:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001986:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800198e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001994:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800199a:	2b00      	cmp	r3, #0
 800199c:	d150      	bne.n	8001a40 <I2C_MasterTransmit_TXE+0xc8>
 800199e:	7bfb      	ldrb	r3, [r7, #15]
 80019a0:	2b21      	cmp	r3, #33	@ 0x21
 80019a2:	d14d      	bne.n	8001a40 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	2b08      	cmp	r3, #8
 80019a8:	d01d      	beq.n	80019e6 <I2C_MasterTransmit_TXE+0x6e>
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	2b20      	cmp	r3, #32
 80019ae:	d01a      	beq.n	80019e6 <I2C_MasterTransmit_TXE+0x6e>
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80019b6:	d016      	beq.n	80019e6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	685a      	ldr	r2, [r3, #4]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80019c6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2211      	movs	r2, #17
 80019cc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2220      	movs	r2, #32
 80019da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7ff ff62 	bl	80018a8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80019e4:	e060      	b.n	8001aa8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	685a      	ldr	r2, [r3, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80019f4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a04:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2220      	movs	r2, #32
 8001a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	2b40      	cmp	r3, #64	@ 0x40
 8001a1e:	d107      	bne.n	8001a30 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f7ff ff7d 	bl	8001928 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001a2e:	e03b      	b.n	8001aa8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7ff ff35 	bl	80018a8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001a3e:	e033      	b.n	8001aa8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001a40:	7bfb      	ldrb	r3, [r7, #15]
 8001a42:	2b21      	cmp	r3, #33	@ 0x21
 8001a44:	d005      	beq.n	8001a52 <I2C_MasterTransmit_TXE+0xda>
 8001a46:	7bbb      	ldrb	r3, [r7, #14]
 8001a48:	2b40      	cmp	r3, #64	@ 0x40
 8001a4a:	d12d      	bne.n	8001aa8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001a4c:	7bfb      	ldrb	r3, [r7, #15]
 8001a4e:	2b22      	cmp	r3, #34	@ 0x22
 8001a50:	d12a      	bne.n	8001aa8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d108      	bne.n	8001a6e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	685a      	ldr	r2, [r3, #4]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a6a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001a6c:	e01c      	b.n	8001aa8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b40      	cmp	r3, #64	@ 0x40
 8001a78:	d103      	bne.n	8001a82 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 f88e 	bl	8001b9c <I2C_MemoryTransmit_TXE_BTF>
}
 8001a80:	e012      	b.n	8001aa8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a86:	781a      	ldrb	r2, [r3, #0]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a92:	1c5a      	adds	r2, r3, #1
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001aa6:	e7ff      	b.n	8001aa8 <I2C_MasterTransmit_TXE+0x130>
 8001aa8:	bf00      	nop
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001abc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b21      	cmp	r3, #33	@ 0x21
 8001ac8:	d164      	bne.n	8001b94 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d012      	beq.n	8001afa <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad8:	781a      	ldrb	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae4:	1c5a      	adds	r2, r3, #1
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	3b01      	subs	r3, #1
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001af8:	e04c      	b.n	8001b94 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2b08      	cmp	r3, #8
 8001afe:	d01d      	beq.n	8001b3c <I2C_MasterTransmit_BTF+0x8c>
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2b20      	cmp	r3, #32
 8001b04:	d01a      	beq.n	8001b3c <I2C_MasterTransmit_BTF+0x8c>
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001b0c:	d016      	beq.n	8001b3c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	685a      	ldr	r2, [r3, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001b1c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2211      	movs	r2, #17
 8001b22:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2220      	movs	r2, #32
 8001b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f7ff feb7 	bl	80018a8 <HAL_I2C_MasterTxCpltCallback>
}
 8001b3a:	e02b      	b.n	8001b94 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	685a      	ldr	r2, [r3, #4]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001b4a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b5a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2220      	movs	r2, #32
 8001b66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b40      	cmp	r3, #64	@ 0x40
 8001b74:	d107      	bne.n	8001b86 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7ff fed2 	bl	8001928 <HAL_I2C_MemTxCpltCallback>
}
 8001b84:	e006      	b.n	8001b94 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff fe8a 	bl	80018a8 <HAL_I2C_MasterTxCpltCallback>
}
 8001b94:	bf00      	nop
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001baa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d11d      	bne.n	8001bf0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d10b      	bne.n	8001bd4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bcc:	1c9a      	adds	r2, r3, #2
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8001bd2:	e077      	b.n	8001cc4 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	121b      	asrs	r3, r3, #8
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001be8:	1c5a      	adds	r2, r3, #1
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001bee:	e069      	b.n	8001cc4 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d10b      	bne.n	8001c10 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c08:	1c5a      	adds	r2, r3, #1
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001c0e:	e059      	b.n	8001cc4 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d152      	bne.n	8001cbe <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001c18:	7bfb      	ldrb	r3, [r7, #15]
 8001c1a:	2b22      	cmp	r3, #34	@ 0x22
 8001c1c:	d10d      	bne.n	8001c3a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c2c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c32:	1c5a      	adds	r2, r3, #1
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001c38:	e044      	b.n	8001cc4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d015      	beq.n	8001c70 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001c44:	7bfb      	ldrb	r3, [r7, #15]
 8001c46:	2b21      	cmp	r3, #33	@ 0x21
 8001c48:	d112      	bne.n	8001c70 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c4e:	781a      	ldrb	r2, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c5a:	1c5a      	adds	r2, r3, #1
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	3b01      	subs	r3, #1
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001c6e:	e029      	b.n	8001cc4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d124      	bne.n	8001cc4 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8001c7a:	7bfb      	ldrb	r3, [r7, #15]
 8001c7c:	2b21      	cmp	r3, #33	@ 0x21
 8001c7e:	d121      	bne.n	8001cc4 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	685a      	ldr	r2, [r3, #4]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001c8e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c9e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2220      	movs	r2, #32
 8001caa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7ff fe36 	bl	8001928 <HAL_I2C_MemTxCpltCallback>
}
 8001cbc:	e002      	b.n	8001cc4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7ff faca 	bl	8001258 <I2C_Flush_DR>
}
 8001cc4:	bf00      	nop
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b22      	cmp	r3, #34	@ 0x22
 8001cde:	f040 80b9 	bne.w	8001e54 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ce6:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	2b03      	cmp	r3, #3
 8001cf4:	d921      	bls.n	8001d3a <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	691a      	ldr	r2, [r3, #16]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d00:	b2d2      	uxtb	r2, r2
 8001d02:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d08:	1c5a      	adds	r2, r3, #1
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	3b01      	subs	r3, #1
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	2b03      	cmp	r3, #3
 8001d24:	f040 8096 	bne.w	8001e54 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d36:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8001d38:	e08c      	b.n	8001e54 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d07f      	beq.n	8001e42 <I2C_MasterReceive_RXNE+0x176>
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d002      	beq.n	8001d4e <I2C_MasterReceive_RXNE+0x82>
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d179      	bne.n	8001e42 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f001 fa7c 	bl	800324c <I2C_WaitOnSTOPRequestThroughIT>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d14c      	bne.n	8001df4 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d68:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001d78:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	691a      	ldr	r2, [r3, #16]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d84:	b2d2      	uxtb	r2, r2
 8001d86:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d8c:	1c5a      	adds	r2, r3, #1
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2220      	movs	r2, #32
 8001da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2b40      	cmp	r3, #64	@ 0x40
 8001db2:	d10a      	bne.n	8001dca <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7ff fdba 	bl	800193c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001dc8:	e044      	b.n	8001e54 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2b08      	cmp	r3, #8
 8001dd6:	d002      	beq.n	8001dde <I2C_MasterReceive_RXNE+0x112>
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2b20      	cmp	r3, #32
 8001ddc:	d103      	bne.n	8001de6 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	631a      	str	r2, [r3, #48]	@ 0x30
 8001de4:	e002      	b.n	8001dec <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2212      	movs	r2, #18
 8001dea:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f7ff fd65 	bl	80018bc <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001df2:	e02f      	b.n	8001e54 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	685a      	ldr	r2, [r3, #4]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001e02:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	691a      	ldr	r2, [r3, #16]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e0e:	b2d2      	uxtb	r2, r2
 8001e10:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e16:	1c5a      	adds	r2, r3, #1
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	3b01      	subs	r3, #1
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2220      	movs	r2, #32
 8001e2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f7ff fd88 	bl	8001950 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001e40:	e008      	b.n	8001e54 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	685a      	ldr	r2, [r3, #4]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e50:	605a      	str	r2, [r3, #4]
}
 8001e52:	e7ff      	b.n	8001e54 <I2C_MasterReceive_RXNE+0x188>
 8001e54:	bf00      	nop
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e68:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	2b04      	cmp	r3, #4
 8001e72:	d11b      	bne.n	8001eac <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	685a      	ldr	r2, [r3, #4]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e82:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	691a      	ldr	r2, [r3, #16]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e8e:	b2d2      	uxtb	r2, r2
 8001e90:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e96:	1c5a      	adds	r2, r3, #1
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8001eaa:	e0c4      	b.n	8002036 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	2b03      	cmp	r3, #3
 8001eb4:	d129      	bne.n	8001f0a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	685a      	ldr	r2, [r3, #4]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ec4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2b04      	cmp	r3, #4
 8001eca:	d00a      	beq.n	8001ee2 <I2C_MasterReceive_BTF+0x86>
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d007      	beq.n	8001ee2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ee0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	691a      	ldr	r2, [r3, #16]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eec:	b2d2      	uxtb	r2, r2
 8001eee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef4:	1c5a      	adds	r2, r3, #1
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	3b01      	subs	r3, #1
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001f08:	e095      	b.n	8002036 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d17d      	bne.n	8002010 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d002      	beq.n	8001f20 <I2C_MasterReceive_BTF+0xc4>
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2b10      	cmp	r3, #16
 8001f1e:	d108      	bne.n	8001f32 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	e016      	b.n	8001f60 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2b04      	cmp	r3, #4
 8001f36:	d002      	beq.n	8001f3e <I2C_MasterReceive_BTF+0xe2>
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d108      	bne.n	8001f50 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	e007      	b.n	8001f60 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f5e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	691a      	ldr	r2, [r3, #16]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f6a:	b2d2      	uxtb	r2, r2
 8001f6c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f72:	1c5a      	adds	r2, r3, #1
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	691a      	ldr	r2, [r3, #16]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f90:	b2d2      	uxtb	r2, r2
 8001f92:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f98:	1c5a      	adds	r2, r3, #1
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	685a      	ldr	r2, [r3, #4]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8001fba:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2220      	movs	r2, #32
 8001fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b40      	cmp	r3, #64	@ 0x40
 8001fce:	d10a      	bne.n	8001fe6 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7ff fcac 	bl	800193c <HAL_I2C_MemRxCpltCallback>
}
 8001fe4:	e027      	b.n	8002036 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2b08      	cmp	r3, #8
 8001ff2:	d002      	beq.n	8001ffa <I2C_MasterReceive_BTF+0x19e>
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2b20      	cmp	r3, #32
 8001ff8:	d103      	bne.n	8002002 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	631a      	str	r2, [r3, #48]	@ 0x30
 8002000:	e002      	b.n	8002008 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2212      	movs	r2, #18
 8002006:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7ff fc57 	bl	80018bc <HAL_I2C_MasterRxCpltCallback>
}
 800200e:	e012      	b.n	8002036 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	691a      	ldr	r2, [r3, #16]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800201a:	b2d2      	uxtb	r2, r2
 800201c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002022:	1c5a      	adds	r2, r3, #1
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800202c:	b29b      	uxth	r3, r3
 800202e:	3b01      	subs	r3, #1
 8002030:	b29a      	uxth	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002036:	bf00      	nop
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b40      	cmp	r3, #64	@ 0x40
 8002050:	d117      	bne.n	8002082 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002056:	2b00      	cmp	r3, #0
 8002058:	d109      	bne.n	800206e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800205e:	b2db      	uxtb	r3, r3
 8002060:	461a      	mov	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800206a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800206c:	e067      	b.n	800213e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002072:	b2db      	uxtb	r3, r3
 8002074:	f043 0301 	orr.w	r3, r3, #1
 8002078:	b2da      	uxtb	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	611a      	str	r2, [r3, #16]
}
 8002080:	e05d      	b.n	800213e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800208a:	d133      	bne.n	80020f4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b21      	cmp	r3, #33	@ 0x21
 8002096:	d109      	bne.n	80020ac <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800209c:	b2db      	uxtb	r3, r3
 800209e:	461a      	mov	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80020a8:	611a      	str	r2, [r3, #16]
 80020aa:	e008      	b.n	80020be <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	f043 0301 	orr.w	r3, r3, #1
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d004      	beq.n	80020d0 <I2C_Master_SB+0x92>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d108      	bne.n	80020e2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d032      	beq.n	800213e <I2C_Master_SB+0x100>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d02d      	beq.n	800213e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	685a      	ldr	r2, [r3, #4]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80020f0:	605a      	str	r2, [r3, #4]
}
 80020f2:	e024      	b.n	800213e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d10e      	bne.n	800211a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002100:	b29b      	uxth	r3, r3
 8002102:	11db      	asrs	r3, r3, #7
 8002104:	b2db      	uxtb	r3, r3
 8002106:	f003 0306 	and.w	r3, r3, #6
 800210a:	b2db      	uxtb	r3, r3
 800210c:	f063 030f 	orn	r3, r3, #15
 8002110:	b2da      	uxtb	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	611a      	str	r2, [r3, #16]
}
 8002118:	e011      	b.n	800213e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800211e:	2b01      	cmp	r3, #1
 8002120:	d10d      	bne.n	800213e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002126:	b29b      	uxth	r3, r3
 8002128:	11db      	asrs	r3, r3, #7
 800212a:	b2db      	uxtb	r3, r3
 800212c:	f003 0306 	and.w	r3, r3, #6
 8002130:	b2db      	uxtb	r3, r3
 8002132:	f063 030e 	orn	r3, r3, #14
 8002136:	b2da      	uxtb	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	611a      	str	r2, [r3, #16]
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002156:	b2da      	uxtb	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002162:	2b00      	cmp	r3, #0
 8002164:	d004      	beq.n	8002170 <I2C_Master_ADD10+0x26>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800216a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800216c:	2b00      	cmp	r3, #0
 800216e:	d108      	bne.n	8002182 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00c      	beq.n	8002192 <I2C_Master_ADD10+0x48>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800217c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800217e:	2b00      	cmp	r3, #0
 8002180:	d007      	beq.n	8002192 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002190:	605a      	str	r2, [r3, #4]
  }
}
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800219e:	b480      	push	{r7}
 80021a0:	b091      	sub	sp, #68	@ 0x44
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80021ac:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ba:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	2b22      	cmp	r3, #34	@ 0x22
 80021c6:	f040 8169 	bne.w	800249c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10f      	bne.n	80021f2 <I2C_Master_ADDR+0x54>
 80021d2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80021d6:	2b40      	cmp	r3, #64	@ 0x40
 80021d8:	d10b      	bne.n	80021f2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021da:	2300      	movs	r3, #0
 80021dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80021ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021f0:	e160      	b.n	80024b4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d11d      	bne.n	8002236 <I2C_Master_ADDR+0x98>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002202:	d118      	bne.n	8002236 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002204:	2300      	movs	r3, #0
 8002206:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002228:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800222e:	1c5a      	adds	r2, r3, #1
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	651a      	str	r2, [r3, #80]	@ 0x50
 8002234:	e13e      	b.n	80024b4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800223a:	b29b      	uxth	r3, r3
 800223c:	2b00      	cmp	r3, #0
 800223e:	d113      	bne.n	8002268 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002240:	2300      	movs	r3, #0
 8002242:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002254:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	e115      	b.n	8002494 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800226c:	b29b      	uxth	r3, r3
 800226e:	2b01      	cmp	r3, #1
 8002270:	f040 808a 	bne.w	8002388 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002276:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800227a:	d137      	bne.n	80022ec <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800228a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002296:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800229a:	d113      	bne.n	80022c4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022aa:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ac:	2300      	movs	r3, #0
 80022ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	627b      	str	r3, [r7, #36]	@ 0x24
 80022c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c2:	e0e7      	b.n	8002494 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022c4:	2300      	movs	r3, #0
 80022c6:	623b      	str	r3, [r7, #32]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	623b      	str	r3, [r7, #32]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	623b      	str	r3, [r7, #32]
 80022d8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	e0d3      	b.n	8002494 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80022ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022ee:	2b08      	cmp	r3, #8
 80022f0:	d02e      	beq.n	8002350 <I2C_Master_ADDR+0x1b2>
 80022f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022f4:	2b20      	cmp	r3, #32
 80022f6:	d02b      	beq.n	8002350 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80022f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022fa:	2b12      	cmp	r3, #18
 80022fc:	d102      	bne.n	8002304 <I2C_Master_ADDR+0x166>
 80022fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002300:	2b01      	cmp	r3, #1
 8002302:	d125      	bne.n	8002350 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002306:	2b04      	cmp	r3, #4
 8002308:	d00e      	beq.n	8002328 <I2C_Master_ADDR+0x18a>
 800230a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800230c:	2b02      	cmp	r3, #2
 800230e:	d00b      	beq.n	8002328 <I2C_Master_ADDR+0x18a>
 8002310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002312:	2b10      	cmp	r3, #16
 8002314:	d008      	beq.n	8002328 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	e007      	b.n	8002338 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002336:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002338:	2300      	movs	r3, #0
 800233a:	61fb      	str	r3, [r7, #28]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	61fb      	str	r3, [r7, #28]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	61fb      	str	r3, [r7, #28]
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	e0a1      	b.n	8002494 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800235e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002360:	2300      	movs	r3, #0
 8002362:	61bb      	str	r3, [r7, #24]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	61bb      	str	r3, [r7, #24]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	61bb      	str	r3, [r7, #24]
 8002374:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	e085      	b.n	8002494 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800238c:	b29b      	uxth	r3, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d14d      	bne.n	800242e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002394:	2b04      	cmp	r3, #4
 8002396:	d016      	beq.n	80023c6 <I2C_Master_ADDR+0x228>
 8002398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800239a:	2b02      	cmp	r3, #2
 800239c:	d013      	beq.n	80023c6 <I2C_Master_ADDR+0x228>
 800239e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023a0:	2b10      	cmp	r3, #16
 80023a2:	d010      	beq.n	80023c6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023b2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	e007      	b.n	80023d6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80023d4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80023e4:	d117      	bne.n	8002416 <I2C_Master_ADDR+0x278>
 80023e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023e8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80023ec:	d00b      	beq.n	8002406 <I2C_Master_ADDR+0x268>
 80023ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d008      	beq.n	8002406 <I2C_Master_ADDR+0x268>
 80023f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023f6:	2b08      	cmp	r3, #8
 80023f8:	d005      	beq.n	8002406 <I2C_Master_ADDR+0x268>
 80023fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023fc:	2b10      	cmp	r3, #16
 80023fe:	d002      	beq.n	8002406 <I2C_Master_ADDR+0x268>
 8002400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002402:	2b20      	cmp	r3, #32
 8002404:	d107      	bne.n	8002416 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	685a      	ldr	r2, [r3, #4]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002414:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002416:	2300      	movs	r3, #0
 8002418:	617b      	str	r3, [r7, #20]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	695b      	ldr	r3, [r3, #20]
 8002420:	617b      	str	r3, [r7, #20]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	617b      	str	r3, [r7, #20]
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	e032      	b.n	8002494 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800243c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002448:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800244c:	d117      	bne.n	800247e <I2C_Master_ADDR+0x2e0>
 800244e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002450:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002454:	d00b      	beq.n	800246e <I2C_Master_ADDR+0x2d0>
 8002456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002458:	2b01      	cmp	r3, #1
 800245a:	d008      	beq.n	800246e <I2C_Master_ADDR+0x2d0>
 800245c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800245e:	2b08      	cmp	r3, #8
 8002460:	d005      	beq.n	800246e <I2C_Master_ADDR+0x2d0>
 8002462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002464:	2b10      	cmp	r3, #16
 8002466:	d002      	beq.n	800246e <I2C_Master_ADDR+0x2d0>
 8002468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800246a:	2b20      	cmp	r3, #32
 800246c:	d107      	bne.n	800247e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	685a      	ldr	r2, [r3, #4]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800247c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800247e:	2300      	movs	r3, #0
 8002480:	613b      	str	r3, [r7, #16]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	695b      	ldr	r3, [r3, #20]
 8002488:	613b      	str	r3, [r7, #16]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	613b      	str	r3, [r7, #16]
 8002492:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800249a:	e00b      	b.n	80024b4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800249c:	2300      	movs	r3, #0
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	68fb      	ldr	r3, [r7, #12]
}
 80024b2:	e7ff      	b.n	80024b4 <I2C_Master_ADDR+0x316>
 80024b4:	bf00      	nop
 80024b6:	3744      	adds	r7, #68	@ 0x44
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024ce:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d02b      	beq.n	8002532 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024de:	781a      	ldrb	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ea:	1c5a      	adds	r2, r3, #1
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	3b01      	subs	r3, #1
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002502:	b29b      	uxth	r3, r3
 8002504:	2b00      	cmp	r3, #0
 8002506:	d114      	bne.n	8002532 <I2C_SlaveTransmit_TXE+0x72>
 8002508:	7bfb      	ldrb	r3, [r7, #15]
 800250a:	2b29      	cmp	r3, #41	@ 0x29
 800250c:	d111      	bne.n	8002532 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	685a      	ldr	r2, [r3, #4]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800251c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2221      	movs	r2, #33	@ 0x21
 8002522:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2228      	movs	r2, #40	@ 0x28
 8002528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f7ff f9cf 	bl	80018d0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002532:	bf00      	nop
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800253a:	b480      	push	{r7}
 800253c:	b083      	sub	sp, #12
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002546:	b29b      	uxth	r3, r3
 8002548:	2b00      	cmp	r3, #0
 800254a:	d011      	beq.n	8002570 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002550:	781a      	ldrb	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800255c:	1c5a      	adds	r2, r3, #1
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002566:	b29b      	uxth	r3, r3
 8002568:	3b01      	subs	r3, #1
 800256a:	b29a      	uxth	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800258a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002590:	b29b      	uxth	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d02c      	beq.n	80025f0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	691a      	ldr	r2, [r3, #16]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a0:	b2d2      	uxtb	r2, r2
 80025a2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a8:	1c5a      	adds	r2, r3, #1
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	3b01      	subs	r3, #1
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d114      	bne.n	80025f0 <I2C_SlaveReceive_RXNE+0x74>
 80025c6:	7bfb      	ldrb	r3, [r7, #15]
 80025c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80025ca:	d111      	bne.n	80025f0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025da:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2222      	movs	r2, #34	@ 0x22
 80025e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2228      	movs	r2, #40	@ 0x28
 80025e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f7ff f97a 	bl	80018e4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80025f0:	bf00      	nop
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002604:	b29b      	uxth	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d012      	beq.n	8002630 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	691a      	ldr	r2, [r3, #16]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261c:	1c5a      	adds	r2, r3, #1
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002626:	b29b      	uxth	r3, r3
 8002628:	3b01      	subs	r3, #1
 800262a:	b29a      	uxth	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002646:	2300      	movs	r3, #0
 8002648:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002650:	b2db      	uxtb	r3, r3
 8002652:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002656:	2b28      	cmp	r3, #40	@ 0x28
 8002658:	d127      	bne.n	80026aa <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002668:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	089b      	lsrs	r3, r3, #2
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002676:	2301      	movs	r3, #1
 8002678:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	09db      	lsrs	r3, r3, #7
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b00      	cmp	r3, #0
 8002684:	d103      	bne.n	800268e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	81bb      	strh	r3, [r7, #12]
 800268c:	e002      	b.n	8002694 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800269c:	89ba      	ldrh	r2, [r7, #12]
 800269e:	7bfb      	ldrb	r3, [r7, #15]
 80026a0:	4619      	mov	r1, r3
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7ff f928 	bl	80018f8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80026a8:	e00e      	b.n	80026c8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026aa:	2300      	movs	r3, #0
 80026ac:	60bb      	str	r3, [r7, #8]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	695b      	ldr	r3, [r3, #20]
 80026b4:	60bb      	str	r3, [r7, #8]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	60bb      	str	r3, [r7, #8]
 80026be:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80026c8:	bf00      	nop
 80026ca:	3710      	adds	r7, #16
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026de:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	685a      	ldr	r2, [r3, #4]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80026ee:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80026f0:	2300      	movs	r3, #0
 80026f2:	60bb      	str	r3, [r7, #8]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	60bb      	str	r3, [r7, #8]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f042 0201 	orr.w	r2, r2, #1
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800271c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002728:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800272c:	d172      	bne.n	8002814 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800272e:	7bfb      	ldrb	r3, [r7, #15]
 8002730:	2b22      	cmp	r3, #34	@ 0x22
 8002732:	d002      	beq.n	800273a <I2C_Slave_STOPF+0x6a>
 8002734:	7bfb      	ldrb	r3, [r7, #15]
 8002736:	2b2a      	cmp	r3, #42	@ 0x2a
 8002738:	d135      	bne.n	80027a6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	b29a      	uxth	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800274c:	b29b      	uxth	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d005      	beq.n	800275e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002756:	f043 0204 	orr.w	r2, r3, #4
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800276c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002772:	4618      	mov	r0, r3
 8002774:	f7fe fa89 	bl	8000c8a <HAL_DMA_GetState>
 8002778:	4603      	mov	r3, r0
 800277a:	2b01      	cmp	r3, #1
 800277c:	d049      	beq.n	8002812 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002782:	4a69      	ldr	r2, [pc, #420]	@ (8002928 <I2C_Slave_STOPF+0x258>)
 8002784:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800278a:	4618      	mov	r0, r3
 800278c:	f7fe fa5b 	bl	8000c46 <HAL_DMA_Abort_IT>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d03d      	beq.n	8002812 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800279a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80027a0:	4610      	mov	r0, r2
 80027a2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80027a4:	e035      	b.n	8002812 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d005      	beq.n	80027ca <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c2:	f043 0204 	orr.w	r2, r3, #4
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	685a      	ldr	r2, [r3, #4]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027d8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027de:	4618      	mov	r0, r3
 80027e0:	f7fe fa53 	bl	8000c8a <HAL_DMA_GetState>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d014      	beq.n	8002814 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027ee:	4a4e      	ldr	r2, [pc, #312]	@ (8002928 <I2C_Slave_STOPF+0x258>)
 80027f0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7fe fa25 	bl	8000c46 <HAL_DMA_Abort_IT>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d008      	beq.n	8002814 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002806:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800280c:	4610      	mov	r0, r2
 800280e:	4798      	blx	r3
 8002810:	e000      	b.n	8002814 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002812:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002818:	b29b      	uxth	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d03e      	beq.n	800289c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	2b04      	cmp	r3, #4
 800282a:	d112      	bne.n	8002852 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	691a      	ldr	r2, [r3, #16]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800283e:	1c5a      	adds	r2, r3, #1
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002848:	b29b      	uxth	r3, r3
 800284a:	3b01      	subs	r3, #1
 800284c:	b29a      	uxth	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800285c:	2b40      	cmp	r3, #64	@ 0x40
 800285e:	d112      	bne.n	8002886 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	691a      	ldr	r2, [r3, #16]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286a:	b2d2      	uxtb	r2, r2
 800286c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002872:	1c5a      	adds	r2, r3, #1
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800287c:	b29b      	uxth	r3, r3
 800287e:	3b01      	subs	r3, #1
 8002880:	b29a      	uxth	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800288a:	b29b      	uxth	r3, r3
 800288c:	2b00      	cmp	r3, #0
 800288e:	d005      	beq.n	800289c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002894:	f043 0204 	orr.w	r2, r3, #4
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d003      	beq.n	80028ac <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 f8b7 	bl	8002a18 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80028aa:	e039      	b.n	8002920 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80028ac:	7bfb      	ldrb	r3, [r7, #15]
 80028ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80028b0:	d109      	bne.n	80028c6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2228      	movs	r2, #40	@ 0x28
 80028bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f7ff f80f 	bl	80018e4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b28      	cmp	r3, #40	@ 0x28
 80028d0:	d111      	bne.n	80028f6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a15      	ldr	r2, [pc, #84]	@ (800292c <I2C_Slave_STOPF+0x25c>)
 80028d6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2220      	movs	r2, #32
 80028e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7ff f810 	bl	8001914 <HAL_I2C_ListenCpltCallback>
}
 80028f4:	e014      	b.n	8002920 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fa:	2b22      	cmp	r3, #34	@ 0x22
 80028fc:	d002      	beq.n	8002904 <I2C_Slave_STOPF+0x234>
 80028fe:	7bfb      	ldrb	r3, [r7, #15]
 8002900:	2b22      	cmp	r3, #34	@ 0x22
 8002902:	d10d      	bne.n	8002920 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2220      	movs	r2, #32
 800290e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7fe ffe2 	bl	80018e4 <HAL_I2C_SlaveRxCpltCallback>
}
 8002920:	bf00      	nop
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	08002da9 	.word	0x08002da9
 800292c:	ffff0000 	.word	0xffff0000

08002930 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800293e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002944:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	2b08      	cmp	r3, #8
 800294a:	d002      	beq.n	8002952 <I2C_Slave_AF+0x22>
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	2b20      	cmp	r3, #32
 8002950:	d129      	bne.n	80029a6 <I2C_Slave_AF+0x76>
 8002952:	7bfb      	ldrb	r3, [r7, #15]
 8002954:	2b28      	cmp	r3, #40	@ 0x28
 8002956:	d126      	bne.n	80029a6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a2e      	ldr	r2, [pc, #184]	@ (8002a14 <I2C_Slave_AF+0xe4>)
 800295c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800296c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002976:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002986:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2220      	movs	r2, #32
 8002992:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f7fe ffb8 	bl	8001914 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80029a4:	e031      	b.n	8002a0a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80029a6:	7bfb      	ldrb	r3, [r7, #15]
 80029a8:	2b21      	cmp	r3, #33	@ 0x21
 80029aa:	d129      	bne.n	8002a00 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a19      	ldr	r2, [pc, #100]	@ (8002a14 <I2C_Slave_AF+0xe4>)
 80029b0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2221      	movs	r2, #33	@ 0x21
 80029b6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2220      	movs	r2, #32
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80029d6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80029e0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029f0:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f7fe fc30 	bl	8001258 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f7fe ff69 	bl	80018d0 <HAL_I2C_SlaveTxCpltCallback>
}
 80029fe:	e004      	b.n	8002a0a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a08:	615a      	str	r2, [r3, #20]
}
 8002a0a:	bf00      	nop
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	ffff0000 	.word	0xffff0000

08002a18 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a26:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a2e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002a30:	7bbb      	ldrb	r3, [r7, #14]
 8002a32:	2b10      	cmp	r3, #16
 8002a34:	d002      	beq.n	8002a3c <I2C_ITError+0x24>
 8002a36:	7bbb      	ldrb	r3, [r7, #14]
 8002a38:	2b40      	cmp	r3, #64	@ 0x40
 8002a3a:	d10a      	bne.n	8002a52 <I2C_ITError+0x3a>
 8002a3c:	7bfb      	ldrb	r3, [r7, #15]
 8002a3e:	2b22      	cmp	r3, #34	@ 0x22
 8002a40:	d107      	bne.n	8002a52 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a50:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002a52:	7bfb      	ldrb	r3, [r7, #15]
 8002a54:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002a58:	2b28      	cmp	r3, #40	@ 0x28
 8002a5a:	d107      	bne.n	8002a6c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2228      	movs	r2, #40	@ 0x28
 8002a66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002a6a:	e015      	b.n	8002a98 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a7a:	d00a      	beq.n	8002a92 <I2C_ITError+0x7a>
 8002a7c:	7bfb      	ldrb	r3, [r7, #15]
 8002a7e:	2b60      	cmp	r3, #96	@ 0x60
 8002a80:	d007      	beq.n	8002a92 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2220      	movs	r2, #32
 8002a86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002aa2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002aa6:	d162      	bne.n	8002b6e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ab6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002abc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d020      	beq.n	8002b08 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aca:	4a6a      	ldr	r2, [pc, #424]	@ (8002c74 <I2C_ITError+0x25c>)
 8002acc:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7fe f8b7 	bl	8000c46 <HAL_DMA_Abort_IT>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f000 8089 	beq.w	8002bf2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 0201 	bic.w	r2, r2, #1
 8002aee:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2220      	movs	r2, #32
 8002af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002afc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002b02:	4610      	mov	r0, r2
 8002b04:	4798      	blx	r3
 8002b06:	e074      	b.n	8002bf2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b0c:	4a59      	ldr	r2, [pc, #356]	@ (8002c74 <I2C_ITError+0x25c>)
 8002b0e:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7fe f896 	bl	8000c46 <HAL_DMA_Abort_IT>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d068      	beq.n	8002bf2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b2a:	2b40      	cmp	r3, #64	@ 0x40
 8002b2c:	d10b      	bne.n	8002b46 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	691a      	ldr	r2, [r3, #16]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b38:	b2d2      	uxtb	r2, r2
 8002b3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b40:	1c5a      	adds	r2, r3, #1
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 0201 	bic.w	r2, r2, #1
 8002b54:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2220      	movs	r2, #32
 8002b5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002b68:	4610      	mov	r0, r2
 8002b6a:	4798      	blx	r3
 8002b6c:	e041      	b.n	8002bf2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b60      	cmp	r3, #96	@ 0x60
 8002b78:	d125      	bne.n	8002bc6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2220      	movs	r2, #32
 8002b7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b92:	2b40      	cmp	r3, #64	@ 0x40
 8002b94:	d10b      	bne.n	8002bae <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	691a      	ldr	r2, [r3, #16]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba8:	1c5a      	adds	r2, r3, #1
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 0201 	bic.w	r2, r2, #1
 8002bbc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7fe fed0 	bl	8001964 <HAL_I2C_AbortCpltCallback>
 8002bc4:	e015      	b.n	8002bf2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	695b      	ldr	r3, [r3, #20]
 8002bcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bd0:	2b40      	cmp	r3, #64	@ 0x40
 8002bd2:	d10b      	bne.n	8002bec <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	691a      	ldr	r2, [r3, #16]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bde:	b2d2      	uxtb	r2, r2
 8002be0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be6:	1c5a      	adds	r2, r3, #1
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f7fe feaf 	bl	8001950 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10e      	bne.n	8002c20 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d109      	bne.n	8002c20 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d104      	bne.n	8002c20 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d007      	beq.n	8002c30 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	685a      	ldr	r2, [r3, #4]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002c2e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c36:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3c:	f003 0304 	and.w	r3, r3, #4
 8002c40:	2b04      	cmp	r3, #4
 8002c42:	d113      	bne.n	8002c6c <I2C_ITError+0x254>
 8002c44:	7bfb      	ldrb	r3, [r7, #15]
 8002c46:	2b28      	cmp	r3, #40	@ 0x28
 8002c48:	d110      	bne.n	8002c6c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a0a      	ldr	r2, [pc, #40]	@ (8002c78 <I2C_ITError+0x260>)
 8002c4e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2220      	movs	r2, #32
 8002c5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f7fe fe54 	bl	8001914 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002c6c:	bf00      	nop
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	08002da9 	.word	0x08002da9
 8002c78:	ffff0000 	.word	0xffff0000

08002c7c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b088      	sub	sp, #32
 8002c80:	af02      	add	r7, sp, #8
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	4608      	mov	r0, r1
 8002c86:	4611      	mov	r1, r2
 8002c88:	461a      	mov	r2, r3
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	817b      	strh	r3, [r7, #10]
 8002c8e:	460b      	mov	r3, r1
 8002c90:	813b      	strh	r3, [r7, #8]
 8002c92:	4613      	mov	r3, r2
 8002c94:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ca4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca8:	9300      	str	r3, [sp, #0]
 8002caa:	6a3b      	ldr	r3, [r7, #32]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	f000 f920 	bl	8002ef8 <I2C_WaitOnFlagUntilTimeout>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00d      	beq.n	8002cda <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ccc:	d103      	bne.n	8002cd6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cd4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e05f      	b.n	8002d9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cda:	897b      	ldrh	r3, [r7, #10]
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	461a      	mov	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ce8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cec:	6a3a      	ldr	r2, [r7, #32]
 8002cee:	492d      	ldr	r1, [pc, #180]	@ (8002da4 <I2C_RequestMemoryWrite+0x128>)
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f000 f97b 	bl	8002fec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e04c      	b.n	8002d9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d00:	2300      	movs	r3, #0
 8002d02:	617b      	str	r3, [r7, #20]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	617b      	str	r3, [r7, #20]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	617b      	str	r3, [r7, #20]
 8002d14:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d18:	6a39      	ldr	r1, [r7, #32]
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f000 fa06 	bl	800312c <I2C_WaitOnTXEFlagUntilTimeout>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00d      	beq.n	8002d42 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	d107      	bne.n	8002d3e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d3c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e02b      	b.n	8002d9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d42:	88fb      	ldrh	r3, [r7, #6]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d105      	bne.n	8002d54 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d48:	893b      	ldrh	r3, [r7, #8]
 8002d4a:	b2da      	uxtb	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	611a      	str	r2, [r3, #16]
 8002d52:	e021      	b.n	8002d98 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d54:	893b      	ldrh	r3, [r7, #8]
 8002d56:	0a1b      	lsrs	r3, r3, #8
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	b2da      	uxtb	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d64:	6a39      	ldr	r1, [r7, #32]
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f000 f9e0 	bl	800312c <I2C_WaitOnTXEFlagUntilTimeout>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00d      	beq.n	8002d8e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d76:	2b04      	cmp	r3, #4
 8002d78:	d107      	bne.n	8002d8a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d88:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e005      	b.n	8002d9a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d8e:	893b      	ldrh	r3, [r7, #8]
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3718      	adds	r7, #24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	00010002 	.word	0x00010002

08002da8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002db0:	2300      	movs	r3, #0
 8002db2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002db8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dc0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002dc2:	4b4b      	ldr	r3, [pc, #300]	@ (8002ef0 <I2C_DMAAbort+0x148>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	08db      	lsrs	r3, r3, #3
 8002dc8:	4a4a      	ldr	r2, [pc, #296]	@ (8002ef4 <I2C_DMAAbort+0x14c>)
 8002dca:	fba2 2303 	umull	r2, r3, r2, r3
 8002dce:	0a1a      	lsrs	r2, r3, #8
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4413      	add	r3, r2
 8002dd6:	00da      	lsls	r2, r3, #3
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d106      	bne.n	8002df0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de6:	f043 0220 	orr.w	r2, r3, #32
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8002dee:	e00a      	b.n	8002e06 <I2C_DMAAbort+0x5e>
    }
    count--;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	3b01      	subs	r3, #1
 8002df4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e04:	d0ea      	beq.n	8002ddc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e12:	2200      	movs	r2, #0
 8002e14:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e22:	2200      	movs	r2, #0
 8002e24:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e34:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d003      	beq.n	8002e4c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e48:	2200      	movs	r2, #0
 8002e4a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d003      	beq.n	8002e5c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e58:	2200      	movs	r2, #0
 8002e5a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 0201 	bic.w	r2, r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b60      	cmp	r3, #96	@ 0x60
 8002e76:	d10e      	bne.n	8002e96 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002e8e:	6978      	ldr	r0, [r7, #20]
 8002e90:	f7fe fd68 	bl	8001964 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002e94:	e027      	b.n	8002ee6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e96:	7cfb      	ldrb	r3, [r7, #19]
 8002e98:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002e9c:	2b28      	cmp	r3, #40	@ 0x28
 8002e9e:	d117      	bne.n	8002ed0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f042 0201 	orr.w	r2, r2, #1
 8002eae:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ebe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	2228      	movs	r2, #40	@ 0x28
 8002eca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002ece:	e007      	b.n	8002ee0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	2220      	movs	r2, #32
 8002ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002ee0:	6978      	ldr	r0, [r7, #20]
 8002ee2:	f7fe fd35 	bl	8001950 <HAL_I2C_ErrorCallback>
}
 8002ee6:	bf00      	nop
 8002ee8:	3718      	adds	r7, #24
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	20000000 	.word	0x20000000
 8002ef4:	14f8b589 	.word	0x14f8b589

08002ef8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	603b      	str	r3, [r7, #0]
 8002f04:	4613      	mov	r3, r2
 8002f06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f08:	e048      	b.n	8002f9c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f10:	d044      	beq.n	8002f9c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f12:	f7fd fd57 	bl	80009c4 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d302      	bcc.n	8002f28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d139      	bne.n	8002f9c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	0c1b      	lsrs	r3, r3, #16
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d10d      	bne.n	8002f4e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	43da      	mvns	r2, r3
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	bf0c      	ite	eq
 8002f44:	2301      	moveq	r3, #1
 8002f46:	2300      	movne	r3, #0
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	e00c      	b.n	8002f68 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	43da      	mvns	r2, r3
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	bf0c      	ite	eq
 8002f60:	2301      	moveq	r3, #1
 8002f62:	2300      	movne	r3, #0
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	461a      	mov	r2, r3
 8002f68:	79fb      	ldrb	r3, [r7, #7]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d116      	bne.n	8002f9c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2220      	movs	r2, #32
 8002f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f88:	f043 0220 	orr.w	r2, r3, #32
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e023      	b.n	8002fe4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	0c1b      	lsrs	r3, r3, #16
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d10d      	bne.n	8002fc2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	43da      	mvns	r2, r3
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	bf0c      	ite	eq
 8002fb8:	2301      	moveq	r3, #1
 8002fba:	2300      	movne	r3, #0
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	e00c      	b.n	8002fdc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	43da      	mvns	r2, r3
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	bf0c      	ite	eq
 8002fd4:	2301      	moveq	r3, #1
 8002fd6:	2300      	movne	r3, #0
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	461a      	mov	r2, r3
 8002fdc:	79fb      	ldrb	r3, [r7, #7]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d093      	beq.n	8002f0a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
 8002ff8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ffa:	e071      	b.n	80030e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003006:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800300a:	d123      	bne.n	8003054 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800301a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003024:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2220      	movs	r2, #32
 8003030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003040:	f043 0204 	orr.w	r2, r3, #4
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e067      	b.n	8003124 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800305a:	d041      	beq.n	80030e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800305c:	f7fd fcb2 	bl	80009c4 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	429a      	cmp	r2, r3
 800306a:	d302      	bcc.n	8003072 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d136      	bne.n	80030e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	0c1b      	lsrs	r3, r3, #16
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2b01      	cmp	r3, #1
 800307a:	d10c      	bne.n	8003096 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	43da      	mvns	r2, r3
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	4013      	ands	r3, r2
 8003088:	b29b      	uxth	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	bf14      	ite	ne
 800308e:	2301      	movne	r3, #1
 8003090:	2300      	moveq	r3, #0
 8003092:	b2db      	uxtb	r3, r3
 8003094:	e00b      	b.n	80030ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	43da      	mvns	r2, r3
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	4013      	ands	r3, r2
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	bf14      	ite	ne
 80030a8:	2301      	movne	r3, #1
 80030aa:	2300      	moveq	r3, #0
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d016      	beq.n	80030e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2220      	movs	r2, #32
 80030bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030cc:	f043 0220 	orr.w	r2, r3, #32
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e021      	b.n	8003124 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	0c1b      	lsrs	r3, r3, #16
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d10c      	bne.n	8003104 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	43da      	mvns	r2, r3
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	4013      	ands	r3, r2
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	bf14      	ite	ne
 80030fc:	2301      	movne	r3, #1
 80030fe:	2300      	moveq	r3, #0
 8003100:	b2db      	uxtb	r3, r3
 8003102:	e00b      	b.n	800311c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	43da      	mvns	r2, r3
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	4013      	ands	r3, r2
 8003110:	b29b      	uxth	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	bf14      	ite	ne
 8003116:	2301      	movne	r3, #1
 8003118:	2300      	moveq	r3, #0
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2b00      	cmp	r3, #0
 800311e:	f47f af6d 	bne.w	8002ffc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003138:	e034      	b.n	80031a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 f8b8 	bl	80032b0 <I2C_IsAcknowledgeFailed>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e034      	b.n	80031b4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003150:	d028      	beq.n	80031a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003152:	f7fd fc37 	bl	80009c4 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	68ba      	ldr	r2, [r7, #8]
 800315e:	429a      	cmp	r2, r3
 8003160:	d302      	bcc.n	8003168 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d11d      	bne.n	80031a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003172:	2b80      	cmp	r3, #128	@ 0x80
 8003174:	d016      	beq.n	80031a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2220      	movs	r2, #32
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003190:	f043 0220 	orr.w	r2, r3, #32
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e007      	b.n	80031b4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031ae:	2b80      	cmp	r3, #128	@ 0x80
 80031b0:	d1c3      	bne.n	800313a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3710      	adds	r7, #16
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031c8:	e034      	b.n	8003234 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f000 f870 	bl	80032b0 <I2C_IsAcknowledgeFailed>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e034      	b.n	8003244 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80031e0:	d028      	beq.n	8003234 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031e2:	f7fd fbef 	bl	80009c4 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	68ba      	ldr	r2, [r7, #8]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d302      	bcc.n	80031f8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d11d      	bne.n	8003234 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	f003 0304 	and.w	r3, r3, #4
 8003202:	2b04      	cmp	r3, #4
 8003204:	d016      	beq.n	8003234 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2220      	movs	r2, #32
 8003210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003220:	f043 0220 	orr.w	r2, r3, #32
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e007      	b.n	8003244 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	f003 0304 	and.w	r3, r3, #4
 800323e:	2b04      	cmp	r3, #4
 8003240:	d1c3      	bne.n	80031ca <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003254:	2300      	movs	r3, #0
 8003256:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003258:	4b13      	ldr	r3, [pc, #76]	@ (80032a8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	08db      	lsrs	r3, r3, #3
 800325e:	4a13      	ldr	r2, [pc, #76]	@ (80032ac <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003260:	fba2 2303 	umull	r2, r3, r2, r3
 8003264:	0a1a      	lsrs	r2, r3, #8
 8003266:	4613      	mov	r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4413      	add	r3, r2
 800326c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	3b01      	subs	r3, #1
 8003272:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d107      	bne.n	800328a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327e:	f043 0220 	orr.w	r2, r3, #32
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e008      	b.n	800329c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003294:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003298:	d0e9      	beq.n	800326e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3714      	adds	r7, #20
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr
 80032a8:	20000000 	.word	0x20000000
 80032ac:	14f8b589 	.word	0x14f8b589

080032b0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032c6:	d11b      	bne.n	8003300 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80032d0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2220      	movs	r2, #32
 80032dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ec:	f043 0204 	orr.w	r2, r3, #4
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e000      	b.n	8003302 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800330e:	b480      	push	{r7}
 8003310:	b083      	sub	sp, #12
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800331a:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800331e:	d103      	bne.n	8003328 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003326:	e007      	b.n	8003338 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800332c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003330:	d102      	bne.n	8003338 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2208      	movs	r2, #8
 8003336:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e0cc      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003358:	4b68      	ldr	r3, [pc, #416]	@ (80034fc <HAL_RCC_ClockConfig+0x1b8>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 030f 	and.w	r3, r3, #15
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	429a      	cmp	r2, r3
 8003364:	d90c      	bls.n	8003380 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003366:	4b65      	ldr	r3, [pc, #404]	@ (80034fc <HAL_RCC_ClockConfig+0x1b8>)
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	b2d2      	uxtb	r2, r2
 800336c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800336e:	4b63      	ldr	r3, [pc, #396]	@ (80034fc <HAL_RCC_ClockConfig+0x1b8>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	429a      	cmp	r2, r3
 800337a:	d001      	beq.n	8003380 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e0b8      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d020      	beq.n	80033ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b00      	cmp	r3, #0
 8003396:	d005      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003398:	4b59      	ldr	r3, [pc, #356]	@ (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	4a58      	ldr	r2, [pc, #352]	@ (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 800339e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80033a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0308 	and.w	r3, r3, #8
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d005      	beq.n	80033bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033b0:	4b53      	ldr	r3, [pc, #332]	@ (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	4a52      	ldr	r2, [pc, #328]	@ (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 80033b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80033ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033bc:	4b50      	ldr	r3, [pc, #320]	@ (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	494d      	ldr	r1, [pc, #308]	@ (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d044      	beq.n	8003464 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d107      	bne.n	80033f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033e2:	4b47      	ldr	r3, [pc, #284]	@ (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d119      	bne.n	8003422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e07f      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d003      	beq.n	8003402 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033fe:	2b03      	cmp	r3, #3
 8003400:	d107      	bne.n	8003412 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003402:	4b3f      	ldr	r3, [pc, #252]	@ (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d109      	bne.n	8003422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e06f      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003412:	4b3b      	ldr	r3, [pc, #236]	@ (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e067      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003422:	4b37      	ldr	r3, [pc, #220]	@ (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f023 0203 	bic.w	r2, r3, #3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	4934      	ldr	r1, [pc, #208]	@ (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 8003430:	4313      	orrs	r3, r2
 8003432:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003434:	f7fd fac6 	bl	80009c4 <HAL_GetTick>
 8003438:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800343a:	e00a      	b.n	8003452 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800343c:	f7fd fac2 	bl	80009c4 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	f241 3288 	movw	r2, #5000	@ 0x1388
 800344a:	4293      	cmp	r3, r2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e04f      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003452:	4b2b      	ldr	r3, [pc, #172]	@ (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 020c 	and.w	r2, r3, #12
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	429a      	cmp	r2, r3
 8003462:	d1eb      	bne.n	800343c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003464:	4b25      	ldr	r3, [pc, #148]	@ (80034fc <HAL_RCC_ClockConfig+0x1b8>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 030f 	and.w	r3, r3, #15
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	429a      	cmp	r2, r3
 8003470:	d20c      	bcs.n	800348c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003472:	4b22      	ldr	r3, [pc, #136]	@ (80034fc <HAL_RCC_ClockConfig+0x1b8>)
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	b2d2      	uxtb	r2, r2
 8003478:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800347a:	4b20      	ldr	r3, [pc, #128]	@ (80034fc <HAL_RCC_ClockConfig+0x1b8>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 030f 	and.w	r3, r3, #15
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	429a      	cmp	r2, r3
 8003486:	d001      	beq.n	800348c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e032      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0304 	and.w	r3, r3, #4
 8003494:	2b00      	cmp	r3, #0
 8003496:	d008      	beq.n	80034aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003498:	4b19      	ldr	r3, [pc, #100]	@ (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	4916      	ldr	r1, [pc, #88]	@ (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0308 	and.w	r3, r3, #8
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d009      	beq.n	80034ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034b6:	4b12      	ldr	r3, [pc, #72]	@ (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	490e      	ldr	r1, [pc, #56]	@ (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034ca:	f000 f841 	bl	8003550 <HAL_RCC_GetSysClockFreq>
 80034ce:	4602      	mov	r2, r0
 80034d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	091b      	lsrs	r3, r3, #4
 80034d6:	f003 030f 	and.w	r3, r3, #15
 80034da:	490a      	ldr	r1, [pc, #40]	@ (8003504 <HAL_RCC_ClockConfig+0x1c0>)
 80034dc:	5ccb      	ldrb	r3, [r1, r3]
 80034de:	fa22 f303 	lsr.w	r3, r2, r3
 80034e2:	4a09      	ldr	r2, [pc, #36]	@ (8003508 <HAL_RCC_ClockConfig+0x1c4>)
 80034e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80034e6:	4b09      	ldr	r3, [pc, #36]	@ (800350c <HAL_RCC_ClockConfig+0x1c8>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7fd fa26 	bl	800093c <HAL_InitTick>

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	40023c00 	.word	0x40023c00
 8003500:	40023800 	.word	0x40023800
 8003504:	08005dc4 	.word	0x08005dc4
 8003508:	20000000 	.word	0x20000000
 800350c:	20000004 	.word	0x20000004

08003510 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003514:	4b03      	ldr	r3, [pc, #12]	@ (8003524 <HAL_RCC_GetHCLKFreq+0x14>)
 8003516:	681b      	ldr	r3, [r3, #0]
}
 8003518:	4618      	mov	r0, r3
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	20000000 	.word	0x20000000

08003528 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800352c:	f7ff fff0 	bl	8003510 <HAL_RCC_GetHCLKFreq>
 8003530:	4602      	mov	r2, r0
 8003532:	4b05      	ldr	r3, [pc, #20]	@ (8003548 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	0a9b      	lsrs	r3, r3, #10
 8003538:	f003 0307 	and.w	r3, r3, #7
 800353c:	4903      	ldr	r1, [pc, #12]	@ (800354c <HAL_RCC_GetPCLK1Freq+0x24>)
 800353e:	5ccb      	ldrb	r3, [r1, r3]
 8003540:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003544:	4618      	mov	r0, r3
 8003546:	bd80      	pop	{r7, pc}
 8003548:	40023800 	.word	0x40023800
 800354c:	08005dd4 	.word	0x08005dd4

08003550 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003550:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003554:	b0a6      	sub	sp, #152	@ 0x98
 8003556:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003558:	2300      	movs	r3, #0
 800355a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800355e:	2300      	movs	r3, #0
 8003560:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8003564:	2300      	movs	r3, #0
 8003566:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800356a:	2300      	movs	r3, #0
 800356c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8003570:	2300      	movs	r3, #0
 8003572:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003576:	4bc8      	ldr	r3, [pc, #800]	@ (8003898 <HAL_RCC_GetSysClockFreq+0x348>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f003 030c 	and.w	r3, r3, #12
 800357e:	2b0c      	cmp	r3, #12
 8003580:	f200 817e 	bhi.w	8003880 <HAL_RCC_GetSysClockFreq+0x330>
 8003584:	a201      	add	r2, pc, #4	@ (adr r2, 800358c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800358a:	bf00      	nop
 800358c:	080035c1 	.word	0x080035c1
 8003590:	08003881 	.word	0x08003881
 8003594:	08003881 	.word	0x08003881
 8003598:	08003881 	.word	0x08003881
 800359c:	080035c9 	.word	0x080035c9
 80035a0:	08003881 	.word	0x08003881
 80035a4:	08003881 	.word	0x08003881
 80035a8:	08003881 	.word	0x08003881
 80035ac:	080035d1 	.word	0x080035d1
 80035b0:	08003881 	.word	0x08003881
 80035b4:	08003881 	.word	0x08003881
 80035b8:	08003881 	.word	0x08003881
 80035bc:	0800373b 	.word	0x0800373b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035c0:	4bb6      	ldr	r3, [pc, #728]	@ (800389c <HAL_RCC_GetSysClockFreq+0x34c>)
 80035c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80035c6:	e15f      	b.n	8003888 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035c8:	4bb5      	ldr	r3, [pc, #724]	@ (80038a0 <HAL_RCC_GetSysClockFreq+0x350>)
 80035ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80035ce:	e15b      	b.n	8003888 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035d0:	4bb1      	ldr	r3, [pc, #708]	@ (8003898 <HAL_RCC_GetSysClockFreq+0x348>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035dc:	4bae      	ldr	r3, [pc, #696]	@ (8003898 <HAL_RCC_GetSysClockFreq+0x348>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d031      	beq.n	800364c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035e8:	4bab      	ldr	r3, [pc, #684]	@ (8003898 <HAL_RCC_GetSysClockFreq+0x348>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	099b      	lsrs	r3, r3, #6
 80035ee:	2200      	movs	r2, #0
 80035f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035f2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80035f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035fa:	663b      	str	r3, [r7, #96]	@ 0x60
 80035fc:	2300      	movs	r3, #0
 80035fe:	667b      	str	r3, [r7, #100]	@ 0x64
 8003600:	4ba7      	ldr	r3, [pc, #668]	@ (80038a0 <HAL_RCC_GetSysClockFreq+0x350>)
 8003602:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003606:	462a      	mov	r2, r5
 8003608:	fb03 f202 	mul.w	r2, r3, r2
 800360c:	2300      	movs	r3, #0
 800360e:	4621      	mov	r1, r4
 8003610:	fb01 f303 	mul.w	r3, r1, r3
 8003614:	4413      	add	r3, r2
 8003616:	4aa2      	ldr	r2, [pc, #648]	@ (80038a0 <HAL_RCC_GetSysClockFreq+0x350>)
 8003618:	4621      	mov	r1, r4
 800361a:	fba1 1202 	umull	r1, r2, r1, r2
 800361e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003620:	460a      	mov	r2, r1
 8003622:	67ba      	str	r2, [r7, #120]	@ 0x78
 8003624:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003626:	4413      	add	r3, r2
 8003628:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800362a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800362e:	2200      	movs	r2, #0
 8003630:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003632:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003634:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003638:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800363c:	f7fc fde2 	bl	8000204 <__aeabi_uldivmod>
 8003640:	4602      	mov	r2, r0
 8003642:	460b      	mov	r3, r1
 8003644:	4613      	mov	r3, r2
 8003646:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800364a:	e064      	b.n	8003716 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800364c:	4b92      	ldr	r3, [pc, #584]	@ (8003898 <HAL_RCC_GetSysClockFreq+0x348>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	099b      	lsrs	r3, r3, #6
 8003652:	2200      	movs	r2, #0
 8003654:	653b      	str	r3, [r7, #80]	@ 0x50
 8003656:	657a      	str	r2, [r7, #84]	@ 0x54
 8003658:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800365a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800365e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003660:	2300      	movs	r3, #0
 8003662:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003664:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8003668:	4622      	mov	r2, r4
 800366a:	462b      	mov	r3, r5
 800366c:	f04f 0000 	mov.w	r0, #0
 8003670:	f04f 0100 	mov.w	r1, #0
 8003674:	0159      	lsls	r1, r3, #5
 8003676:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800367a:	0150      	lsls	r0, r2, #5
 800367c:	4602      	mov	r2, r0
 800367e:	460b      	mov	r3, r1
 8003680:	4621      	mov	r1, r4
 8003682:	1a51      	subs	r1, r2, r1
 8003684:	6139      	str	r1, [r7, #16]
 8003686:	4629      	mov	r1, r5
 8003688:	eb63 0301 	sbc.w	r3, r3, r1
 800368c:	617b      	str	r3, [r7, #20]
 800368e:	f04f 0200 	mov.w	r2, #0
 8003692:	f04f 0300 	mov.w	r3, #0
 8003696:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800369a:	4659      	mov	r1, fp
 800369c:	018b      	lsls	r3, r1, #6
 800369e:	4651      	mov	r1, sl
 80036a0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036a4:	4651      	mov	r1, sl
 80036a6:	018a      	lsls	r2, r1, #6
 80036a8:	4651      	mov	r1, sl
 80036aa:	ebb2 0801 	subs.w	r8, r2, r1
 80036ae:	4659      	mov	r1, fp
 80036b0:	eb63 0901 	sbc.w	r9, r3, r1
 80036b4:	f04f 0200 	mov.w	r2, #0
 80036b8:	f04f 0300 	mov.w	r3, #0
 80036bc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036c0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036c4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036c8:	4690      	mov	r8, r2
 80036ca:	4699      	mov	r9, r3
 80036cc:	4623      	mov	r3, r4
 80036ce:	eb18 0303 	adds.w	r3, r8, r3
 80036d2:	60bb      	str	r3, [r7, #8]
 80036d4:	462b      	mov	r3, r5
 80036d6:	eb49 0303 	adc.w	r3, r9, r3
 80036da:	60fb      	str	r3, [r7, #12]
 80036dc:	f04f 0200 	mov.w	r2, #0
 80036e0:	f04f 0300 	mov.w	r3, #0
 80036e4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80036e8:	4629      	mov	r1, r5
 80036ea:	028b      	lsls	r3, r1, #10
 80036ec:	4621      	mov	r1, r4
 80036ee:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036f2:	4621      	mov	r1, r4
 80036f4:	028a      	lsls	r2, r1, #10
 80036f6:	4610      	mov	r0, r2
 80036f8:	4619      	mov	r1, r3
 80036fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036fe:	2200      	movs	r2, #0
 8003700:	643b      	str	r3, [r7, #64]	@ 0x40
 8003702:	647a      	str	r2, [r7, #68]	@ 0x44
 8003704:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003708:	f7fc fd7c 	bl	8000204 <__aeabi_uldivmod>
 800370c:	4602      	mov	r2, r0
 800370e:	460b      	mov	r3, r1
 8003710:	4613      	mov	r3, r2
 8003712:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003716:	4b60      	ldr	r3, [pc, #384]	@ (8003898 <HAL_RCC_GetSysClockFreq+0x348>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	0c1b      	lsrs	r3, r3, #16
 800371c:	f003 0303 	and.w	r3, r3, #3
 8003720:	3301      	adds	r3, #1
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8003728:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800372c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003730:	fbb2 f3f3 	udiv	r3, r2, r3
 8003734:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003738:	e0a6      	b.n	8003888 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800373a:	4b57      	ldr	r3, [pc, #348]	@ (8003898 <HAL_RCC_GetSysClockFreq+0x348>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003742:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003746:	4b54      	ldr	r3, [pc, #336]	@ (8003898 <HAL_RCC_GetSysClockFreq+0x348>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d02a      	beq.n	80037a8 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003752:	4b51      	ldr	r3, [pc, #324]	@ (8003898 <HAL_RCC_GetSysClockFreq+0x348>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	099b      	lsrs	r3, r3, #6
 8003758:	2200      	movs	r2, #0
 800375a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800375c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800375e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003760:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003764:	2100      	movs	r1, #0
 8003766:	4b4e      	ldr	r3, [pc, #312]	@ (80038a0 <HAL_RCC_GetSysClockFreq+0x350>)
 8003768:	fb03 f201 	mul.w	r2, r3, r1
 800376c:	2300      	movs	r3, #0
 800376e:	fb00 f303 	mul.w	r3, r0, r3
 8003772:	4413      	add	r3, r2
 8003774:	4a4a      	ldr	r2, [pc, #296]	@ (80038a0 <HAL_RCC_GetSysClockFreq+0x350>)
 8003776:	fba0 1202 	umull	r1, r2, r0, r2
 800377a:	677a      	str	r2, [r7, #116]	@ 0x74
 800377c:	460a      	mov	r2, r1
 800377e:	673a      	str	r2, [r7, #112]	@ 0x70
 8003780:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003782:	4413      	add	r3, r2
 8003784:	677b      	str	r3, [r7, #116]	@ 0x74
 8003786:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800378a:	2200      	movs	r2, #0
 800378c:	633b      	str	r3, [r7, #48]	@ 0x30
 800378e:	637a      	str	r2, [r7, #52]	@ 0x34
 8003790:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003794:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003798:	f7fc fd34 	bl	8000204 <__aeabi_uldivmod>
 800379c:	4602      	mov	r2, r0
 800379e:	460b      	mov	r3, r1
 80037a0:	4613      	mov	r3, r2
 80037a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80037a6:	e05b      	b.n	8003860 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037a8:	4b3b      	ldr	r3, [pc, #236]	@ (8003898 <HAL_RCC_GetSysClockFreq+0x348>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	099b      	lsrs	r3, r3, #6
 80037ae:	2200      	movs	r2, #0
 80037b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037ba:	623b      	str	r3, [r7, #32]
 80037bc:	2300      	movs	r3, #0
 80037be:	627b      	str	r3, [r7, #36]	@ 0x24
 80037c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80037c4:	4642      	mov	r2, r8
 80037c6:	464b      	mov	r3, r9
 80037c8:	f04f 0000 	mov.w	r0, #0
 80037cc:	f04f 0100 	mov.w	r1, #0
 80037d0:	0159      	lsls	r1, r3, #5
 80037d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037d6:	0150      	lsls	r0, r2, #5
 80037d8:	4602      	mov	r2, r0
 80037da:	460b      	mov	r3, r1
 80037dc:	4641      	mov	r1, r8
 80037de:	ebb2 0a01 	subs.w	sl, r2, r1
 80037e2:	4649      	mov	r1, r9
 80037e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80037e8:	f04f 0200 	mov.w	r2, #0
 80037ec:	f04f 0300 	mov.w	r3, #0
 80037f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80037f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80037f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80037fc:	ebb2 040a 	subs.w	r4, r2, sl
 8003800:	eb63 050b 	sbc.w	r5, r3, fp
 8003804:	f04f 0200 	mov.w	r2, #0
 8003808:	f04f 0300 	mov.w	r3, #0
 800380c:	00eb      	lsls	r3, r5, #3
 800380e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003812:	00e2      	lsls	r2, r4, #3
 8003814:	4614      	mov	r4, r2
 8003816:	461d      	mov	r5, r3
 8003818:	4643      	mov	r3, r8
 800381a:	18e3      	adds	r3, r4, r3
 800381c:	603b      	str	r3, [r7, #0]
 800381e:	464b      	mov	r3, r9
 8003820:	eb45 0303 	adc.w	r3, r5, r3
 8003824:	607b      	str	r3, [r7, #4]
 8003826:	f04f 0200 	mov.w	r2, #0
 800382a:	f04f 0300 	mov.w	r3, #0
 800382e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003832:	4629      	mov	r1, r5
 8003834:	028b      	lsls	r3, r1, #10
 8003836:	4621      	mov	r1, r4
 8003838:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800383c:	4621      	mov	r1, r4
 800383e:	028a      	lsls	r2, r1, #10
 8003840:	4610      	mov	r0, r2
 8003842:	4619      	mov	r1, r3
 8003844:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003848:	2200      	movs	r2, #0
 800384a:	61bb      	str	r3, [r7, #24]
 800384c:	61fa      	str	r2, [r7, #28]
 800384e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003852:	f7fc fcd7 	bl	8000204 <__aeabi_uldivmod>
 8003856:	4602      	mov	r2, r0
 8003858:	460b      	mov	r3, r1
 800385a:	4613      	mov	r3, r2
 800385c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003860:	4b0d      	ldr	r3, [pc, #52]	@ (8003898 <HAL_RCC_GetSysClockFreq+0x348>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	0f1b      	lsrs	r3, r3, #28
 8003866:	f003 0307 	and.w	r3, r3, #7
 800386a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 800386e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003872:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003876:	fbb2 f3f3 	udiv	r3, r2, r3
 800387a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800387e:	e003      	b.n	8003888 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003880:	4b06      	ldr	r3, [pc, #24]	@ (800389c <HAL_RCC_GetSysClockFreq+0x34c>)
 8003882:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003886:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003888:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 800388c:	4618      	mov	r0, r3
 800388e:	3798      	adds	r7, #152	@ 0x98
 8003890:	46bd      	mov	sp, r7
 8003892:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003896:	bf00      	nop
 8003898:	40023800 	.word	0x40023800
 800389c:	00f42400 	.word	0x00f42400
 80038a0:	017d7840 	.word	0x017d7840

080038a4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e28d      	b.n	8003dd2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f000 8083 	beq.w	80039ca <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80038c4:	4b94      	ldr	r3, [pc, #592]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f003 030c 	and.w	r3, r3, #12
 80038cc:	2b04      	cmp	r3, #4
 80038ce:	d019      	beq.n	8003904 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80038d0:	4b91      	ldr	r3, [pc, #580]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f003 030c 	and.w	r3, r3, #12
        || \
 80038d8:	2b08      	cmp	r3, #8
 80038da:	d106      	bne.n	80038ea <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80038dc:	4b8e      	ldr	r3, [pc, #568]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038e8:	d00c      	beq.n	8003904 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038ea:	4b8b      	ldr	r3, [pc, #556]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80038f2:	2b0c      	cmp	r3, #12
 80038f4:	d112      	bne.n	800391c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038f6:	4b88      	ldr	r3, [pc, #544]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003902:	d10b      	bne.n	800391c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003904:	4b84      	ldr	r3, [pc, #528]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d05b      	beq.n	80039c8 <HAL_RCC_OscConfig+0x124>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d157      	bne.n	80039c8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e25a      	b.n	8003dd2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003924:	d106      	bne.n	8003934 <HAL_RCC_OscConfig+0x90>
 8003926:	4b7c      	ldr	r3, [pc, #496]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a7b      	ldr	r2, [pc, #492]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 800392c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003930:	6013      	str	r3, [r2, #0]
 8003932:	e01d      	b.n	8003970 <HAL_RCC_OscConfig+0xcc>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800393c:	d10c      	bne.n	8003958 <HAL_RCC_OscConfig+0xb4>
 800393e:	4b76      	ldr	r3, [pc, #472]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a75      	ldr	r2, [pc, #468]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 8003944:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003948:	6013      	str	r3, [r2, #0]
 800394a:	4b73      	ldr	r3, [pc, #460]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a72      	ldr	r2, [pc, #456]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 8003950:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003954:	6013      	str	r3, [r2, #0]
 8003956:	e00b      	b.n	8003970 <HAL_RCC_OscConfig+0xcc>
 8003958:	4b6f      	ldr	r3, [pc, #444]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a6e      	ldr	r2, [pc, #440]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 800395e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003962:	6013      	str	r3, [r2, #0]
 8003964:	4b6c      	ldr	r3, [pc, #432]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a6b      	ldr	r2, [pc, #428]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 800396a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800396e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d013      	beq.n	80039a0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003978:	f7fd f824 	bl	80009c4 <HAL_GetTick>
 800397c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800397e:	e008      	b.n	8003992 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003980:	f7fd f820 	bl	80009c4 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b64      	cmp	r3, #100	@ 0x64
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e21f      	b.n	8003dd2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003992:	4b61      	ldr	r3, [pc, #388]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d0f0      	beq.n	8003980 <HAL_RCC_OscConfig+0xdc>
 800399e:	e014      	b.n	80039ca <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a0:	f7fd f810 	bl	80009c4 <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039a6:	e008      	b.n	80039ba <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039a8:	f7fd f80c 	bl	80009c4 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b64      	cmp	r3, #100	@ 0x64
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e20b      	b.n	8003dd2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ba:	4b57      	ldr	r3, [pc, #348]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1f0      	bne.n	80039a8 <HAL_RCC_OscConfig+0x104>
 80039c6:	e000      	b.n	80039ca <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d06f      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80039d6:	4b50      	ldr	r3, [pc, #320]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 030c 	and.w	r3, r3, #12
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d017      	beq.n	8003a12 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80039e2:	4b4d      	ldr	r3, [pc, #308]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f003 030c 	and.w	r3, r3, #12
        || \
 80039ea:	2b08      	cmp	r3, #8
 80039ec:	d105      	bne.n	80039fa <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80039ee:	4b4a      	ldr	r3, [pc, #296]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00b      	beq.n	8003a12 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039fa:	4b47      	ldr	r3, [pc, #284]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003a02:	2b0c      	cmp	r3, #12
 8003a04:	d11c      	bne.n	8003a40 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a06:	4b44      	ldr	r3, [pc, #272]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d116      	bne.n	8003a40 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a12:	4b41      	ldr	r3, [pc, #260]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d005      	beq.n	8003a2a <HAL_RCC_OscConfig+0x186>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d001      	beq.n	8003a2a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e1d3      	b.n	8003dd2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a2a:	4b3b      	ldr	r3, [pc, #236]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	00db      	lsls	r3, r3, #3
 8003a38:	4937      	ldr	r1, [pc, #220]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a3e:	e03a      	b.n	8003ab6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d020      	beq.n	8003a8a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a48:	4b34      	ldr	r3, [pc, #208]	@ (8003b1c <HAL_RCC_OscConfig+0x278>)
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a4e:	f7fc ffb9 	bl	80009c4 <HAL_GetTick>
 8003a52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a54:	e008      	b.n	8003a68 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a56:	f7fc ffb5 	bl	80009c4 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d901      	bls.n	8003a68 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e1b4      	b.n	8003dd2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a68:	4b2b      	ldr	r3, [pc, #172]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d0f0      	beq.n	8003a56 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a74:	4b28      	ldr	r3, [pc, #160]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	00db      	lsls	r3, r3, #3
 8003a82:	4925      	ldr	r1, [pc, #148]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	600b      	str	r3, [r1, #0]
 8003a88:	e015      	b.n	8003ab6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a8a:	4b24      	ldr	r3, [pc, #144]	@ (8003b1c <HAL_RCC_OscConfig+0x278>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a90:	f7fc ff98 	bl	80009c4 <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a98:	f7fc ff94 	bl	80009c4 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e193      	b.n	8003dd2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aaa:	4b1b      	ldr	r3, [pc, #108]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1f0      	bne.n	8003a98 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0308 	and.w	r3, r3, #8
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d036      	beq.n	8003b30 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d016      	beq.n	8003af8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aca:	4b15      	ldr	r3, [pc, #84]	@ (8003b20 <HAL_RCC_OscConfig+0x27c>)
 8003acc:	2201      	movs	r2, #1
 8003ace:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad0:	f7fc ff78 	bl	80009c4 <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ad8:	f7fc ff74 	bl	80009c4 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e173      	b.n	8003dd2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aea:	4b0b      	ldr	r3, [pc, #44]	@ (8003b18 <HAL_RCC_OscConfig+0x274>)
 8003aec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d0f0      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x234>
 8003af6:	e01b      	b.n	8003b30 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003af8:	4b09      	ldr	r3, [pc, #36]	@ (8003b20 <HAL_RCC_OscConfig+0x27c>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003afe:	f7fc ff61 	bl	80009c4 <HAL_GetTick>
 8003b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b04:	e00e      	b.n	8003b24 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b06:	f7fc ff5d 	bl	80009c4 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d907      	bls.n	8003b24 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e15c      	b.n	8003dd2 <HAL_RCC_OscConfig+0x52e>
 8003b18:	40023800 	.word	0x40023800
 8003b1c:	42470000 	.word	0x42470000
 8003b20:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b24:	4b8a      	ldr	r3, [pc, #552]	@ (8003d50 <HAL_RCC_OscConfig+0x4ac>)
 8003b26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1ea      	bne.n	8003b06 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0304 	and.w	r3, r3, #4
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f000 8097 	beq.w	8003c6c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b42:	4b83      	ldr	r3, [pc, #524]	@ (8003d50 <HAL_RCC_OscConfig+0x4ac>)
 8003b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10f      	bne.n	8003b6e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b4e:	2300      	movs	r3, #0
 8003b50:	60bb      	str	r3, [r7, #8]
 8003b52:	4b7f      	ldr	r3, [pc, #508]	@ (8003d50 <HAL_RCC_OscConfig+0x4ac>)
 8003b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b56:	4a7e      	ldr	r2, [pc, #504]	@ (8003d50 <HAL_RCC_OscConfig+0x4ac>)
 8003b58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b5e:	4b7c      	ldr	r3, [pc, #496]	@ (8003d50 <HAL_RCC_OscConfig+0x4ac>)
 8003b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b66:	60bb      	str	r3, [r7, #8]
 8003b68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b6e:	4b79      	ldr	r3, [pc, #484]	@ (8003d54 <HAL_RCC_OscConfig+0x4b0>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d118      	bne.n	8003bac <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b7a:	4b76      	ldr	r3, [pc, #472]	@ (8003d54 <HAL_RCC_OscConfig+0x4b0>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a75      	ldr	r2, [pc, #468]	@ (8003d54 <HAL_RCC_OscConfig+0x4b0>)
 8003b80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b86:	f7fc ff1d 	bl	80009c4 <HAL_GetTick>
 8003b8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b8c:	e008      	b.n	8003ba0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b8e:	f7fc ff19 	bl	80009c4 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e118      	b.n	8003dd2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba0:	4b6c      	ldr	r3, [pc, #432]	@ (8003d54 <HAL_RCC_OscConfig+0x4b0>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d0f0      	beq.n	8003b8e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d106      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x31e>
 8003bb4:	4b66      	ldr	r3, [pc, #408]	@ (8003d50 <HAL_RCC_OscConfig+0x4ac>)
 8003bb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bb8:	4a65      	ldr	r2, [pc, #404]	@ (8003d50 <HAL_RCC_OscConfig+0x4ac>)
 8003bba:	f043 0301 	orr.w	r3, r3, #1
 8003bbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bc0:	e01c      	b.n	8003bfc <HAL_RCC_OscConfig+0x358>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	2b05      	cmp	r3, #5
 8003bc8:	d10c      	bne.n	8003be4 <HAL_RCC_OscConfig+0x340>
 8003bca:	4b61      	ldr	r3, [pc, #388]	@ (8003d50 <HAL_RCC_OscConfig+0x4ac>)
 8003bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bce:	4a60      	ldr	r2, [pc, #384]	@ (8003d50 <HAL_RCC_OscConfig+0x4ac>)
 8003bd0:	f043 0304 	orr.w	r3, r3, #4
 8003bd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bd6:	4b5e      	ldr	r3, [pc, #376]	@ (8003d50 <HAL_RCC_OscConfig+0x4ac>)
 8003bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bda:	4a5d      	ldr	r2, [pc, #372]	@ (8003d50 <HAL_RCC_OscConfig+0x4ac>)
 8003bdc:	f043 0301 	orr.w	r3, r3, #1
 8003be0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003be2:	e00b      	b.n	8003bfc <HAL_RCC_OscConfig+0x358>
 8003be4:	4b5a      	ldr	r3, [pc, #360]	@ (8003d50 <HAL_RCC_OscConfig+0x4ac>)
 8003be6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003be8:	4a59      	ldr	r2, [pc, #356]	@ (8003d50 <HAL_RCC_OscConfig+0x4ac>)
 8003bea:	f023 0301 	bic.w	r3, r3, #1
 8003bee:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bf0:	4b57      	ldr	r3, [pc, #348]	@ (8003d50 <HAL_RCC_OscConfig+0x4ac>)
 8003bf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bf4:	4a56      	ldr	r2, [pc, #344]	@ (8003d50 <HAL_RCC_OscConfig+0x4ac>)
 8003bf6:	f023 0304 	bic.w	r3, r3, #4
 8003bfa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d015      	beq.n	8003c30 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c04:	f7fc fede 	bl	80009c4 <HAL_GetTick>
 8003c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c0a:	e00a      	b.n	8003c22 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c0c:	f7fc feda 	bl	80009c4 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e0d7      	b.n	8003dd2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c22:	4b4b      	ldr	r3, [pc, #300]	@ (8003d50 <HAL_RCC_OscConfig+0x4ac>)
 8003c24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d0ee      	beq.n	8003c0c <HAL_RCC_OscConfig+0x368>
 8003c2e:	e014      	b.n	8003c5a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c30:	f7fc fec8 	bl	80009c4 <HAL_GetTick>
 8003c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c36:	e00a      	b.n	8003c4e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c38:	f7fc fec4 	bl	80009c4 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e0c1      	b.n	8003dd2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c4e:	4b40      	ldr	r3, [pc, #256]	@ (8003d50 <HAL_RCC_OscConfig+0x4ac>)
 8003c50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1ee      	bne.n	8003c38 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c5a:	7dfb      	ldrb	r3, [r7, #23]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d105      	bne.n	8003c6c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c60:	4b3b      	ldr	r3, [pc, #236]	@ (8003d50 <HAL_RCC_OscConfig+0x4ac>)
 8003c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c64:	4a3a      	ldr	r2, [pc, #232]	@ (8003d50 <HAL_RCC_OscConfig+0x4ac>)
 8003c66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c6a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f000 80ad 	beq.w	8003dd0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c76:	4b36      	ldr	r3, [pc, #216]	@ (8003d50 <HAL_RCC_OscConfig+0x4ac>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f003 030c 	and.w	r3, r3, #12
 8003c7e:	2b08      	cmp	r3, #8
 8003c80:	d060      	beq.n	8003d44 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d145      	bne.n	8003d16 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c8a:	4b33      	ldr	r3, [pc, #204]	@ (8003d58 <HAL_RCC_OscConfig+0x4b4>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c90:	f7fc fe98 	bl	80009c4 <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c96:	e008      	b.n	8003caa <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c98:	f7fc fe94 	bl	80009c4 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e093      	b.n	8003dd2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003caa:	4b29      	ldr	r3, [pc, #164]	@ (8003d50 <HAL_RCC_OscConfig+0x4ac>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1f0      	bne.n	8003c98 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	69da      	ldr	r2, [r3, #28]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc4:	019b      	lsls	r3, r3, #6
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ccc:	085b      	lsrs	r3, r3, #1
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	041b      	lsls	r3, r3, #16
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd8:	061b      	lsls	r3, r3, #24
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce0:	071b      	lsls	r3, r3, #28
 8003ce2:	491b      	ldr	r1, [pc, #108]	@ (8003d50 <HAL_RCC_OscConfig+0x4ac>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ce8:	4b1b      	ldr	r3, [pc, #108]	@ (8003d58 <HAL_RCC_OscConfig+0x4b4>)
 8003cea:	2201      	movs	r2, #1
 8003cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cee:	f7fc fe69 	bl	80009c4 <HAL_GetTick>
 8003cf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cf4:	e008      	b.n	8003d08 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cf6:	f7fc fe65 	bl	80009c4 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d901      	bls.n	8003d08 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e064      	b.n	8003dd2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d08:	4b11      	ldr	r3, [pc, #68]	@ (8003d50 <HAL_RCC_OscConfig+0x4ac>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d0f0      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x452>
 8003d14:	e05c      	b.n	8003dd0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d16:	4b10      	ldr	r3, [pc, #64]	@ (8003d58 <HAL_RCC_OscConfig+0x4b4>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d1c:	f7fc fe52 	bl	80009c4 <HAL_GetTick>
 8003d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d22:	e008      	b.n	8003d36 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d24:	f7fc fe4e 	bl	80009c4 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e04d      	b.n	8003dd2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d36:	4b06      	ldr	r3, [pc, #24]	@ (8003d50 <HAL_RCC_OscConfig+0x4ac>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1f0      	bne.n	8003d24 <HAL_RCC_OscConfig+0x480>
 8003d42:	e045      	b.n	8003dd0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d107      	bne.n	8003d5c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e040      	b.n	8003dd2 <HAL_RCC_OscConfig+0x52e>
 8003d50:	40023800 	.word	0x40023800
 8003d54:	40007000 	.word	0x40007000
 8003d58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d5c:	4b1f      	ldr	r3, [pc, #124]	@ (8003ddc <HAL_RCC_OscConfig+0x538>)
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d030      	beq.n	8003dcc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d129      	bne.n	8003dcc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d122      	bne.n	8003dcc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d119      	bne.n	8003dcc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da2:	085b      	lsrs	r3, r3, #1
 8003da4:	3b01      	subs	r3, #1
 8003da6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d10f      	bne.n	8003dcc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d107      	bne.n	8003dcc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d001      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e000      	b.n	8003dd2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3718      	adds	r7, #24
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	40023800 	.word	0x40023800

08003de0 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8003de0:	b480      	push	{r7}
 8003de2:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8003de4:	bf00      	nop
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
	...

08003df0 <ssd1306_WriteCommand>:


// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af04      	add	r7, sp, #16
 8003df6:	4603      	mov	r3, r0
 8003df8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8003dfa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003dfe:	9302      	str	r3, [sp, #8]
 8003e00:	2301      	movs	r3, #1
 8003e02:	9301      	str	r3, [sp, #4]
 8003e04:	1dfb      	adds	r3, r7, #7
 8003e06:	9300      	str	r3, [sp, #0]
 8003e08:	2301      	movs	r3, #1
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	2178      	movs	r1, #120	@ 0x78
 8003e0e:	4803      	ldr	r0, [pc, #12]	@ (8003e1c <ssd1306_WriteCommand+0x2c>)
 8003e10:	f7fd fa38 	bl	8001284 <HAL_I2C_Mem_Write>
}
 8003e14:	bf00      	nop
 8003e16:	3708      	adds	r7, #8
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	20000028 	.word	0x20000028

08003e20 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b086      	sub	sp, #24
 8003e24:	af04      	add	r7, sp, #16
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003e32:	9202      	str	r2, [sp, #8]
 8003e34:	9301      	str	r3, [sp, #4]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	9300      	str	r3, [sp, #0]
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	2240      	movs	r2, #64	@ 0x40
 8003e3e:	2178      	movs	r1, #120	@ 0x78
 8003e40:	4803      	ldr	r0, [pc, #12]	@ (8003e50 <ssd1306_WriteData+0x30>)
 8003e42:	f7fd fa1f 	bl	8001284 <HAL_I2C_Mem_Write>
}
 8003e46:	bf00      	nop
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	20000028 	.word	0x20000028

08003e54 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8003e58:	f7ff ffc2 	bl	8003de0 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8003e5c:	2064      	movs	r0, #100	@ 0x64
 8003e5e:	f7fc fdbd 	bl	80009dc <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8003e62:	2000      	movs	r0, #0
 8003e64:	f000 ff7a 	bl	8004d5c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003e68:	2020      	movs	r0, #32
 8003e6a:	f7ff ffc1 	bl	8003df0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8003e6e:	2000      	movs	r0, #0
 8003e70:	f7ff ffbe 	bl	8003df0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003e74:	20b0      	movs	r0, #176	@ 0xb0
 8003e76:	f7ff ffbb 	bl	8003df0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8003e7a:	20c8      	movs	r0, #200	@ 0xc8
 8003e7c:	f7ff ffb8 	bl	8003df0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8003e80:	2000      	movs	r0, #0
 8003e82:	f7ff ffb5 	bl	8003df0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003e86:	2010      	movs	r0, #16
 8003e88:	f7ff ffb2 	bl	8003df0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003e8c:	2040      	movs	r0, #64	@ 0x40
 8003e8e:	f7ff ffaf 	bl	8003df0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8003e92:	20ff      	movs	r0, #255	@ 0xff
 8003e94:	f000 ff4f 	bl	8004d36 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8003e98:	20a1      	movs	r0, #161	@ 0xa1
 8003e9a:	f7ff ffa9 	bl	8003df0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8003e9e:	20a6      	movs	r0, #166	@ 0xa6
 8003ea0:	f7ff ffa6 	bl	8003df0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003ea4:	20a8      	movs	r0, #168	@ 0xa8
 8003ea6:	f7ff ffa3 	bl	8003df0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8003eaa:	201f      	movs	r0, #31
 8003eac:	f7ff ffa0 	bl	8003df0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003eb0:	20a4      	movs	r0, #164	@ 0xa4
 8003eb2:	f7ff ff9d 	bl	8003df0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8003eb6:	20d3      	movs	r0, #211	@ 0xd3
 8003eb8:	f7ff ff9a 	bl	8003df0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8003ebc:	2000      	movs	r0, #0
 8003ebe:	f7ff ff97 	bl	8003df0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8003ec2:	20d5      	movs	r0, #213	@ 0xd5
 8003ec4:	f7ff ff94 	bl	8003df0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003ec8:	20f0      	movs	r0, #240	@ 0xf0
 8003eca:	f7ff ff91 	bl	8003df0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8003ece:	20d9      	movs	r0, #217	@ 0xd9
 8003ed0:	f7ff ff8e 	bl	8003df0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8003ed4:	2022      	movs	r0, #34	@ 0x22
 8003ed6:	f7ff ff8b 	bl	8003df0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8003eda:	20da      	movs	r0, #218	@ 0xda
 8003edc:	f7ff ff88 	bl	8003df0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8003ee0:	2002      	movs	r0, #2
 8003ee2:	f7ff ff85 	bl	8003df0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8003ee6:	20db      	movs	r0, #219	@ 0xdb
 8003ee8:	f7ff ff82 	bl	8003df0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8003eec:	2020      	movs	r0, #32
 8003eee:	f7ff ff7f 	bl	8003df0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8003ef2:	208d      	movs	r0, #141	@ 0x8d
 8003ef4:	f7ff ff7c 	bl	8003df0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003ef8:	2014      	movs	r0, #20
 8003efa:	f7ff ff79 	bl	8003df0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8003efe:	2001      	movs	r0, #1
 8003f00:	f000 ff2c 	bl	8004d5c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8003f04:	2000      	movs	r0, #0
 8003f06:	f000 f80f 	bl	8003f28 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8003f0a:	f000 f825 	bl	8003f58 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8003f0e:	4b05      	ldr	r3, [pc, #20]	@ (8003f24 <ssd1306_Init+0xd0>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003f14:	4b03      	ldr	r3, [pc, #12]	@ (8003f24 <ssd1306_Init+0xd0>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8003f1a:	4b02      	ldr	r3, [pc, #8]	@ (8003f24 <ssd1306_Init+0xd0>)
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	711a      	strb	r2, [r3, #4]
}
 8003f20:	bf00      	nop
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	20000280 	.word	0x20000280

08003f28 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	4603      	mov	r3, r0
 8003f30:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8003f32:	79fb      	ldrb	r3, [r7, #7]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d101      	bne.n	8003f3c <ssd1306_Fill+0x14>
 8003f38:	2300      	movs	r3, #0
 8003f3a:	e000      	b.n	8003f3e <ssd1306_Fill+0x16>
 8003f3c:	23ff      	movs	r3, #255	@ 0xff
 8003f3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f42:	4619      	mov	r1, r3
 8003f44:	4803      	ldr	r0, [pc, #12]	@ (8003f54 <ssd1306_Fill+0x2c>)
 8003f46:	f001 f92d 	bl	80051a4 <memset>
}
 8003f4a:	bf00      	nop
 8003f4c:	3708      	adds	r7, #8
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	20000080 	.word	0x20000080

08003f58 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003f5e:	2300      	movs	r3, #0
 8003f60:	71fb      	strb	r3, [r7, #7]
 8003f62:	e016      	b.n	8003f92 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8003f64:	79fb      	ldrb	r3, [r7, #7]
 8003f66:	3b50      	subs	r3, #80	@ 0x50
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7ff ff40 	bl	8003df0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8003f70:	2000      	movs	r0, #0
 8003f72:	f7ff ff3d 	bl	8003df0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8003f76:	2010      	movs	r0, #16
 8003f78:	f7ff ff3a 	bl	8003df0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8003f7c:	79fb      	ldrb	r3, [r7, #7]
 8003f7e:	01db      	lsls	r3, r3, #7
 8003f80:	4a08      	ldr	r2, [pc, #32]	@ (8003fa4 <ssd1306_UpdateScreen+0x4c>)
 8003f82:	4413      	add	r3, r2
 8003f84:	2180      	movs	r1, #128	@ 0x80
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7ff ff4a 	bl	8003e20 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003f8c:	79fb      	ldrb	r3, [r7, #7]
 8003f8e:	3301      	adds	r3, #1
 8003f90:	71fb      	strb	r3, [r7, #7]
 8003f92:	79fb      	ldrb	r3, [r7, #7]
 8003f94:	2b03      	cmp	r3, #3
 8003f96:	d9e5      	bls.n	8003f64 <ssd1306_UpdateScreen+0xc>
    }
}
 8003f98:	bf00      	nop
 8003f9a:	bf00      	nop
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	20000080 	.word	0x20000080

08003fa8 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	4603      	mov	r3, r0
 8003fb0:	71fb      	strb	r3, [r7, #7]
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	71bb      	strb	r3, [r7, #6]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8003fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	db3d      	blt.n	800403e <ssd1306_DrawPixel+0x96>
 8003fc2:	79bb      	ldrb	r3, [r7, #6]
 8003fc4:	2b1f      	cmp	r3, #31
 8003fc6:	d83a      	bhi.n	800403e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8003fc8:	797b      	ldrb	r3, [r7, #5]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d11a      	bne.n	8004004 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003fce:	79fa      	ldrb	r2, [r7, #7]
 8003fd0:	79bb      	ldrb	r3, [r7, #6]
 8003fd2:	08db      	lsrs	r3, r3, #3
 8003fd4:	b2d8      	uxtb	r0, r3
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	01db      	lsls	r3, r3, #7
 8003fda:	4413      	add	r3, r2
 8003fdc:	4a1b      	ldr	r2, [pc, #108]	@ (800404c <ssd1306_DrawPixel+0xa4>)
 8003fde:	5cd3      	ldrb	r3, [r2, r3]
 8003fe0:	b25a      	sxtb	r2, r3
 8003fe2:	79bb      	ldrb	r3, [r7, #6]
 8003fe4:	f003 0307 	and.w	r3, r3, #7
 8003fe8:	2101      	movs	r1, #1
 8003fea:	fa01 f303 	lsl.w	r3, r1, r3
 8003fee:	b25b      	sxtb	r3, r3
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	b259      	sxtb	r1, r3
 8003ff4:	79fa      	ldrb	r2, [r7, #7]
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	01db      	lsls	r3, r3, #7
 8003ffa:	4413      	add	r3, r2
 8003ffc:	b2c9      	uxtb	r1, r1
 8003ffe:	4a13      	ldr	r2, [pc, #76]	@ (800404c <ssd1306_DrawPixel+0xa4>)
 8004000:	54d1      	strb	r1, [r2, r3]
 8004002:	e01d      	b.n	8004040 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004004:	79fa      	ldrb	r2, [r7, #7]
 8004006:	79bb      	ldrb	r3, [r7, #6]
 8004008:	08db      	lsrs	r3, r3, #3
 800400a:	b2d8      	uxtb	r0, r3
 800400c:	4603      	mov	r3, r0
 800400e:	01db      	lsls	r3, r3, #7
 8004010:	4413      	add	r3, r2
 8004012:	4a0e      	ldr	r2, [pc, #56]	@ (800404c <ssd1306_DrawPixel+0xa4>)
 8004014:	5cd3      	ldrb	r3, [r2, r3]
 8004016:	b25a      	sxtb	r2, r3
 8004018:	79bb      	ldrb	r3, [r7, #6]
 800401a:	f003 0307 	and.w	r3, r3, #7
 800401e:	2101      	movs	r1, #1
 8004020:	fa01 f303 	lsl.w	r3, r1, r3
 8004024:	b25b      	sxtb	r3, r3
 8004026:	43db      	mvns	r3, r3
 8004028:	b25b      	sxtb	r3, r3
 800402a:	4013      	ands	r3, r2
 800402c:	b259      	sxtb	r1, r3
 800402e:	79fa      	ldrb	r2, [r7, #7]
 8004030:	4603      	mov	r3, r0
 8004032:	01db      	lsls	r3, r3, #7
 8004034:	4413      	add	r3, r2
 8004036:	b2c9      	uxtb	r1, r1
 8004038:	4a04      	ldr	r2, [pc, #16]	@ (800404c <ssd1306_DrawPixel+0xa4>)
 800403a:	54d1      	strb	r1, [r2, r3]
 800403c:	e000      	b.n	8004040 <ssd1306_DrawPixel+0x98>
        return;
 800403e:	bf00      	nop
    }
}
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	20000080 	.word	0x20000080

08004050 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8004050:	b590      	push	{r4, r7, lr}
 8004052:	b089      	sub	sp, #36	@ 0x24
 8004054:	af00      	add	r7, sp, #0
 8004056:	4604      	mov	r4, r0
 8004058:	4638      	mov	r0, r7
 800405a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800405e:	4623      	mov	r3, r4
 8004060:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8004062:	7bfb      	ldrb	r3, [r7, #15]
 8004064:	2b1f      	cmp	r3, #31
 8004066:	d902      	bls.n	800406e <ssd1306_WriteChar+0x1e>
 8004068:	7bfb      	ldrb	r3, [r7, #15]
 800406a:	2b7e      	cmp	r3, #126	@ 0x7e
 800406c:	d901      	bls.n	8004072 <ssd1306_WriteChar+0x22>
        return 0;
 800406e:	2300      	movs	r3, #0
 8004070:	e079      	b.n	8004166 <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d005      	beq.n	8004084 <ssd1306_WriteChar+0x34>
 8004078:	68ba      	ldr	r2, [r7, #8]
 800407a:	7bfb      	ldrb	r3, [r7, #15]
 800407c:	3b20      	subs	r3, #32
 800407e:	4413      	add	r3, r2
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	e000      	b.n	8004086 <ssd1306_WriteChar+0x36>
 8004084:	783b      	ldrb	r3, [r7, #0]
 8004086:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8004088:	4b39      	ldr	r3, [pc, #228]	@ (8004170 <ssd1306_WriteChar+0x120>)
 800408a:	881b      	ldrh	r3, [r3, #0]
 800408c:	461a      	mov	r2, r3
 800408e:	7dfb      	ldrb	r3, [r7, #23]
 8004090:	4413      	add	r3, r2
 8004092:	2b80      	cmp	r3, #128	@ 0x80
 8004094:	dc06      	bgt.n	80040a4 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8004096:	4b36      	ldr	r3, [pc, #216]	@ (8004170 <ssd1306_WriteChar+0x120>)
 8004098:	885b      	ldrh	r3, [r3, #2]
 800409a:	461a      	mov	r2, r3
 800409c:	787b      	ldrb	r3, [r7, #1]
 800409e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 80040a0:	2b20      	cmp	r3, #32
 80040a2:	dd01      	ble.n	80040a8 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 80040a4:	2300      	movs	r3, #0
 80040a6:	e05e      	b.n	8004166 <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80040a8:	2300      	movs	r3, #0
 80040aa:	61fb      	str	r3, [r7, #28]
 80040ac:	e04d      	b.n	800414a <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	7bfb      	ldrb	r3, [r7, #15]
 80040b2:	3b20      	subs	r3, #32
 80040b4:	7879      	ldrb	r1, [r7, #1]
 80040b6:	fb01 f303 	mul.w	r3, r1, r3
 80040ba:	4619      	mov	r1, r3
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	440b      	add	r3, r1
 80040c0:	005b      	lsls	r3, r3, #1
 80040c2:	4413      	add	r3, r2
 80040c4:	881b      	ldrh	r3, [r3, #0]
 80040c6:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 80040c8:	2300      	movs	r3, #0
 80040ca:	61bb      	str	r3, [r7, #24]
 80040cc:	e036      	b.n	800413c <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	fa02 f303 	lsl.w	r3, r2, r3
 80040d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d013      	beq.n	8004106 <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80040de:	4b24      	ldr	r3, [pc, #144]	@ (8004170 <ssd1306_WriteChar+0x120>)
 80040e0:	881b      	ldrh	r3, [r3, #0]
 80040e2:	b2da      	uxtb	r2, r3
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	4413      	add	r3, r2
 80040ea:	b2d8      	uxtb	r0, r3
 80040ec:	4b20      	ldr	r3, [pc, #128]	@ (8004170 <ssd1306_WriteChar+0x120>)
 80040ee:	885b      	ldrh	r3, [r3, #2]
 80040f0:	b2da      	uxtb	r2, r3
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	4413      	add	r3, r2
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80040fe:	4619      	mov	r1, r3
 8004100:	f7ff ff52 	bl	8003fa8 <ssd1306_DrawPixel>
 8004104:	e017      	b.n	8004136 <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8004106:	4b1a      	ldr	r3, [pc, #104]	@ (8004170 <ssd1306_WriteChar+0x120>)
 8004108:	881b      	ldrh	r3, [r3, #0]
 800410a:	b2da      	uxtb	r2, r3
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	b2db      	uxtb	r3, r3
 8004110:	4413      	add	r3, r2
 8004112:	b2d8      	uxtb	r0, r3
 8004114:	4b16      	ldr	r3, [pc, #88]	@ (8004170 <ssd1306_WriteChar+0x120>)
 8004116:	885b      	ldrh	r3, [r3, #2]
 8004118:	b2da      	uxtb	r2, r3
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	b2db      	uxtb	r3, r3
 800411e:	4413      	add	r3, r2
 8004120:	b2d9      	uxtb	r1, r3
 8004122:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8004126:	2b00      	cmp	r3, #0
 8004128:	bf0c      	ite	eq
 800412a:	2301      	moveq	r3, #1
 800412c:	2300      	movne	r3, #0
 800412e:	b2db      	uxtb	r3, r3
 8004130:	461a      	mov	r2, r3
 8004132:	f7ff ff39 	bl	8003fa8 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	3301      	adds	r3, #1
 800413a:	61bb      	str	r3, [r7, #24]
 800413c:	7dfb      	ldrb	r3, [r7, #23]
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	429a      	cmp	r2, r3
 8004142:	d3c4      	bcc.n	80040ce <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	3301      	adds	r3, #1
 8004148:	61fb      	str	r3, [r7, #28]
 800414a:	787b      	ldrb	r3, [r7, #1]
 800414c:	461a      	mov	r2, r3
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	4293      	cmp	r3, r2
 8004152:	d3ac      	bcc.n	80040ae <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8004154:	4b06      	ldr	r3, [pc, #24]	@ (8004170 <ssd1306_WriteChar+0x120>)
 8004156:	881a      	ldrh	r2, [r3, #0]
 8004158:	7dfb      	ldrb	r3, [r7, #23]
 800415a:	b29b      	uxth	r3, r3
 800415c:	4413      	add	r3, r2
 800415e:	b29a      	uxth	r2, r3
 8004160:	4b03      	ldr	r3, [pc, #12]	@ (8004170 <ssd1306_WriteChar+0x120>)
 8004162:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8004164:	7bfb      	ldrb	r3, [r7, #15]
}
 8004166:	4618      	mov	r0, r3
 8004168:	3724      	adds	r7, #36	@ 0x24
 800416a:	46bd      	mov	sp, r7
 800416c:	bd90      	pop	{r4, r7, pc}
 800416e:	bf00      	nop
 8004170:	20000280 	.word	0x20000280

08004174 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8004174:	b580      	push	{r7, lr}
 8004176:	b086      	sub	sp, #24
 8004178:	af02      	add	r7, sp, #8
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	4638      	mov	r0, r7
 800417e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8004182:	e013      	b.n	80041ac <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	7818      	ldrb	r0, [r3, #0]
 8004188:	7e3b      	ldrb	r3, [r7, #24]
 800418a:	9300      	str	r3, [sp, #0]
 800418c:	463b      	mov	r3, r7
 800418e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004190:	f7ff ff5e 	bl	8004050 <ssd1306_WriteChar>
 8004194:	4603      	mov	r3, r0
 8004196:	461a      	mov	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	429a      	cmp	r2, r3
 800419e:	d002      	beq.n	80041a6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	e008      	b.n	80041b8 <ssd1306_WriteString+0x44>
        }
        str++;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	3301      	adds	r3, #1
 80041aa:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1e7      	bne.n	8004184 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	781b      	ldrb	r3, [r3, #0]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3710      	adds	r7, #16
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	4603      	mov	r3, r0
 80041c8:	460a      	mov	r2, r1
 80041ca:	71fb      	strb	r3, [r7, #7]
 80041cc:	4613      	mov	r3, r2
 80041ce:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80041d0:	79fb      	ldrb	r3, [r7, #7]
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	4b05      	ldr	r3, [pc, #20]	@ (80041ec <ssd1306_SetCursor+0x2c>)
 80041d6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80041d8:	79bb      	ldrb	r3, [r7, #6]
 80041da:	b29a      	uxth	r2, r3
 80041dc:	4b03      	ldr	r3, [pc, #12]	@ (80041ec <ssd1306_SetCursor+0x2c>)
 80041de:	805a      	strh	r2, [r3, #2]
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr
 80041ec:	20000280 	.word	0x20000280

080041f0 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80041f0:	b590      	push	{r4, r7, lr}
 80041f2:	b089      	sub	sp, #36	@ 0x24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	4604      	mov	r4, r0
 80041f8:	4608      	mov	r0, r1
 80041fa:	4611      	mov	r1, r2
 80041fc:	461a      	mov	r2, r3
 80041fe:	4623      	mov	r3, r4
 8004200:	71fb      	strb	r3, [r7, #7]
 8004202:	4603      	mov	r3, r0
 8004204:	71bb      	strb	r3, [r7, #6]
 8004206:	460b      	mov	r3, r1
 8004208:	717b      	strb	r3, [r7, #5]
 800420a:	4613      	mov	r3, r2
 800420c:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 800420e:	797a      	ldrb	r2, [r7, #5]
 8004210:	79fb      	ldrb	r3, [r7, #7]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	2b00      	cmp	r3, #0
 8004216:	bfb8      	it	lt
 8004218:	425b      	neglt	r3, r3
 800421a:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 800421c:	793a      	ldrb	r2, [r7, #4]
 800421e:	79bb      	ldrb	r3, [r7, #6]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	bfb8      	it	lt
 8004226:	425b      	neglt	r3, r3
 8004228:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 800422a:	79fa      	ldrb	r2, [r7, #7]
 800422c:	797b      	ldrb	r3, [r7, #5]
 800422e:	429a      	cmp	r2, r3
 8004230:	d201      	bcs.n	8004236 <ssd1306_Line+0x46>
 8004232:	2301      	movs	r3, #1
 8004234:	e001      	b.n	800423a <ssd1306_Line+0x4a>
 8004236:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800423a:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 800423c:	79ba      	ldrb	r2, [r7, #6]
 800423e:	793b      	ldrb	r3, [r7, #4]
 8004240:	429a      	cmp	r2, r3
 8004242:	d201      	bcs.n	8004248 <ssd1306_Line+0x58>
 8004244:	2301      	movs	r3, #1
 8004246:	e001      	b.n	800424c <ssd1306_Line+0x5c>
 8004248:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800424c:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 800424e:	69ba      	ldr	r2, [r7, #24]
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8004256:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800425a:	7939      	ldrb	r1, [r7, #4]
 800425c:	797b      	ldrb	r3, [r7, #5]
 800425e:	4618      	mov	r0, r3
 8004260:	f7ff fea2 	bl	8003fa8 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8004264:	e024      	b.n	80042b0 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8004266:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800426a:	79b9      	ldrb	r1, [r7, #6]
 800426c:	79fb      	ldrb	r3, [r7, #7]
 800426e:	4618      	mov	r0, r3
 8004270:	f7ff fe9a 	bl	8003fa8 <ssd1306_DrawPixel>
        error2 = error * 2;
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	005b      	lsls	r3, r3, #1
 8004278:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	425b      	negs	r3, r3
 800427e:	68ba      	ldr	r2, [r7, #8]
 8004280:	429a      	cmp	r2, r3
 8004282:	dd08      	ble.n	8004296 <ssd1306_Line+0xa6>
            error -= deltaY;
 8004284:	69fa      	ldr	r2, [r7, #28]
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	b2da      	uxtb	r2, r3
 8004290:	79fb      	ldrb	r3, [r7, #7]
 8004292:	4413      	add	r3, r2
 8004294:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 8004296:	68ba      	ldr	r2, [r7, #8]
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	429a      	cmp	r2, r3
 800429c:	da08      	bge.n	80042b0 <ssd1306_Line+0xc0>
            error += deltaX;
 800429e:	69fa      	ldr	r2, [r7, #28]
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	4413      	add	r3, r2
 80042a4:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	b2da      	uxtb	r2, r3
 80042aa:	79bb      	ldrb	r3, [r7, #6]
 80042ac:	4413      	add	r3, r2
 80042ae:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 80042b0:	79fa      	ldrb	r2, [r7, #7]
 80042b2:	797b      	ldrb	r3, [r7, #5]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d1d6      	bne.n	8004266 <ssd1306_Line+0x76>
 80042b8:	79ba      	ldrb	r2, [r7, #6]
 80042ba:	793b      	ldrb	r3, [r7, #4]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d1d2      	bne.n	8004266 <ssd1306_Line+0x76>
        }
    }
    return;
 80042c0:	bf00      	nop
}
 80042c2:	3724      	adds	r7, #36	@ 0x24
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd90      	pop	{r4, r7, pc}

080042c8 <ssd1306_Polyline>:

/* Draw polyline */
void ssd1306_Polyline(const SSD1306_VERTEX *par_vertex, uint16_t par_size, SSD1306_COLOR color) {
 80042c8:	b590      	push	{r4, r7, lr}
 80042ca:	b087      	sub	sp, #28
 80042cc:	af02      	add	r7, sp, #8
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	460b      	mov	r3, r1
 80042d2:	807b      	strh	r3, [r7, #2]
 80042d4:	4613      	mov	r3, r2
 80042d6:	707b      	strb	r3, [r7, #1]
    uint16_t i;
    if(par_vertex == NULL) {
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d02a      	beq.n	8004334 <ssd1306_Polyline+0x6c>
        return;
    }

    for(i = 1; i < par_size; i++) {
 80042de:	2301      	movs	r3, #1
 80042e0:	81fb      	strh	r3, [r7, #14]
 80042e2:	e022      	b.n	800432a <ssd1306_Polyline+0x62>
        ssd1306_Line(par_vertex[i - 1].x, par_vertex[i - 1].y, par_vertex[i].x, par_vertex[i].y, color);
 80042e4:	89fb      	ldrh	r3, [r7, #14]
 80042e6:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80042ea:	3b01      	subs	r3, #1
 80042ec:	005b      	lsls	r3, r3, #1
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	4413      	add	r3, r2
 80042f2:	7818      	ldrb	r0, [r3, #0]
 80042f4:	89fb      	ldrh	r3, [r7, #14]
 80042f6:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80042fa:	3b01      	subs	r3, #1
 80042fc:	005b      	lsls	r3, r3, #1
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	4413      	add	r3, r2
 8004302:	7859      	ldrb	r1, [r3, #1]
 8004304:	89fb      	ldrh	r3, [r7, #14]
 8004306:	005b      	lsls	r3, r3, #1
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	4413      	add	r3, r2
 800430c:	781c      	ldrb	r4, [r3, #0]
 800430e:	89fb      	ldrh	r3, [r7, #14]
 8004310:	005b      	lsls	r3, r3, #1
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	4413      	add	r3, r2
 8004316:	785a      	ldrb	r2, [r3, #1]
 8004318:	787b      	ldrb	r3, [r7, #1]
 800431a:	9300      	str	r3, [sp, #0]
 800431c:	4613      	mov	r3, r2
 800431e:	4622      	mov	r2, r4
 8004320:	f7ff ff66 	bl	80041f0 <ssd1306_Line>
    for(i = 1; i < par_size; i++) {
 8004324:	89fb      	ldrh	r3, [r7, #14]
 8004326:	3301      	adds	r3, #1
 8004328:	81fb      	strh	r3, [r7, #14]
 800432a:	89fa      	ldrh	r2, [r7, #14]
 800432c:	887b      	ldrh	r3, [r7, #2]
 800432e:	429a      	cmp	r2, r3
 8004330:	d3d8      	bcc.n	80042e4 <ssd1306_Polyline+0x1c>
    }

    return;
 8004332:	e000      	b.n	8004336 <ssd1306_Polyline+0x6e>
        return;
 8004334:	bf00      	nop
}
 8004336:	3714      	adds	r7, #20
 8004338:	46bd      	mov	sp, r7
 800433a:	bd90      	pop	{r4, r7, pc}

0800433c <ssd1306_DegToRad>:

/* Convert Degrees to Radians */
static float ssd1306_DegToRad(float par_deg) {
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	ed87 0a01 	vstr	s0, [r7, #4]
    return par_deg * (3.14f / 180.0f);
 8004346:	edd7 7a01 	vldr	s15, [r7, #4]
 800434a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8004360 <ssd1306_DegToRad+0x24>
 800434e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8004352:	eeb0 0a67 	vmov.f32	s0, s15
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr
 8004360:	3c8ee7a7 	.word	0x3c8ee7a7

08004364 <ssd1306_NormalizeTo0_360>:

/* Normalize degree to [0;360] */
static uint16_t ssd1306_NormalizeTo0_360(uint16_t par_deg) {
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	4603      	mov	r3, r0
 800436c:	80fb      	strh	r3, [r7, #6]
    uint16_t loc_angle;
    if(par_deg <= 360) {
 800436e:	88fb      	ldrh	r3, [r7, #6]
 8004370:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8004374:	d802      	bhi.n	800437c <ssd1306_NormalizeTo0_360+0x18>
        loc_angle = par_deg;
 8004376:	88fb      	ldrh	r3, [r7, #6]
 8004378:	81fb      	strh	r3, [r7, #14]
 800437a:	e013      	b.n	80043a4 <ssd1306_NormalizeTo0_360+0x40>
    } else {
        loc_angle = par_deg % 360;
 800437c:	88fb      	ldrh	r3, [r7, #6]
 800437e:	08da      	lsrs	r2, r3, #3
 8004380:	490c      	ldr	r1, [pc, #48]	@ (80043b4 <ssd1306_NormalizeTo0_360+0x50>)
 8004382:	fba1 1202 	umull	r1, r2, r1, r2
 8004386:	0892      	lsrs	r2, r2, #2
 8004388:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 800438c:	fb01 f202 	mul.w	r2, r1, r2
 8004390:	1a9b      	subs	r3, r3, r2
 8004392:	81fb      	strh	r3, [r7, #14]
        loc_angle = (loc_angle ? loc_angle : 360);
 8004394:	89fb      	ldrh	r3, [r7, #14]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d001      	beq.n	800439e <ssd1306_NormalizeTo0_360+0x3a>
 800439a:	89fb      	ldrh	r3, [r7, #14]
 800439c:	e001      	b.n	80043a2 <ssd1306_NormalizeTo0_360+0x3e>
 800439e:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 80043a2:	81fb      	strh	r3, [r7, #14]
    }
    return loc_angle;
 80043a4:	89fb      	ldrh	r3, [r7, #14]
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3714      	adds	r7, #20
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	16c16c17 	.word	0x16c16c17

080043b8 <ssd1306_DrawArc>:
/*
 * DrawArc. Draw angle is beginning from 4 quart of trigonometric circle (3pi/2)
 * start_angle in degree
 * sweep in degree
 */
void ssd1306_DrawArc(uint8_t x, uint8_t y, uint8_t radius, uint16_t start_angle, uint16_t sweep, SSD1306_COLOR color) {
 80043b8:	b590      	push	{r4, r7, lr}
 80043ba:	b08d      	sub	sp, #52	@ 0x34
 80043bc:	af02      	add	r7, sp, #8
 80043be:	4604      	mov	r4, r0
 80043c0:	4608      	mov	r0, r1
 80043c2:	4611      	mov	r1, r2
 80043c4:	461a      	mov	r2, r3
 80043c6:	4623      	mov	r3, r4
 80043c8:	73fb      	strb	r3, [r7, #15]
 80043ca:	4603      	mov	r3, r0
 80043cc:	73bb      	strb	r3, [r7, #14]
 80043ce:	460b      	mov	r3, r1
 80043d0:	737b      	strb	r3, [r7, #13]
 80043d2:	4613      	mov	r3, r2
 80043d4:	817b      	strh	r3, [r7, #10]
    uint8_t yp1,yp2;
    uint32_t count;
    uint32_t loc_sweep;
    float rad;
    
    loc_sweep = ssd1306_NormalizeTo0_360(sweep);
 80043d6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80043d8:	4618      	mov	r0, r3
 80043da:	f7ff ffc3 	bl	8004364 <ssd1306_NormalizeTo0_360>
 80043de:	4603      	mov	r3, r0
 80043e0:	61fb      	str	r3, [r7, #28]
    
    count = (ssd1306_NormalizeTo0_360(start_angle) * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 80043e2:	897b      	ldrh	r3, [r7, #10]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7ff ffbd 	bl	8004364 <ssd1306_NormalizeTo0_360>
 80043ea:	4603      	mov	r3, r0
 80043ec:	461a      	mov	r2, r3
 80043ee:	4b63      	ldr	r3, [pc, #396]	@ (800457c <ssd1306_DrawArc+0x1c4>)
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	fb02 f303 	mul.w	r3, r2, r3
 80043f6:	4a62      	ldr	r2, [pc, #392]	@ (8004580 <ssd1306_DrawArc+0x1c8>)
 80043f8:	fb82 1203 	smull	r1, r2, r2, r3
 80043fc:	441a      	add	r2, r3
 80043fe:	1212      	asrs	r2, r2, #8
 8004400:	17db      	asrs	r3, r3, #31
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	627b      	str	r3, [r7, #36]	@ 0x24
    approx_segments = (loc_sweep * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 8004406:	4b5d      	ldr	r3, [pc, #372]	@ (800457c <ssd1306_DrawArc+0x1c4>)
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	461a      	mov	r2, r3
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	fb02 f303 	mul.w	r3, r2, r3
 8004412:	08db      	lsrs	r3, r3, #3
 8004414:	4a5b      	ldr	r2, [pc, #364]	@ (8004584 <ssd1306_DrawArc+0x1cc>)
 8004416:	fba2 2303 	umull	r2, r3, r2, r3
 800441a:	089b      	lsrs	r3, r3, #2
 800441c:	61bb      	str	r3, [r7, #24]
    approx_degree = loc_sweep / (float)approx_segments;
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	ee07 3a90 	vmov	s15, r3
 8004424:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	ee07 3a90 	vmov	s15, r3
 800442e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004432:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004436:	edc7 7a05 	vstr	s15, [r7, #20]
    while(count < approx_segments)
 800443a:	e096      	b.n	800456a <ssd1306_DrawArc+0x1b2>
    {
        rad = ssd1306_DegToRad(count*approx_degree);
 800443c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800443e:	ee07 3a90 	vmov	s15, r3
 8004442:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004446:	edd7 7a05 	vldr	s15, [r7, #20]
 800444a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800444e:	eeb0 0a67 	vmov.f32	s0, s15
 8004452:	f7ff ff73 	bl	800433c <ssd1306_DegToRad>
 8004456:	ed87 0a08 	vstr	s0, [r7, #32]
        xp1 = x + (int8_t)(sinf(rad)*radius);
 800445a:	ed97 0a08 	vldr	s0, [r7, #32]
 800445e:	f000 ff11 	bl	8005284 <sinf>
 8004462:	eeb0 7a40 	vmov.f32	s14, s0
 8004466:	7b7b      	ldrb	r3, [r7, #13]
 8004468:	ee07 3a90 	vmov	s15, r3
 800446c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004470:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004474:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004478:	edc7 7a01 	vstr	s15, [r7, #4]
 800447c:	793b      	ldrb	r3, [r7, #4]
 800447e:	b25b      	sxtb	r3, r3
 8004480:	b2da      	uxtb	r2, r3
 8004482:	7bfb      	ldrb	r3, [r7, #15]
 8004484:	4413      	add	r3, r2
 8004486:	74fb      	strb	r3, [r7, #19]
        yp1 = y + (int8_t)(cosf(rad)*radius);    
 8004488:	ed97 0a08 	vldr	s0, [r7, #32]
 800448c:	f000 feb6 	bl	80051fc <cosf>
 8004490:	eeb0 7a40 	vmov.f32	s14, s0
 8004494:	7b7b      	ldrb	r3, [r7, #13]
 8004496:	ee07 3a90 	vmov	s15, r3
 800449a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800449e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044a6:	edc7 7a01 	vstr	s15, [r7, #4]
 80044aa:	793b      	ldrb	r3, [r7, #4]
 80044ac:	b25b      	sxtb	r3, r3
 80044ae:	b2da      	uxtb	r2, r3
 80044b0:	7bbb      	ldrb	r3, [r7, #14]
 80044b2:	4413      	add	r3, r2
 80044b4:	74bb      	strb	r3, [r7, #18]
        count++;
 80044b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b8:	3301      	adds	r3, #1
 80044ba:	627b      	str	r3, [r7, #36]	@ 0x24
        if(count != approx_segments) {
 80044bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d00f      	beq.n	80044e4 <ssd1306_DrawArc+0x12c>
            rad = ssd1306_DegToRad(count*approx_degree);
 80044c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c6:	ee07 3a90 	vmov	s15, r3
 80044ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80044ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80044d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044d6:	eeb0 0a67 	vmov.f32	s0, s15
 80044da:	f7ff ff2f 	bl	800433c <ssd1306_DegToRad>
 80044de:	ed87 0a08 	vstr	s0, [r7, #32]
 80044e2:	e00a      	b.n	80044fa <ssd1306_DrawArc+0x142>
        } else {
            rad = ssd1306_DegToRad(loc_sweep);
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	ee07 3a90 	vmov	s15, r3
 80044ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ee:	eeb0 0a67 	vmov.f32	s0, s15
 80044f2:	f7ff ff23 	bl	800433c <ssd1306_DegToRad>
 80044f6:	ed87 0a08 	vstr	s0, [r7, #32]
        }
        xp2 = x + (int8_t)(sinf(rad)*radius);
 80044fa:	ed97 0a08 	vldr	s0, [r7, #32]
 80044fe:	f000 fec1 	bl	8005284 <sinf>
 8004502:	eeb0 7a40 	vmov.f32	s14, s0
 8004506:	7b7b      	ldrb	r3, [r7, #13]
 8004508:	ee07 3a90 	vmov	s15, r3
 800450c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004510:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004514:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004518:	edc7 7a01 	vstr	s15, [r7, #4]
 800451c:	793b      	ldrb	r3, [r7, #4]
 800451e:	b25b      	sxtb	r3, r3
 8004520:	b2da      	uxtb	r2, r3
 8004522:	7bfb      	ldrb	r3, [r7, #15]
 8004524:	4413      	add	r3, r2
 8004526:	747b      	strb	r3, [r7, #17]
        yp2 = y + (int8_t)(cosf(rad)*radius);    
 8004528:	ed97 0a08 	vldr	s0, [r7, #32]
 800452c:	f000 fe66 	bl	80051fc <cosf>
 8004530:	eeb0 7a40 	vmov.f32	s14, s0
 8004534:	7b7b      	ldrb	r3, [r7, #13]
 8004536:	ee07 3a90 	vmov	s15, r3
 800453a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800453e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004542:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004546:	edc7 7a01 	vstr	s15, [r7, #4]
 800454a:	793b      	ldrb	r3, [r7, #4]
 800454c:	b25b      	sxtb	r3, r3
 800454e:	b2da      	uxtb	r2, r3
 8004550:	7bbb      	ldrb	r3, [r7, #14]
 8004552:	4413      	add	r3, r2
 8004554:	743b      	strb	r3, [r7, #16]
        ssd1306_Line(xp1,yp1,xp2,yp2,color);
 8004556:	7c3c      	ldrb	r4, [r7, #16]
 8004558:	7c7a      	ldrb	r2, [r7, #17]
 800455a:	7cb9      	ldrb	r1, [r7, #18]
 800455c:	7cf8      	ldrb	r0, [r7, #19]
 800455e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8004562:	9300      	str	r3, [sp, #0]
 8004564:	4623      	mov	r3, r4
 8004566:	f7ff fe43 	bl	80041f0 <ssd1306_Line>
    while(count < approx_segments)
 800456a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	429a      	cmp	r2, r3
 8004570:	f4ff af64 	bcc.w	800443c <ssd1306_DrawArc+0x84>
    }
    
    return;
 8004574:	bf00      	nop
}
 8004576:	372c      	adds	r7, #44	@ 0x2c
 8004578:	46bd      	mov	sp, r7
 800457a:	bd90      	pop	{r4, r7, pc}
 800457c:	08005ddc 	.word	0x08005ddc
 8004580:	b60b60b7 	.word	0xb60b60b7
 8004584:	16c16c17 	.word	0x16c16c17

08004588 <ssd1306_DrawArcWithRadiusLine>:
 * Draw arc with radius line
 * Angle is beginning from 4 quart of trigonometric circle (3pi/2)
 * start_angle: start angle in degree
 * sweep: finish angle in degree
 */
void ssd1306_DrawArcWithRadiusLine(uint8_t x, uint8_t y, uint8_t radius, uint16_t start_angle, uint16_t sweep, SSD1306_COLOR color) {
 8004588:	b590      	push	{r4, r7, lr}
 800458a:	b08f      	sub	sp, #60	@ 0x3c
 800458c:	af02      	add	r7, sp, #8
 800458e:	4604      	mov	r4, r0
 8004590:	4608      	mov	r0, r1
 8004592:	4611      	mov	r1, r2
 8004594:	461a      	mov	r2, r3
 8004596:	4623      	mov	r3, r4
 8004598:	73fb      	strb	r3, [r7, #15]
 800459a:	4603      	mov	r3, r0
 800459c:	73bb      	strb	r3, [r7, #14]
 800459e:	460b      	mov	r3, r1
 80045a0:	737b      	strb	r3, [r7, #13]
 80045a2:	4613      	mov	r3, r2
 80045a4:	817b      	strh	r3, [r7, #10]
    const uint32_t CIRCLE_APPROXIMATION_SEGMENTS = 36;
 80045a6:	2324      	movs	r3, #36	@ 0x24
 80045a8:	623b      	str	r3, [r7, #32]
    float approx_degree;
    uint32_t approx_segments;
    uint8_t xp1;
    uint8_t xp2 = 0;
 80045aa:	2300      	movs	r3, #0
 80045ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    uint8_t yp1;
    uint8_t yp2 = 0;
 80045b0:	2300      	movs	r3, #0
 80045b2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint32_t count;
    uint32_t loc_sweep;
    float rad;
    
    loc_sweep = ssd1306_NormalizeTo0_360(sweep);
 80045b6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7ff fed2 	bl	8004364 <ssd1306_NormalizeTo0_360>
 80045c0:	4603      	mov	r3, r0
 80045c2:	61fb      	str	r3, [r7, #28]
    
    count = (ssd1306_NormalizeTo0_360(start_angle) * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 80045c4:	897b      	ldrh	r3, [r7, #10]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7ff fecc 	bl	8004364 <ssd1306_NormalizeTo0_360>
 80045cc:	4603      	mov	r3, r0
 80045ce:	461a      	mov	r2, r3
 80045d0:	6a3b      	ldr	r3, [r7, #32]
 80045d2:	fb02 f303 	mul.w	r3, r2, r3
 80045d6:	08db      	lsrs	r3, r3, #3
 80045d8:	4a8a      	ldr	r2, [pc, #552]	@ (8004804 <ssd1306_DrawArcWithRadiusLine+0x27c>)
 80045da:	fba2 2303 	umull	r2, r3, r2, r3
 80045de:	089b      	lsrs	r3, r3, #2
 80045e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    approx_segments = (loc_sweep * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	6a3a      	ldr	r2, [r7, #32]
 80045e6:	fb02 f303 	mul.w	r3, r2, r3
 80045ea:	08db      	lsrs	r3, r3, #3
 80045ec:	4a85      	ldr	r2, [pc, #532]	@ (8004804 <ssd1306_DrawArcWithRadiusLine+0x27c>)
 80045ee:	fba2 2303 	umull	r2, r3, r2, r3
 80045f2:	089b      	lsrs	r3, r3, #2
 80045f4:	61bb      	str	r3, [r7, #24]
    approx_degree = loc_sweep / (float)approx_segments;
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	ee07 3a90 	vmov	s15, r3
 80045fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	ee07 3a90 	vmov	s15, r3
 8004606:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800460a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800460e:	edc7 7a05 	vstr	s15, [r7, #20]

    rad = ssd1306_DegToRad(count*approx_degree);
 8004612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004614:	ee07 3a90 	vmov	s15, r3
 8004618:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800461c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004620:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004624:	eeb0 0a67 	vmov.f32	s0, s15
 8004628:	f7ff fe88 	bl	800433c <ssd1306_DegToRad>
 800462c:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
    uint8_t first_point_x = x + (int8_t)(sinf(rad)*radius);
 8004630:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8004634:	f000 fe26 	bl	8005284 <sinf>
 8004638:	eeb0 7a40 	vmov.f32	s14, s0
 800463c:	7b7b      	ldrb	r3, [r7, #13]
 800463e:	ee07 3a90 	vmov	s15, r3
 8004642:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800464a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800464e:	edc7 7a01 	vstr	s15, [r7, #4]
 8004652:	793b      	ldrb	r3, [r7, #4]
 8004654:	b25b      	sxtb	r3, r3
 8004656:	b2da      	uxtb	r2, r3
 8004658:	7bfb      	ldrb	r3, [r7, #15]
 800465a:	4413      	add	r3, r2
 800465c:	74fb      	strb	r3, [r7, #19]
    uint8_t first_point_y = y + (int8_t)(cosf(rad)*radius);   
 800465e:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8004662:	f000 fdcb 	bl	80051fc <cosf>
 8004666:	eeb0 7a40 	vmov.f32	s14, s0
 800466a:	7b7b      	ldrb	r3, [r7, #13]
 800466c:	ee07 3a90 	vmov	s15, r3
 8004670:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004674:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004678:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800467c:	edc7 7a01 	vstr	s15, [r7, #4]
 8004680:	793b      	ldrb	r3, [r7, #4]
 8004682:	b25b      	sxtb	r3, r3
 8004684:	b2da      	uxtb	r2, r3
 8004686:	7bbb      	ldrb	r3, [r7, #14]
 8004688:	4413      	add	r3, r2
 800468a:	74bb      	strb	r3, [r7, #18]
    while (count < approx_segments) {
 800468c:	e09a      	b.n	80047c4 <ssd1306_DrawArcWithRadiusLine+0x23c>
        rad = ssd1306_DegToRad(count*approx_degree);
 800468e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004690:	ee07 3a90 	vmov	s15, r3
 8004694:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004698:	edd7 7a05 	vldr	s15, [r7, #20]
 800469c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046a0:	eeb0 0a67 	vmov.f32	s0, s15
 80046a4:	f7ff fe4a 	bl	800433c <ssd1306_DegToRad>
 80046a8:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
        xp1 = x + (int8_t)(sinf(rad)*radius);
 80046ac:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 80046b0:	f000 fde8 	bl	8005284 <sinf>
 80046b4:	eeb0 7a40 	vmov.f32	s14, s0
 80046b8:	7b7b      	ldrb	r3, [r7, #13]
 80046ba:	ee07 3a90 	vmov	s15, r3
 80046be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046ca:	edc7 7a01 	vstr	s15, [r7, #4]
 80046ce:	793b      	ldrb	r3, [r7, #4]
 80046d0:	b25b      	sxtb	r3, r3
 80046d2:	b2da      	uxtb	r2, r3
 80046d4:	7bfb      	ldrb	r3, [r7, #15]
 80046d6:	4413      	add	r3, r2
 80046d8:	747b      	strb	r3, [r7, #17]
        yp1 = y + (int8_t)(cosf(rad)*radius);    
 80046da:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 80046de:	f000 fd8d 	bl	80051fc <cosf>
 80046e2:	eeb0 7a40 	vmov.f32	s14, s0
 80046e6:	7b7b      	ldrb	r3, [r7, #13]
 80046e8:	ee07 3a90 	vmov	s15, r3
 80046ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046f8:	edc7 7a01 	vstr	s15, [r7, #4]
 80046fc:	793b      	ldrb	r3, [r7, #4]
 80046fe:	b25b      	sxtb	r3, r3
 8004700:	b2da      	uxtb	r2, r3
 8004702:	7bbb      	ldrb	r3, [r7, #14]
 8004704:	4413      	add	r3, r2
 8004706:	743b      	strb	r3, [r7, #16]
        count++;
 8004708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800470a:	3301      	adds	r3, #1
 800470c:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (count != approx_segments) {
 800470e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	429a      	cmp	r2, r3
 8004714:	d00f      	beq.n	8004736 <ssd1306_DrawArcWithRadiusLine+0x1ae>
            rad = ssd1306_DegToRad(count*approx_degree);
 8004716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004718:	ee07 3a90 	vmov	s15, r3
 800471c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004720:	edd7 7a05 	vldr	s15, [r7, #20]
 8004724:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004728:	eeb0 0a67 	vmov.f32	s0, s15
 800472c:	f7ff fe06 	bl	800433c <ssd1306_DegToRad>
 8004730:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 8004734:	e00a      	b.n	800474c <ssd1306_DrawArcWithRadiusLine+0x1c4>
        } else {
            rad = ssd1306_DegToRad(loc_sweep);
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	ee07 3a90 	vmov	s15, r3
 800473c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004740:	eeb0 0a67 	vmov.f32	s0, s15
 8004744:	f7ff fdfa 	bl	800433c <ssd1306_DegToRad>
 8004748:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
        }
        xp2 = x + (int8_t)(sinf(rad)*radius);
 800474c:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8004750:	f000 fd98 	bl	8005284 <sinf>
 8004754:	eeb0 7a40 	vmov.f32	s14, s0
 8004758:	7b7b      	ldrb	r3, [r7, #13]
 800475a:	ee07 3a90 	vmov	s15, r3
 800475e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004766:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800476a:	edc7 7a01 	vstr	s15, [r7, #4]
 800476e:	793b      	ldrb	r3, [r7, #4]
 8004770:	b25b      	sxtb	r3, r3
 8004772:	b2da      	uxtb	r2, r3
 8004774:	7bfb      	ldrb	r3, [r7, #15]
 8004776:	4413      	add	r3, r2
 8004778:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        yp2 = y + (int8_t)(cosf(rad)*radius);    
 800477c:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8004780:	f000 fd3c 	bl	80051fc <cosf>
 8004784:	eeb0 7a40 	vmov.f32	s14, s0
 8004788:	7b7b      	ldrb	r3, [r7, #13]
 800478a:	ee07 3a90 	vmov	s15, r3
 800478e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004796:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800479a:	edc7 7a01 	vstr	s15, [r7, #4]
 800479e:	793b      	ldrb	r3, [r7, #4]
 80047a0:	b25b      	sxtb	r3, r3
 80047a2:	b2da      	uxtb	r2, r3
 80047a4:	7bbb      	ldrb	r3, [r7, #14]
 80047a6:	4413      	add	r3, r2
 80047a8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        ssd1306_Line(xp1,yp1,xp2,yp2,color);
 80047ac:	f897 402e 	ldrb.w	r4, [r7, #46]	@ 0x2e
 80047b0:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80047b4:	7c39      	ldrb	r1, [r7, #16]
 80047b6:	7c78      	ldrb	r0, [r7, #17]
 80047b8:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80047bc:	9300      	str	r3, [sp, #0]
 80047be:	4623      	mov	r3, r4
 80047c0:	f7ff fd16 	bl	80041f0 <ssd1306_Line>
    while (count < approx_segments) {
 80047c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	f4ff af60 	bcc.w	800468e <ssd1306_DrawArcWithRadiusLine+0x106>
    }
    
    // Radius line
    ssd1306_Line(x,y,first_point_x,first_point_y,color);
 80047ce:	7cbc      	ldrb	r4, [r7, #18]
 80047d0:	7cfa      	ldrb	r2, [r7, #19]
 80047d2:	7bb9      	ldrb	r1, [r7, #14]
 80047d4:	7bf8      	ldrb	r0, [r7, #15]
 80047d6:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80047da:	9300      	str	r3, [sp, #0]
 80047dc:	4623      	mov	r3, r4
 80047de:	f7ff fd07 	bl	80041f0 <ssd1306_Line>
    ssd1306_Line(x,y,xp2,yp2,color);
 80047e2:	f897 402e 	ldrb.w	r4, [r7, #46]	@ 0x2e
 80047e6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80047ea:	7bb9      	ldrb	r1, [r7, #14]
 80047ec:	7bf8      	ldrb	r0, [r7, #15]
 80047ee:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80047f2:	9300      	str	r3, [sp, #0]
 80047f4:	4623      	mov	r3, r4
 80047f6:	f7ff fcfb 	bl	80041f0 <ssd1306_Line>
    return;
 80047fa:	bf00      	nop
}
 80047fc:	3734      	adds	r7, #52	@ 0x34
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd90      	pop	{r4, r7, pc}
 8004802:	bf00      	nop
 8004804:	16c16c17 	.word	0x16c16c17

08004808 <ssd1306_DrawCircle>:

/* Draw circle by Bresenhem's algorithm */
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8004808:	b590      	push	{r4, r7, lr}
 800480a:	b087      	sub	sp, #28
 800480c:	af00      	add	r7, sp, #0
 800480e:	4604      	mov	r4, r0
 8004810:	4608      	mov	r0, r1
 8004812:	4611      	mov	r1, r2
 8004814:	461a      	mov	r2, r3
 8004816:	4623      	mov	r3, r4
 8004818:	71fb      	strb	r3, [r7, #7]
 800481a:	4603      	mov	r3, r0
 800481c:	71bb      	strb	r3, [r7, #6]
 800481e:	460b      	mov	r3, r1
 8004820:	717b      	strb	r3, [r7, #5]
 8004822:	4613      	mov	r3, r2
 8004824:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 8004826:	797b      	ldrb	r3, [r7, #5]
 8004828:	425b      	negs	r3, r3
 800482a:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 800482c:	2300      	movs	r3, #0
 800482e:	613b      	str	r3, [r7, #16]
    int32_t err = 2 - 2 * par_r;
 8004830:	797b      	ldrb	r3, [r7, #5]
 8004832:	f1c3 0301 	rsb	r3, r3, #1
 8004836:	005b      	lsls	r3, r3, #1
 8004838:	60fb      	str	r3, [r7, #12]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 800483a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800483e:	2b00      	cmp	r3, #0
 8004840:	db65      	blt.n	800490e <ssd1306_DrawCircle+0x106>
 8004842:	79bb      	ldrb	r3, [r7, #6]
 8004844:	2b1f      	cmp	r3, #31
 8004846:	d862      	bhi.n	800490e <ssd1306_DrawCircle+0x106>
        return;
    }

    do {
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	b2db      	uxtb	r3, r3
 800484c:	79fa      	ldrb	r2, [r7, #7]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	b2d8      	uxtb	r0, r3
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	b2da      	uxtb	r2, r3
 8004856:	79bb      	ldrb	r3, [r7, #6]
 8004858:	4413      	add	r3, r2
 800485a:	b2db      	uxtb	r3, r3
 800485c:	793a      	ldrb	r2, [r7, #4]
 800485e:	4619      	mov	r1, r3
 8004860:	f7ff fba2 	bl	8003fa8 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	b2da      	uxtb	r2, r3
 8004868:	79fb      	ldrb	r3, [r7, #7]
 800486a:	4413      	add	r3, r2
 800486c:	b2d8      	uxtb	r0, r3
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	b2da      	uxtb	r2, r3
 8004872:	79bb      	ldrb	r3, [r7, #6]
 8004874:	4413      	add	r3, r2
 8004876:	b2db      	uxtb	r3, r3
 8004878:	793a      	ldrb	r2, [r7, #4]
 800487a:	4619      	mov	r1, r3
 800487c:	f7ff fb94 	bl	8003fa8 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	b2da      	uxtb	r2, r3
 8004884:	79fb      	ldrb	r3, [r7, #7]
 8004886:	4413      	add	r3, r2
 8004888:	b2d8      	uxtb	r0, r3
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	b2db      	uxtb	r3, r3
 800488e:	79ba      	ldrb	r2, [r7, #6]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	b2db      	uxtb	r3, r3
 8004894:	793a      	ldrb	r2, [r7, #4]
 8004896:	4619      	mov	r1, r3
 8004898:	f7ff fb86 	bl	8003fa8 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	79fa      	ldrb	r2, [r7, #7]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	b2d8      	uxtb	r0, r3
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	79ba      	ldrb	r2, [r7, #6]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	793a      	ldrb	r2, [r7, #4]
 80048b2:	4619      	mov	r1, r3
 80048b4:	f7ff fb78 	bl	8003fa8 <ssd1306_DrawPixel>
        e2 = err;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	60bb      	str	r3, [r7, #8]

        if (e2 <= y) {
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	dc13      	bgt.n	80048ec <ssd1306_DrawCircle+0xe4>
            y++;
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	3301      	adds	r3, #1
 80048c8:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	005b      	lsls	r3, r3, #1
 80048ce:	3301      	adds	r3, #1
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	4413      	add	r3, r2
 80048d4:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	425b      	negs	r3, r3
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d105      	bne.n	80048ec <ssd1306_DrawCircle+0xe4>
 80048e0:	68ba      	ldr	r2, [r7, #8]
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	dc01      	bgt.n	80048ec <ssd1306_DrawCircle+0xe4>
                e2 = 0;
 80048e8:	2300      	movs	r3, #0
 80048ea:	60bb      	str	r3, [r7, #8]
            }
        }

        if (e2 > x) {
 80048ec:	68ba      	ldr	r2, [r7, #8]
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	dd08      	ble.n	8004906 <ssd1306_DrawCircle+0xfe>
            x++;
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	3301      	adds	r3, #1
 80048f8:	617b      	str	r3, [r7, #20]
            err = err + (x * 2 + 1);
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	005b      	lsls	r3, r3, #1
 80048fe:	3301      	adds	r3, #1
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	4413      	add	r3, r2
 8004904:	60fb      	str	r3, [r7, #12]
        }
    } while (x <= 0);
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	2b00      	cmp	r3, #0
 800490a:	dd9d      	ble.n	8004848 <ssd1306_DrawCircle+0x40>

    return;
 800490c:	e000      	b.n	8004910 <ssd1306_DrawCircle+0x108>
        return;
 800490e:	bf00      	nop
}
 8004910:	371c      	adds	r7, #28
 8004912:	46bd      	mov	sp, r7
 8004914:	bd90      	pop	{r4, r7, pc}

08004916 <ssd1306_FillCircle>:

/* Draw filled circle. Pixel positions calculated using Bresenham's algorithm */
void ssd1306_FillCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8004916:	b590      	push	{r4, r7, lr}
 8004918:	b089      	sub	sp, #36	@ 0x24
 800491a:	af00      	add	r7, sp, #0
 800491c:	4604      	mov	r4, r0
 800491e:	4608      	mov	r0, r1
 8004920:	4611      	mov	r1, r2
 8004922:	461a      	mov	r2, r3
 8004924:	4623      	mov	r3, r4
 8004926:	71fb      	strb	r3, [r7, #7]
 8004928:	4603      	mov	r3, r0
 800492a:	71bb      	strb	r3, [r7, #6]
 800492c:	460b      	mov	r3, r1
 800492e:	717b      	strb	r3, [r7, #5]
 8004930:	4613      	mov	r3, r2
 8004932:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 8004934:	797b      	ldrb	r3, [r7, #5]
 8004936:	425b      	negs	r3, r3
 8004938:	61fb      	str	r3, [r7, #28]
    int32_t y = 0;
 800493a:	2300      	movs	r3, #0
 800493c:	61bb      	str	r3, [r7, #24]
    int32_t err = 2 - 2 * par_r;
 800493e:	797b      	ldrb	r3, [r7, #5]
 8004940:	f1c3 0301 	rsb	r3, r3, #1
 8004944:	005b      	lsls	r3, r3, #1
 8004946:	617b      	str	r3, [r7, #20]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 8004948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800494c:	2b00      	cmp	r3, #0
 800494e:	db51      	blt.n	80049f4 <ssd1306_FillCircle+0xde>
 8004950:	79bb      	ldrb	r3, [r7, #6]
 8004952:	2b1f      	cmp	r3, #31
 8004954:	d84e      	bhi.n	80049f4 <ssd1306_FillCircle+0xde>
        return;
    }

    do {
        for (uint8_t _y = (par_y + y); _y >= (par_y - y); _y--) {
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	b2da      	uxtb	r2, r3
 800495a:	79bb      	ldrb	r3, [r7, #6]
 800495c:	4413      	add	r3, r2
 800495e:	73fb      	strb	r3, [r7, #15]
 8004960:	e017      	b.n	8004992 <ssd1306_FillCircle+0x7c>
            for (uint8_t _x = (par_x - x); _x >= (par_x + x); _x--) {
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	b2db      	uxtb	r3, r3
 8004966:	79fa      	ldrb	r2, [r7, #7]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	73bb      	strb	r3, [r7, #14]
 800496c:	e008      	b.n	8004980 <ssd1306_FillCircle+0x6a>
                ssd1306_DrawPixel(_x, _y, par_color);
 800496e:	793a      	ldrb	r2, [r7, #4]
 8004970:	7bf9      	ldrb	r1, [r7, #15]
 8004972:	7bbb      	ldrb	r3, [r7, #14]
 8004974:	4618      	mov	r0, r3
 8004976:	f7ff fb17 	bl	8003fa8 <ssd1306_DrawPixel>
            for (uint8_t _x = (par_x - x); _x >= (par_x + x); _x--) {
 800497a:	7bbb      	ldrb	r3, [r7, #14]
 800497c:	3b01      	subs	r3, #1
 800497e:	73bb      	strb	r3, [r7, #14]
 8004980:	7bba      	ldrb	r2, [r7, #14]
 8004982:	79f9      	ldrb	r1, [r7, #7]
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	440b      	add	r3, r1
 8004988:	429a      	cmp	r2, r3
 800498a:	daf0      	bge.n	800496e <ssd1306_FillCircle+0x58>
        for (uint8_t _y = (par_y + y); _y >= (par_y - y); _y--) {
 800498c:	7bfb      	ldrb	r3, [r7, #15]
 800498e:	3b01      	subs	r3, #1
 8004990:	73fb      	strb	r3, [r7, #15]
 8004992:	7bfa      	ldrb	r2, [r7, #15]
 8004994:	79b9      	ldrb	r1, [r7, #6]
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	1acb      	subs	r3, r1, r3
 800499a:	429a      	cmp	r2, r3
 800499c:	dae1      	bge.n	8004962 <ssd1306_FillCircle+0x4c>
            }
        }

        e2 = err;
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	613b      	str	r3, [r7, #16]
        if (e2 <= y) {
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	dc13      	bgt.n	80049d2 <ssd1306_FillCircle+0xbc>
            y++;
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	3301      	adds	r3, #1
 80049ae:	61bb      	str	r3, [r7, #24]
            err = err + (y * 2 + 1);
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	005b      	lsls	r3, r3, #1
 80049b4:	3301      	adds	r3, #1
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	4413      	add	r3, r2
 80049ba:	617b      	str	r3, [r7, #20]
            if (-x == y && e2 <= x) {
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	425b      	negs	r3, r3
 80049c0:	69ba      	ldr	r2, [r7, #24]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d105      	bne.n	80049d2 <ssd1306_FillCircle+0xbc>
 80049c6:	693a      	ldr	r2, [r7, #16]
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	dc01      	bgt.n	80049d2 <ssd1306_FillCircle+0xbc>
                e2 = 0;
 80049ce:	2300      	movs	r3, #0
 80049d0:	613b      	str	r3, [r7, #16]
            }
        }

        if (e2 > x) {
 80049d2:	693a      	ldr	r2, [r7, #16]
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	dd08      	ble.n	80049ec <ssd1306_FillCircle+0xd6>
            x++;
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	3301      	adds	r3, #1
 80049de:	61fb      	str	r3, [r7, #28]
            err = err + (x * 2 + 1);
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	005b      	lsls	r3, r3, #1
 80049e4:	3301      	adds	r3, #1
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	4413      	add	r3, r2
 80049ea:	617b      	str	r3, [r7, #20]
        }
    } while (x <= 0);
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	ddb1      	ble.n	8004956 <ssd1306_FillCircle+0x40>

    return;
 80049f2:	e000      	b.n	80049f6 <ssd1306_FillCircle+0xe0>
        return;
 80049f4:	bf00      	nop
}
 80049f6:	3724      	adds	r7, #36	@ 0x24
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd90      	pop	{r4, r7, pc}

080049fc <ssd1306_DrawRectangle>:

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80049fc:	b590      	push	{r4, r7, lr}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af02      	add	r7, sp, #8
 8004a02:	4604      	mov	r4, r0
 8004a04:	4608      	mov	r0, r1
 8004a06:	4611      	mov	r1, r2
 8004a08:	461a      	mov	r2, r3
 8004a0a:	4623      	mov	r3, r4
 8004a0c:	71fb      	strb	r3, [r7, #7]
 8004a0e:	4603      	mov	r3, r0
 8004a10:	71bb      	strb	r3, [r7, #6]
 8004a12:	460b      	mov	r3, r1
 8004a14:	717b      	strb	r3, [r7, #5]
 8004a16:	4613      	mov	r3, r2
 8004a18:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 8004a1a:	79bc      	ldrb	r4, [r7, #6]
 8004a1c:	797a      	ldrb	r2, [r7, #5]
 8004a1e:	79b9      	ldrb	r1, [r7, #6]
 8004a20:	79f8      	ldrb	r0, [r7, #7]
 8004a22:	7e3b      	ldrb	r3, [r7, #24]
 8004a24:	9300      	str	r3, [sp, #0]
 8004a26:	4623      	mov	r3, r4
 8004a28:	f7ff fbe2 	bl	80041f0 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8004a2c:	793c      	ldrb	r4, [r7, #4]
 8004a2e:	797a      	ldrb	r2, [r7, #5]
 8004a30:	79b9      	ldrb	r1, [r7, #6]
 8004a32:	7978      	ldrb	r0, [r7, #5]
 8004a34:	7e3b      	ldrb	r3, [r7, #24]
 8004a36:	9300      	str	r3, [sp, #0]
 8004a38:	4623      	mov	r3, r4
 8004a3a:	f7ff fbd9 	bl	80041f0 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8004a3e:	793c      	ldrb	r4, [r7, #4]
 8004a40:	79fa      	ldrb	r2, [r7, #7]
 8004a42:	7939      	ldrb	r1, [r7, #4]
 8004a44:	7978      	ldrb	r0, [r7, #5]
 8004a46:	7e3b      	ldrb	r3, [r7, #24]
 8004a48:	9300      	str	r3, [sp, #0]
 8004a4a:	4623      	mov	r3, r4
 8004a4c:	f7ff fbd0 	bl	80041f0 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 8004a50:	79bc      	ldrb	r4, [r7, #6]
 8004a52:	79fa      	ldrb	r2, [r7, #7]
 8004a54:	7939      	ldrb	r1, [r7, #4]
 8004a56:	79f8      	ldrb	r0, [r7, #7]
 8004a58:	7e3b      	ldrb	r3, [r7, #24]
 8004a5a:	9300      	str	r3, [sp, #0]
 8004a5c:	4623      	mov	r3, r4
 8004a5e:	f7ff fbc7 	bl	80041f0 <ssd1306_Line>

    return;
 8004a62:	bf00      	nop
}
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd90      	pop	{r4, r7, pc}

08004a6a <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8004a6a:	b590      	push	{r4, r7, lr}
 8004a6c:	b085      	sub	sp, #20
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	4604      	mov	r4, r0
 8004a72:	4608      	mov	r0, r1
 8004a74:	4611      	mov	r1, r2
 8004a76:	461a      	mov	r2, r3
 8004a78:	4623      	mov	r3, r4
 8004a7a:	71fb      	strb	r3, [r7, #7]
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	71bb      	strb	r3, [r7, #6]
 8004a80:	460b      	mov	r3, r1
 8004a82:	717b      	strb	r3, [r7, #5]
 8004a84:	4613      	mov	r3, r2
 8004a86:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8004a88:	79fa      	ldrb	r2, [r7, #7]
 8004a8a:	797b      	ldrb	r3, [r7, #5]
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	bf28      	it	cs
 8004a90:	4613      	movcs	r3, r2
 8004a92:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8004a94:	797a      	ldrb	r2, [r7, #5]
 8004a96:	79fb      	ldrb	r3, [r7, #7]
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	bf38      	it	cc
 8004a9c:	4613      	movcc	r3, r2
 8004a9e:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8004aa0:	79ba      	ldrb	r2, [r7, #6]
 8004aa2:	793b      	ldrb	r3, [r7, #4]
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	bf28      	it	cs
 8004aa8:	4613      	movcs	r3, r2
 8004aaa:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8004aac:	793a      	ldrb	r2, [r7, #4]
 8004aae:	79bb      	ldrb	r3, [r7, #6]
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	bf38      	it	cc
 8004ab4:	4613      	movcc	r3, r2
 8004ab6:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8004ab8:	7afb      	ldrb	r3, [r7, #11]
 8004aba:	73fb      	strb	r3, [r7, #15]
 8004abc:	e017      	b.n	8004aee <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8004abe:	7b7b      	ldrb	r3, [r7, #13]
 8004ac0:	73bb      	strb	r3, [r7, #14]
 8004ac2:	e009      	b.n	8004ad8 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8004ac4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004ac8:	7bf9      	ldrb	r1, [r7, #15]
 8004aca:	7bbb      	ldrb	r3, [r7, #14]
 8004acc:	4618      	mov	r0, r3
 8004ace:	f7ff fa6b 	bl	8003fa8 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8004ad2:	7bbb      	ldrb	r3, [r7, #14]
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	73bb      	strb	r3, [r7, #14]
 8004ad8:	7bba      	ldrb	r2, [r7, #14]
 8004ada:	7b3b      	ldrb	r3, [r7, #12]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d803      	bhi.n	8004ae8 <ssd1306_FillRectangle+0x7e>
 8004ae0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	daed      	bge.n	8004ac4 <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8004ae8:	7bfb      	ldrb	r3, [r7, #15]
 8004aea:	3301      	adds	r3, #1
 8004aec:	73fb      	strb	r3, [r7, #15]
 8004aee:	7bfa      	ldrb	r2, [r7, #15]
 8004af0:	7abb      	ldrb	r3, [r7, #10]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d803      	bhi.n	8004afe <ssd1306_FillRectangle+0x94>
 8004af6:	7bfb      	ldrb	r3, [r7, #15]
 8004af8:	2b1f      	cmp	r3, #31
 8004afa:	d9e0      	bls.n	8004abe <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8004afc:	bf00      	nop
 8004afe:	bf00      	nop
}
 8004b00:	3714      	adds	r7, #20
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd90      	pop	{r4, r7, pc}
	...

08004b08 <ssd1306_InvertRectangle>:

SSD1306_Error_t ssd1306_InvertRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
 8004b08:	b490      	push	{r4, r7}
 8004b0a:	b086      	sub	sp, #24
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	4604      	mov	r4, r0
 8004b10:	4608      	mov	r0, r1
 8004b12:	4611      	mov	r1, r2
 8004b14:	461a      	mov	r2, r3
 8004b16:	4623      	mov	r3, r4
 8004b18:	71fb      	strb	r3, [r7, #7]
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	71bb      	strb	r3, [r7, #6]
 8004b1e:	460b      	mov	r3, r1
 8004b20:	717b      	strb	r3, [r7, #5]
 8004b22:	4613      	mov	r3, r2
 8004b24:	713b      	strb	r3, [r7, #4]
  if ((x2 >= SSD1306_WIDTH) || (y2 >= SSD1306_HEIGHT)) {
 8004b26:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	db02      	blt.n	8004b34 <ssd1306_InvertRectangle+0x2c>
 8004b2e:	793b      	ldrb	r3, [r7, #4]
 8004b30:	2b1f      	cmp	r3, #31
 8004b32:	d901      	bls.n	8004b38 <ssd1306_InvertRectangle+0x30>
    return SSD1306_ERR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e09c      	b.n	8004c72 <ssd1306_InvertRectangle+0x16a>
  }
  if ((x1 > x2) || (y1 > y2)) {
 8004b38:	79fa      	ldrb	r2, [r7, #7]
 8004b3a:	797b      	ldrb	r3, [r7, #5]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d803      	bhi.n	8004b48 <ssd1306_InvertRectangle+0x40>
 8004b40:	79ba      	ldrb	r2, [r7, #6]
 8004b42:	793b      	ldrb	r3, [r7, #4]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d901      	bls.n	8004b4c <ssd1306_InvertRectangle+0x44>
    return SSD1306_ERR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e092      	b.n	8004c72 <ssd1306_InvertRectangle+0x16a>
  }
  uint32_t i;
  if ((y1 / 8) != (y2 / 8)) {
 8004b4c:	79bb      	ldrb	r3, [r7, #6]
 8004b4e:	08db      	lsrs	r3, r3, #3
 8004b50:	b2da      	uxtb	r2, r3
 8004b52:	793b      	ldrb	r3, [r7, #4]
 8004b54:	08db      	lsrs	r3, r3, #3
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d057      	beq.n	8004c0c <ssd1306_InvertRectangle+0x104>
    /* if rectangle doesn't lie on one 8px row */
    for (uint32_t x = x1; x <= x2; x++) {
 8004b5c:	79fb      	ldrb	r3, [r7, #7]
 8004b5e:	613b      	str	r3, [r7, #16]
 8004b60:	e04f      	b.n	8004c02 <ssd1306_InvertRectangle+0xfa>
      i = x + (y1 / 8) * SSD1306_WIDTH;
 8004b62:	79bb      	ldrb	r3, [r7, #6]
 8004b64:	08db      	lsrs	r3, r3, #3
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	01db      	lsls	r3, r3, #7
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	4413      	add	r3, r2
 8004b70:	617b      	str	r3, [r7, #20]
      SSD1306_Buffer[i] ^= 0xFF << (y1 % 8);
 8004b72:	4a42      	ldr	r2, [pc, #264]	@ (8004c7c <ssd1306_InvertRectangle+0x174>)
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	4413      	add	r3, r2
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	b25a      	sxtb	r2, r3
 8004b7c:	79bb      	ldrb	r3, [r7, #6]
 8004b7e:	f003 0307 	and.w	r3, r3, #7
 8004b82:	21ff      	movs	r1, #255	@ 0xff
 8004b84:	fa01 f303 	lsl.w	r3, r1, r3
 8004b88:	b25b      	sxtb	r3, r3
 8004b8a:	4053      	eors	r3, r2
 8004b8c:	b25b      	sxtb	r3, r3
 8004b8e:	b2d9      	uxtb	r1, r3
 8004b90:	4a3a      	ldr	r2, [pc, #232]	@ (8004c7c <ssd1306_InvertRectangle+0x174>)
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	4413      	add	r3, r2
 8004b96:	460a      	mov	r2, r1
 8004b98:	701a      	strb	r2, [r3, #0]
      i += SSD1306_WIDTH;
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	3380      	adds	r3, #128	@ 0x80
 8004b9e:	617b      	str	r3, [r7, #20]
      for (; i < x + (y2 / 8) * SSD1306_WIDTH; i += SSD1306_WIDTH) {
 8004ba0:	e00d      	b.n	8004bbe <ssd1306_InvertRectangle+0xb6>
        SSD1306_Buffer[i] ^= 0xFF;
 8004ba2:	4a36      	ldr	r2, [pc, #216]	@ (8004c7c <ssd1306_InvertRectangle+0x174>)
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	43db      	mvns	r3, r3
 8004bac:	b2d9      	uxtb	r1, r3
 8004bae:	4a33      	ldr	r2, [pc, #204]	@ (8004c7c <ssd1306_InvertRectangle+0x174>)
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	460a      	mov	r2, r1
 8004bb6:	701a      	strb	r2, [r3, #0]
      for (; i < x + (y2 / 8) * SSD1306_WIDTH; i += SSD1306_WIDTH) {
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	3380      	adds	r3, #128	@ 0x80
 8004bbc:	617b      	str	r3, [r7, #20]
 8004bbe:	793b      	ldrb	r3, [r7, #4]
 8004bc0:	08db      	lsrs	r3, r3, #3
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	01db      	lsls	r3, r3, #7
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	4413      	add	r3, r2
 8004bcc:	697a      	ldr	r2, [r7, #20]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d3e7      	bcc.n	8004ba2 <ssd1306_InvertRectangle+0x9a>
      }
      SSD1306_Buffer[i] ^= 0xFF >> (7 - (y2 % 8));
 8004bd2:	4a2a      	ldr	r2, [pc, #168]	@ (8004c7c <ssd1306_InvertRectangle+0x174>)
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	b25a      	sxtb	r2, r3
 8004bdc:	793b      	ldrb	r3, [r7, #4]
 8004bde:	43db      	mvns	r3, r3
 8004be0:	f003 0307 	and.w	r3, r3, #7
 8004be4:	21ff      	movs	r1, #255	@ 0xff
 8004be6:	fa41 f303 	asr.w	r3, r1, r3
 8004bea:	b25b      	sxtb	r3, r3
 8004bec:	4053      	eors	r3, r2
 8004bee:	b25b      	sxtb	r3, r3
 8004bf0:	b2d9      	uxtb	r1, r3
 8004bf2:	4a22      	ldr	r2, [pc, #136]	@ (8004c7c <ssd1306_InvertRectangle+0x174>)
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	460a      	mov	r2, r1
 8004bfa:	701a      	strb	r2, [r3, #0]
    for (uint32_t x = x1; x <= x2; x++) {
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	3301      	adds	r3, #1
 8004c00:	613b      	str	r3, [r7, #16]
 8004c02:	797b      	ldrb	r3, [r7, #5]
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d9ab      	bls.n	8004b62 <ssd1306_InvertRectangle+0x5a>
 8004c0a:	e031      	b.n	8004c70 <ssd1306_InvertRectangle+0x168>
    }
  } else {
    /* if rectangle lies on one 8px row */
    const uint8_t mask = (0xFF << (y1 % 8)) & (0xFF >> (7 - (y2 % 8)));
 8004c0c:	79bb      	ldrb	r3, [r7, #6]
 8004c0e:	f003 0307 	and.w	r3, r3, #7
 8004c12:	22ff      	movs	r2, #255	@ 0xff
 8004c14:	fa02 f303 	lsl.w	r3, r2, r3
 8004c18:	b25a      	sxtb	r2, r3
 8004c1a:	793b      	ldrb	r3, [r7, #4]
 8004c1c:	43db      	mvns	r3, r3
 8004c1e:	f003 0307 	and.w	r3, r3, #7
 8004c22:	21ff      	movs	r1, #255	@ 0xff
 8004c24:	fa41 f303 	asr.w	r3, r1, r3
 8004c28:	b25b      	sxtb	r3, r3
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	b25b      	sxtb	r3, r3
 8004c2e:	73fb      	strb	r3, [r7, #15]
    for (i = x1 + (y1 / 8) * SSD1306_WIDTH;
 8004c30:	79fa      	ldrb	r2, [r7, #7]
 8004c32:	79bb      	ldrb	r3, [r7, #6]
 8004c34:	08db      	lsrs	r3, r3, #3
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	01db      	lsls	r3, r3, #7
 8004c3a:	4413      	add	r3, r2
 8004c3c:	617b      	str	r3, [r7, #20]
 8004c3e:	e00e      	b.n	8004c5e <ssd1306_InvertRectangle+0x156>
         i <= (uint32_t)x2 + (y2 / 8) * SSD1306_WIDTH; i++) {
      SSD1306_Buffer[i] ^= mask;
 8004c40:	4a0e      	ldr	r2, [pc, #56]	@ (8004c7c <ssd1306_InvertRectangle+0x174>)
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	4413      	add	r3, r2
 8004c46:	781a      	ldrb	r2, [r3, #0]
 8004c48:	7bfb      	ldrb	r3, [r7, #15]
 8004c4a:	4053      	eors	r3, r2
 8004c4c:	b2d9      	uxtb	r1, r3
 8004c4e:	4a0b      	ldr	r2, [pc, #44]	@ (8004c7c <ssd1306_InvertRectangle+0x174>)
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	4413      	add	r3, r2
 8004c54:	460a      	mov	r2, r1
 8004c56:	701a      	strb	r2, [r3, #0]
         i <= (uint32_t)x2 + (y2 / 8) * SSD1306_WIDTH; i++) {
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	617b      	str	r3, [r7, #20]
 8004c5e:	797b      	ldrb	r3, [r7, #5]
 8004c60:	793a      	ldrb	r2, [r7, #4]
 8004c62:	08d2      	lsrs	r2, r2, #3
 8004c64:	b2d2      	uxtb	r2, r2
 8004c66:	01d2      	lsls	r2, r2, #7
 8004c68:	4413      	add	r3, r2
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d9e7      	bls.n	8004c40 <ssd1306_InvertRectangle+0x138>
    }
  }
  return SSD1306_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3718      	adds	r7, #24
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bc90      	pop	{r4, r7}
 8004c7a:	4770      	bx	lr
 8004c7c:	20000080 	.word	0x20000080

08004c80 <ssd1306_DrawBitmap>:

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	603a      	str	r2, [r7, #0]
 8004c88:	461a      	mov	r2, r3
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	71fb      	strb	r3, [r7, #7]
 8004c8e:	460b      	mov	r3, r1
 8004c90:	71bb      	strb	r3, [r7, #6]
 8004c92:	4613      	mov	r3, r2
 8004c94:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8004c96:	797b      	ldrb	r3, [r7, #5]
 8004c98:	3307      	adds	r3, #7
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	da00      	bge.n	8004ca0 <ssd1306_DrawBitmap+0x20>
 8004c9e:	3307      	adds	r3, #7
 8004ca0:	10db      	asrs	r3, r3, #3
 8004ca2:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8004ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	db3e      	blt.n	8004d2e <ssd1306_DrawBitmap+0xae>
 8004cb0:	79bb      	ldrb	r3, [r7, #6]
 8004cb2:	2b1f      	cmp	r3, #31
 8004cb4:	d83b      	bhi.n	8004d2e <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	73bb      	strb	r3, [r7, #14]
 8004cba:	e033      	b.n	8004d24 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	737b      	strb	r3, [r7, #13]
 8004cc0:	e026      	b.n	8004d10 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8004cc2:	7b7b      	ldrb	r3, [r7, #13]
 8004cc4:	f003 0307 	and.w	r3, r3, #7
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d003      	beq.n	8004cd4 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8004ccc:	7bfb      	ldrb	r3, [r7, #15]
 8004cce:	005b      	lsls	r3, r3, #1
 8004cd0:	73fb      	strb	r3, [r7, #15]
 8004cd2:	e00d      	b.n	8004cf0 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8004cd4:	7bbb      	ldrb	r3, [r7, #14]
 8004cd6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004cda:	fb02 f303 	mul.w	r3, r2, r3
 8004cde:	7b7a      	ldrb	r2, [r7, #13]
 8004ce0:	08d2      	lsrs	r2, r2, #3
 8004ce2:	b2d2      	uxtb	r2, r2
 8004ce4:	4413      	add	r3, r2
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	4413      	add	r3, r2
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8004cf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	da08      	bge.n	8004d0a <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8004cf8:	79fa      	ldrb	r2, [r7, #7]
 8004cfa:	7b7b      	ldrb	r3, [r7, #13]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	7f3a      	ldrb	r2, [r7, #28]
 8004d02:	79b9      	ldrb	r1, [r7, #6]
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7ff f94f 	bl	8003fa8 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8004d0a:	7b7b      	ldrb	r3, [r7, #13]
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	737b      	strb	r3, [r7, #13]
 8004d10:	7b7a      	ldrb	r2, [r7, #13]
 8004d12:	797b      	ldrb	r3, [r7, #5]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d3d4      	bcc.n	8004cc2 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8004d18:	7bbb      	ldrb	r3, [r7, #14]
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	73bb      	strb	r3, [r7, #14]
 8004d1e:	79bb      	ldrb	r3, [r7, #6]
 8004d20:	3301      	adds	r3, #1
 8004d22:	71bb      	strb	r3, [r7, #6]
 8004d24:	7bba      	ldrb	r2, [r7, #14]
 8004d26:	7e3b      	ldrb	r3, [r7, #24]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d3c7      	bcc.n	8004cbc <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8004d2c:	e000      	b.n	8004d30 <ssd1306_DrawBitmap+0xb0>
        return;
 8004d2e:	bf00      	nop
}
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}

08004d36 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b084      	sub	sp, #16
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8004d40:	2381      	movs	r3, #129	@ 0x81
 8004d42:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8004d44:	7bfb      	ldrb	r3, [r7, #15]
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7ff f852 	bl	8003df0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8004d4c:	79fb      	ldrb	r3, [r7, #7]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7ff f84e 	bl	8003df0 <ssd1306_WriteCommand>
}
 8004d54:	bf00      	nop
 8004d56:	3710      	adds	r7, #16
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	4603      	mov	r3, r0
 8004d64:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8004d66:	79fb      	ldrb	r3, [r7, #7]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d005      	beq.n	8004d78 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8004d6c:	23af      	movs	r3, #175	@ 0xaf
 8004d6e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8004d70:	4b08      	ldr	r3, [pc, #32]	@ (8004d94 <ssd1306_SetDisplayOn+0x38>)
 8004d72:	2201      	movs	r2, #1
 8004d74:	715a      	strb	r2, [r3, #5]
 8004d76:	e004      	b.n	8004d82 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8004d78:	23ae      	movs	r3, #174	@ 0xae
 8004d7a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8004d7c:	4b05      	ldr	r3, [pc, #20]	@ (8004d94 <ssd1306_SetDisplayOn+0x38>)
 8004d7e:	2200      	movs	r2, #0
 8004d80:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8004d82:	7bfb      	ldrb	r3, [r7, #15]
 8004d84:	4618      	mov	r0, r3
 8004d86:	f7ff f833 	bl	8003df0 <ssd1306_WriteCommand>
}
 8004d8a:	bf00      	nop
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	20000280 	.word	0x20000280

08004d98 <ssd1306_TestFonts2>:
}

/*
 * This test shows how an 128x64 px OLED can replace a 0802 LCD.
 */
void ssd1306_TestFonts2() {
 8004d98:	b590      	push	{r4, r7, lr}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af02      	add	r7, sp, #8
#ifdef SSD1306_INCLUDE_FONT_16x24
    uint8_t x1, y1, x2, y2;

    ssd1306_Fill(Black);
 8004d9e:	2000      	movs	r0, #0
 8004da0:	f7ff f8c2 	bl	8003f28 <ssd1306_Fill>

    ssd1306_SetCursor(0, 4);
 8004da4:	2104      	movs	r1, #4
 8004da6:	2000      	movs	r0, #0
 8004da8:	f7ff fa0a 	bl	80041c0 <ssd1306_SetCursor>
    ssd1306_WriteString("18.092.5", Font_16x24, White);
 8004dac:	4b14      	ldr	r3, [pc, #80]	@ (8004e00 <ssd1306_TestFonts2+0x68>)
 8004dae:	2201      	movs	r2, #1
 8004db0:	9200      	str	r2, [sp, #0]
 8004db2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004db4:	4813      	ldr	r0, [pc, #76]	@ (8004e04 <ssd1306_TestFonts2+0x6c>)
 8004db6:	f7ff f9dd 	bl	8004174 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 4+24+8);
 8004dba:	2124      	movs	r1, #36	@ 0x24
 8004dbc:	2000      	movs	r0, #0
 8004dbe:	f7ff f9ff 	bl	80041c0 <ssd1306_SetCursor>
    ssd1306_WriteString("RIT+1000", Font_16x24, White);
 8004dc2:	4b0f      	ldr	r3, [pc, #60]	@ (8004e00 <ssd1306_TestFonts2+0x68>)
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	9200      	str	r2, [sp, #0]
 8004dc8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004dca:	480f      	ldr	r0, [pc, #60]	@ (8004e08 <ssd1306_TestFonts2+0x70>)
 8004dcc:	f7ff f9d2 	bl	8004174 <ssd1306_WriteString>

    // underline
    x1 = 6*16;
 8004dd0:	2360      	movs	r3, #96	@ 0x60
 8004dd2:	71fb      	strb	r3, [r7, #7]
    y1 = 4+24+8+24;
 8004dd4:	233c      	movs	r3, #60	@ 0x3c
 8004dd6:	71bb      	strb	r3, [r7, #6]
    x2 = x1+16;
 8004dd8:	79fb      	ldrb	r3, [r7, #7]
 8004dda:	3310      	adds	r3, #16
 8004ddc:	717b      	strb	r3, [r7, #5]
    y2 = y1+2;
 8004dde:	79bb      	ldrb	r3, [r7, #6]
 8004de0:	3302      	adds	r3, #2
 8004de2:	713b      	strb	r3, [r7, #4]
    ssd1306_FillRectangle(x1, y1, x2, y2, White);
 8004de4:	793b      	ldrb	r3, [r7, #4]
 8004de6:	797a      	ldrb	r2, [r7, #5]
 8004de8:	79b9      	ldrb	r1, [r7, #6]
 8004dea:	79f8      	ldrb	r0, [r7, #7]
 8004dec:	2401      	movs	r4, #1
 8004dee:	9400      	str	r4, [sp, #0]
 8004df0:	f7ff fe3b 	bl	8004a6a <ssd1306_FillRectangle>

    ssd1306_UpdateScreen();
 8004df4:	f7ff f8b0 	bl	8003f58 <ssd1306_UpdateScreen>
#endif
}
 8004df8:	bf00      	nop
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd90      	pop	{r4, r7, pc}
 8004e00:	08007d18 	.word	0x08007d18
 8004e04:	08005d2c 	.word	0x08005d2c
 8004e08:	08005d38 	.word	0x08005d38

08004e0c <ssd1306_TestLine>:
    ssd1306_SetCursor(2, 2);
    ssd1306_WriteString(buff, Font_11x18, Black);
    ssd1306_UpdateScreen();
}

void ssd1306_TestLine() {
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af02      	add	r7, sp, #8

  ssd1306_Line(1,1,SSD1306_WIDTH - 1,SSD1306_HEIGHT - 1,White);
 8004e12:	2301      	movs	r3, #1
 8004e14:	9300      	str	r3, [sp, #0]
 8004e16:	231f      	movs	r3, #31
 8004e18:	227f      	movs	r2, #127	@ 0x7f
 8004e1a:	2101      	movs	r1, #1
 8004e1c:	2001      	movs	r0, #1
 8004e1e:	f7ff f9e7 	bl	80041f0 <ssd1306_Line>
  ssd1306_Line(SSD1306_WIDTH - 1,1,1,SSD1306_HEIGHT - 1,White);
 8004e22:	2301      	movs	r3, #1
 8004e24:	9300      	str	r3, [sp, #0]
 8004e26:	231f      	movs	r3, #31
 8004e28:	2201      	movs	r2, #1
 8004e2a:	2101      	movs	r1, #1
 8004e2c:	207f      	movs	r0, #127	@ 0x7f
 8004e2e:	f7ff f9df 	bl	80041f0 <ssd1306_Line>
  ssd1306_UpdateScreen();
 8004e32:	f7ff f891 	bl	8003f58 <ssd1306_UpdateScreen>
  return;
 8004e36:	bf00      	nop
}
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <ssd1306_TestRectangle>:

void ssd1306_TestRectangle() {
 8004e3c:	b590      	push	{r4, r7, lr}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af02      	add	r7, sp, #8
  uint32_t delta;

  for(delta = 0; delta < 5; delta ++) {
 8004e42:	2300      	movs	r3, #0
 8004e44:	607b      	str	r3, [r7, #4]
 8004e46:	e028      	b.n	8004e9a <ssd1306_TestRectangle+0x5e>
    ssd1306_DrawRectangle(1 + (5*delta),1 + (5*delta) ,SSD1306_WIDTH-1 - (5*delta),SSD1306_HEIGHT-1 - (5*delta),White);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	0092      	lsls	r2, r2, #2
 8004e50:	4413      	add	r3, r2
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	3301      	adds	r3, #1
 8004e56:	b2d8      	uxtb	r0, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	0092      	lsls	r2, r2, #2
 8004e60:	4413      	add	r3, r2
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	3301      	adds	r3, #1
 8004e66:	b2d9      	uxtb	r1, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	0092      	lsls	r2, r2, #2
 8004e70:	4413      	add	r3, r2
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8004e78:	b2da      	uxtb	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	461c      	mov	r4, r3
 8004e80:	00a4      	lsls	r4, r4, #2
 8004e82:	4423      	add	r3, r4
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	f1c3 031f 	rsb	r3, r3, #31
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	2401      	movs	r4, #1
 8004e8e:	9400      	str	r4, [sp, #0]
 8004e90:	f7ff fdb4 	bl	80049fc <ssd1306_DrawRectangle>
  for(delta = 0; delta < 5; delta ++) {
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	3301      	adds	r3, #1
 8004e98:	607b      	str	r3, [r7, #4]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2b04      	cmp	r3, #4
 8004e9e:	d9d3      	bls.n	8004e48 <ssd1306_TestRectangle+0xc>
  }
  ssd1306_UpdateScreen();
 8004ea0:	f7ff f85a 	bl	8003f58 <ssd1306_UpdateScreen>
  return;
 8004ea4:	bf00      	nop
}
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd90      	pop	{r4, r7, pc}

08004eac <ssd1306_TestRectangleFill>:

void ssd1306_TestRectangleFill() {
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af02      	add	r7, sp, #8
  ssd1306_FillRectangle(31, 1, 65, 35, White);
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	9300      	str	r3, [sp, #0]
 8004eb6:	2323      	movs	r3, #35	@ 0x23
 8004eb8:	2241      	movs	r2, #65	@ 0x41
 8004eba:	2101      	movs	r1, #1
 8004ebc:	201f      	movs	r0, #31
 8004ebe:	f7ff fdd4 	bl	8004a6a <ssd1306_FillRectangle>
  ssd1306_FillRectangle(10, 45, 70, 60, White);
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	9300      	str	r3, [sp, #0]
 8004ec6:	233c      	movs	r3, #60	@ 0x3c
 8004ec8:	2246      	movs	r2, #70	@ 0x46
 8004eca:	212d      	movs	r1, #45	@ 0x2d
 8004ecc:	200a      	movs	r0, #10
 8004ece:	f7ff fdcc 	bl	8004a6a <ssd1306_FillRectangle>
  ssd1306_FillRectangle(75, 10, 100, 45, White);
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	9300      	str	r3, [sp, #0]
 8004ed6:	232d      	movs	r3, #45	@ 0x2d
 8004ed8:	2264      	movs	r2, #100	@ 0x64
 8004eda:	210a      	movs	r1, #10
 8004edc:	204b      	movs	r0, #75	@ 0x4b
 8004ede:	f7ff fdc4 	bl	8004a6a <ssd1306_FillRectangle>
  ssd1306_FillRectangle(55, 30, 80, 55, Black);
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	9300      	str	r3, [sp, #0]
 8004ee6:	2337      	movs	r3, #55	@ 0x37
 8004ee8:	2250      	movs	r2, #80	@ 0x50
 8004eea:	211e      	movs	r1, #30
 8004eec:	2037      	movs	r0, #55	@ 0x37
 8004eee:	f7ff fdbc 	bl	8004a6a <ssd1306_FillRectangle>
  ssd1306_UpdateScreen();
 8004ef2:	f7ff f831 	bl	8003f58 <ssd1306_UpdateScreen>
}
 8004ef6:	bf00      	nop
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <ssd1306_TestRectangleInvert>:

void ssd1306_TestRectangleInvert() {
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af02      	add	r7, sp, #8
#ifdef SSD1306_INCLUDE_FONT_11x18
  ssd1306_SetCursor(2, 0);
 8004f02:	2100      	movs	r1, #0
 8004f04:	2002      	movs	r0, #2
 8004f06:	f7ff f95b 	bl	80041c0 <ssd1306_SetCursor>
  ssd1306_WriteString("Black", Font_11x18, White);
 8004f0a:	4b27      	ldr	r3, [pc, #156]	@ (8004fa8 <ssd1306_TestRectangleInvert+0xac>)
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	9200      	str	r2, [sp, #0]
 8004f10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f12:	4826      	ldr	r0, [pc, #152]	@ (8004fac <ssd1306_TestRectangleInvert+0xb0>)
 8004f14:	f7ff f92e 	bl	8004174 <ssd1306_WriteString>
  ssd1306_SetCursor(2, 20);
 8004f18:	2114      	movs	r1, #20
 8004f1a:	2002      	movs	r0, #2
 8004f1c:	f7ff f950 	bl	80041c0 <ssd1306_SetCursor>
  ssd1306_WriteString("on", Font_11x18, White);
 8004f20:	4b21      	ldr	r3, [pc, #132]	@ (8004fa8 <ssd1306_TestRectangleInvert+0xac>)
 8004f22:	2201      	movs	r2, #1
 8004f24:	9200      	str	r2, [sp, #0]
 8004f26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f28:	4821      	ldr	r0, [pc, #132]	@ (8004fb0 <ssd1306_TestRectangleInvert+0xb4>)
 8004f2a:	f7ff f923 	bl	8004174 <ssd1306_WriteString>
  ssd1306_SetCursor(2, 40);
 8004f2e:	2128      	movs	r1, #40	@ 0x28
 8004f30:	2002      	movs	r0, #2
 8004f32:	f7ff f945 	bl	80041c0 <ssd1306_SetCursor>
  ssd1306_WriteString("White", Font_11x18, White);
 8004f36:	4b1c      	ldr	r3, [pc, #112]	@ (8004fa8 <ssd1306_TestRectangleInvert+0xac>)
 8004f38:	2201      	movs	r2, #1
 8004f3a:	9200      	str	r2, [sp, #0]
 8004f3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f3e:	481d      	ldr	r0, [pc, #116]	@ (8004fb4 <ssd1306_TestRectangleInvert+0xb8>)
 8004f40:	f7ff f918 	bl	8004174 <ssd1306_WriteString>
  ssd1306_SetCursor(66, 0);
 8004f44:	2100      	movs	r1, #0
 8004f46:	2042      	movs	r0, #66	@ 0x42
 8004f48:	f7ff f93a 	bl	80041c0 <ssd1306_SetCursor>
  ssd1306_WriteString("White", Font_11x18, White);
 8004f4c:	4b16      	ldr	r3, [pc, #88]	@ (8004fa8 <ssd1306_TestRectangleInvert+0xac>)
 8004f4e:	2201      	movs	r2, #1
 8004f50:	9200      	str	r2, [sp, #0]
 8004f52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f54:	4817      	ldr	r0, [pc, #92]	@ (8004fb4 <ssd1306_TestRectangleInvert+0xb8>)
 8004f56:	f7ff f90d 	bl	8004174 <ssd1306_WriteString>
  ssd1306_SetCursor(66, 20);
 8004f5a:	2114      	movs	r1, #20
 8004f5c:	2042      	movs	r0, #66	@ 0x42
 8004f5e:	f7ff f92f 	bl	80041c0 <ssd1306_SetCursor>
  ssd1306_WriteString("on", Font_11x18, White);
 8004f62:	4b11      	ldr	r3, [pc, #68]	@ (8004fa8 <ssd1306_TestRectangleInvert+0xac>)
 8004f64:	2201      	movs	r2, #1
 8004f66:	9200      	str	r2, [sp, #0]
 8004f68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f6a:	4811      	ldr	r0, [pc, #68]	@ (8004fb0 <ssd1306_TestRectangleInvert+0xb4>)
 8004f6c:	f7ff f902 	bl	8004174 <ssd1306_WriteString>
  ssd1306_SetCursor(66, 40);
 8004f70:	2128      	movs	r1, #40	@ 0x28
 8004f72:	2042      	movs	r0, #66	@ 0x42
 8004f74:	f7ff f924 	bl	80041c0 <ssd1306_SetCursor>
  ssd1306_WriteString("Black", Font_11x18, White);
 8004f78:	4b0b      	ldr	r3, [pc, #44]	@ (8004fa8 <ssd1306_TestRectangleInvert+0xac>)
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	9200      	str	r2, [sp, #0]
 8004f7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f80:	480a      	ldr	r0, [pc, #40]	@ (8004fac <ssd1306_TestRectangleInvert+0xb0>)
 8004f82:	f7ff f8f7 	bl	8004174 <ssd1306_WriteString>
#else
  ssd1306_FillCircle(32, 32, 20, White);
  ssd1306_FillCircle(96, 32, 20, White);
#endif
  ssd1306_InvertRectangle(0,0,63,63);
 8004f86:	233f      	movs	r3, #63	@ 0x3f
 8004f88:	223f      	movs	r2, #63	@ 0x3f
 8004f8a:	2100      	movs	r1, #0
 8004f8c:	2000      	movs	r0, #0
 8004f8e:	f7ff fdbb 	bl	8004b08 <ssd1306_InvertRectangle>
  /* Test rectangle lies on one 8px page */
  ssd1306_InvertRectangle(2,58,125,60);
 8004f92:	233c      	movs	r3, #60	@ 0x3c
 8004f94:	227d      	movs	r2, #125	@ 0x7d
 8004f96:	213a      	movs	r1, #58	@ 0x3a
 8004f98:	2002      	movs	r0, #2
 8004f9a:	f7ff fdb5 	bl	8004b08 <ssd1306_InvertRectangle>
  ssd1306_UpdateScreen();
 8004f9e:	f7fe ffdb 	bl	8003f58 <ssd1306_UpdateScreen>
}
 8004fa2:	bf00      	nop
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	08007d0c 	.word	0x08007d0c
 8004fac:	08005da0 	.word	0x08005da0
 8004fb0:	08005da8 	.word	0x08005da8
 8004fb4:	08005dac 	.word	0x08005dac

08004fb8 <ssd1306_TestCircle>:

void ssd1306_TestCircle() {
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
  uint32_t delta;

  for(delta = 0; delta < 5; delta ++) {
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	607b      	str	r3, [r7, #4]
 8004fc2:	e010      	b.n	8004fe6 <ssd1306_TestCircle+0x2e>
    ssd1306_DrawCircle(20*delta+30, 15, 10, White);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	461a      	mov	r2, r3
 8004fca:	0092      	lsls	r2, r2, #2
 8004fcc:	4413      	add	r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	331e      	adds	r3, #30
 8004fd4:	b2d8      	uxtb	r0, r3
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	220a      	movs	r2, #10
 8004fda:	210f      	movs	r1, #15
 8004fdc:	f7ff fc14 	bl	8004808 <ssd1306_DrawCircle>
  for(delta = 0; delta < 5; delta ++) {
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	607b      	str	r3, [r7, #4]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2b04      	cmp	r3, #4
 8004fea:	d9eb      	bls.n	8004fc4 <ssd1306_TestCircle+0xc>
  }

  for(delta = 0; delta < 5; delta ++) {
 8004fec:	2300      	movs	r3, #0
 8004fee:	607b      	str	r3, [r7, #4]
 8004ff0:	e011      	b.n	8005016 <ssd1306_TestCircle+0x5e>
    ssd1306_FillCircle(23*delta+15, 40, 10, White);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	0052      	lsls	r2, r2, #1
 8004ffa:	441a      	add	r2, r3
 8004ffc:	00d2      	lsls	r2, r2, #3
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	b2db      	uxtb	r3, r3
 8005002:	330f      	adds	r3, #15
 8005004:	b2d8      	uxtb	r0, r3
 8005006:	2301      	movs	r3, #1
 8005008:	220a      	movs	r2, #10
 800500a:	2128      	movs	r1, #40	@ 0x28
 800500c:	f7ff fc83 	bl	8004916 <ssd1306_FillCircle>
  for(delta = 0; delta < 5; delta ++) {
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	3301      	adds	r3, #1
 8005014:	607b      	str	r3, [r7, #4]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b04      	cmp	r3, #4
 800501a:	d9ea      	bls.n	8004ff2 <ssd1306_TestCircle+0x3a>
  }

  ssd1306_UpdateScreen();
 800501c:	f7fe ff9c 	bl	8003f58 <ssd1306_UpdateScreen>
  return;
 8005020:	bf00      	nop
}
 8005022:	3708      	adds	r7, #8
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <ssd1306_TestArc>:

void ssd1306_TestArc() {
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af02      	add	r7, sp, #8
  ssd1306_DrawArc(30, 30, 30, 20, 270, White);
 800502e:	2301      	movs	r3, #1
 8005030:	9301      	str	r3, [sp, #4]
 8005032:	f44f 7387 	mov.w	r3, #270	@ 0x10e
 8005036:	9300      	str	r3, [sp, #0]
 8005038:	2314      	movs	r3, #20
 800503a:	221e      	movs	r2, #30
 800503c:	211e      	movs	r1, #30
 800503e:	201e      	movs	r0, #30
 8005040:	f7ff f9ba 	bl	80043b8 <ssd1306_DrawArc>
  ssd1306_DrawArcWithRadiusLine(80, 55, 10, 30, 270, White);
 8005044:	2301      	movs	r3, #1
 8005046:	9301      	str	r3, [sp, #4]
 8005048:	f44f 7387 	mov.w	r3, #270	@ 0x10e
 800504c:	9300      	str	r3, [sp, #0]
 800504e:	231e      	movs	r3, #30
 8005050:	220a      	movs	r2, #10
 8005052:	2137      	movs	r1, #55	@ 0x37
 8005054:	2050      	movs	r0, #80	@ 0x50
 8005056:	f7ff fa97 	bl	8004588 <ssd1306_DrawArcWithRadiusLine>
  ssd1306_UpdateScreen();
 800505a:	f7fe ff7d 	bl	8003f58 <ssd1306_UpdateScreen>
  return;
 800505e:	bf00      	nop
}
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <ssd1306_TestPolyline>:

void ssd1306_TestPolyline() {
 8005064:	b590      	push	{r4, r7, lr}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
  SSD1306_VERTEX loc_vertex[] =
 800506a:	4b08      	ldr	r3, [pc, #32]	@ (800508c <ssd1306_TestPolyline+0x28>)
 800506c:	463c      	mov	r4, r7
 800506e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005070:	c407      	stmia	r4!, {r0, r1, r2}
 8005072:	8023      	strh	r3, [r4, #0]
      {45,16},
      {50,10},
      {53,16}
  };

  ssd1306_Polyline(loc_vertex,sizeof(loc_vertex)/sizeof(loc_vertex[0]),White);
 8005074:	463b      	mov	r3, r7
 8005076:	2201      	movs	r2, #1
 8005078:	2107      	movs	r1, #7
 800507a:	4618      	mov	r0, r3
 800507c:	f7ff f924 	bl	80042c8 <ssd1306_Polyline>
  ssd1306_UpdateScreen();
 8005080:	f7fe ff6a 	bl	8003f58 <ssd1306_UpdateScreen>
  return;
 8005084:	bf00      	nop
}
 8005086:	3714      	adds	r7, #20
 8005088:	46bd      	mov	sp, r7
 800508a:	bd90      	pop	{r4, r7, pc}
 800508c:	08005db4 	.word	0x08005db4

08005090 <ssd1306_TestDrawBitmap>:

void ssd1306_TestDrawBitmap()
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af02      	add	r7, sp, #8
    ssd1306_Fill(White);
 8005096:	2001      	movs	r0, #1
 8005098:	f7fe ff46 	bl	8003f28 <ssd1306_Fill>
    ssd1306_DrawBitmap(0,0,garfield_128x64,128,64,Black);
 800509c:	2300      	movs	r3, #0
 800509e:	9301      	str	r3, [sp, #4]
 80050a0:	2340      	movs	r3, #64	@ 0x40
 80050a2:	9300      	str	r3, [sp, #0]
 80050a4:	2380      	movs	r3, #128	@ 0x80
 80050a6:	4a18      	ldr	r2, [pc, #96]	@ (8005108 <ssd1306_TestDrawBitmap+0x78>)
 80050a8:	2100      	movs	r1, #0
 80050aa:	2000      	movs	r0, #0
 80050ac:	f7ff fde8 	bl	8004c80 <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 80050b0:	f7fe ff52 	bl	8003f58 <ssd1306_UpdateScreen>
    HAL_Delay(3000);
 80050b4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80050b8:	f7fb fc90 	bl	80009dc <HAL_Delay>
    ssd1306_Fill(Black);
 80050bc:	2000      	movs	r0, #0
 80050be:	f7fe ff33 	bl	8003f28 <ssd1306_Fill>
    ssd1306_DrawBitmap(32,0,github_logo_64x64,64,64,White);
 80050c2:	2301      	movs	r3, #1
 80050c4:	9301      	str	r3, [sp, #4]
 80050c6:	2340      	movs	r3, #64	@ 0x40
 80050c8:	9300      	str	r3, [sp, #0]
 80050ca:	2340      	movs	r3, #64	@ 0x40
 80050cc:	4a0f      	ldr	r2, [pc, #60]	@ (800510c <ssd1306_TestDrawBitmap+0x7c>)
 80050ce:	2100      	movs	r1, #0
 80050d0:	2020      	movs	r0, #32
 80050d2:	f7ff fdd5 	bl	8004c80 <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 80050d6:	f7fe ff3f 	bl	8003f58 <ssd1306_UpdateScreen>
    HAL_Delay(3000);
 80050da:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80050de:	f7fb fc7d 	bl	80009dc <HAL_Delay>
    ssd1306_Fill(White);
 80050e2:	2001      	movs	r0, #1
 80050e4:	f7fe ff20 	bl	8003f28 <ssd1306_Fill>
    ssd1306_DrawBitmap(32,0,github_logo_64x64,64,64,Black);
 80050e8:	2300      	movs	r3, #0
 80050ea:	9301      	str	r3, [sp, #4]
 80050ec:	2340      	movs	r3, #64	@ 0x40
 80050ee:	9300      	str	r3, [sp, #0]
 80050f0:	2340      	movs	r3, #64	@ 0x40
 80050f2:	4a06      	ldr	r2, [pc, #24]	@ (800510c <ssd1306_TestDrawBitmap+0x7c>)
 80050f4:	2100      	movs	r1, #0
 80050f6:	2020      	movs	r0, #32
 80050f8:	f7ff fdc2 	bl	8004c80 <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 80050fc:	f7fe ff2c 	bl	8003f58 <ssd1306_UpdateScreen>
}
 8005100:	bf00      	nop
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	08007d24 	.word	0x08007d24
 800510c:	08008124 	.word	0x08008124

08005110 <ssd1306_TestAll>:

void ssd1306_TestAll() {
 8005110:	b580      	push	{r7, lr}
 8005112:	af00      	add	r7, sp, #0
    ssd1306_Init();
 8005114:	f7fe fe9e 	bl	8003e54 <ssd1306_Init>
   // ssd1306_TestFPS();
    //HAL_Delay(3000);
    //ssd1306_TestBorder();
    //ssd1306_TestFonts1();
    //HAL_Delay(3000);
    ssd1306_TestFonts2();
 8005118:	f7ff fe3e 	bl	8004d98 <ssd1306_TestFonts2>
    HAL_Delay(3000);
 800511c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8005120:	f7fb fc5c 	bl	80009dc <HAL_Delay>
    //ssd1306_TestFonts3();
    //HAL_Delay(3000);
    ssd1306_Fill(Black);
 8005124:	2000      	movs	r0, #0
 8005126:	f7fe feff 	bl	8003f28 <ssd1306_Fill>
    ssd1306_TestRectangle();
 800512a:	f7ff fe87 	bl	8004e3c <ssd1306_TestRectangle>
    ssd1306_TestLine();
 800512e:	f7ff fe6d 	bl	8004e0c <ssd1306_TestLine>
    HAL_Delay(3000);
 8005132:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8005136:	f7fb fc51 	bl	80009dc <HAL_Delay>
    ssd1306_Fill(Black);
 800513a:	2000      	movs	r0, #0
 800513c:	f7fe fef4 	bl	8003f28 <ssd1306_Fill>
    ssd1306_TestRectangleFill();
 8005140:	f7ff feb4 	bl	8004eac <ssd1306_TestRectangleFill>
    HAL_Delay(3000);
 8005144:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8005148:	f7fb fc48 	bl	80009dc <HAL_Delay>
    ssd1306_Fill(Black);
 800514c:	2000      	movs	r0, #0
 800514e:	f7fe feeb 	bl	8003f28 <ssd1306_Fill>
    ssd1306_TestRectangleInvert();
 8005152:	f7ff fed3 	bl	8004efc <ssd1306_TestRectangleInvert>
    HAL_Delay(3000);
 8005156:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800515a:	f7fb fc3f 	bl	80009dc <HAL_Delay>
    ssd1306_Fill(Black);
 800515e:	2000      	movs	r0, #0
 8005160:	f7fe fee2 	bl	8003f28 <ssd1306_Fill>
    ssd1306_TestPolyline();
 8005164:	f7ff ff7e 	bl	8005064 <ssd1306_TestPolyline>
    HAL_Delay(3000);
 8005168:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800516c:	f7fb fc36 	bl	80009dc <HAL_Delay>
    ssd1306_Fill(Black);
 8005170:	2000      	movs	r0, #0
 8005172:	f7fe fed9 	bl	8003f28 <ssd1306_Fill>
    ssd1306_TestArc();
 8005176:	f7ff ff57 	bl	8005028 <ssd1306_TestArc>
    HAL_Delay(3000);
 800517a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800517e:	f7fb fc2d 	bl	80009dc <HAL_Delay>
    ssd1306_Fill(Black);
 8005182:	2000      	movs	r0, #0
 8005184:	f7fe fed0 	bl	8003f28 <ssd1306_Fill>
    ssd1306_TestCircle();
 8005188:	f7ff ff16 	bl	8004fb8 <ssd1306_TestCircle>
    HAL_Delay(3000);
 800518c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8005190:	f7fb fc24 	bl	80009dc <HAL_Delay>
    ssd1306_TestDrawBitmap();
 8005194:	f7ff ff7c 	bl	8005090 <ssd1306_TestDrawBitmap>
    HAL_Delay(3000);
 8005198:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800519c:	f7fb fc1e 	bl	80009dc <HAL_Delay>


}
 80051a0:	bf00      	nop
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <memset>:
 80051a4:	4402      	add	r2, r0
 80051a6:	4603      	mov	r3, r0
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d100      	bne.n	80051ae <memset+0xa>
 80051ac:	4770      	bx	lr
 80051ae:	f803 1b01 	strb.w	r1, [r3], #1
 80051b2:	e7f9      	b.n	80051a8 <memset+0x4>

080051b4 <__libc_init_array>:
 80051b4:	b570      	push	{r4, r5, r6, lr}
 80051b6:	4d0d      	ldr	r5, [pc, #52]	@ (80051ec <__libc_init_array+0x38>)
 80051b8:	4c0d      	ldr	r4, [pc, #52]	@ (80051f0 <__libc_init_array+0x3c>)
 80051ba:	1b64      	subs	r4, r4, r5
 80051bc:	10a4      	asrs	r4, r4, #2
 80051be:	2600      	movs	r6, #0
 80051c0:	42a6      	cmp	r6, r4
 80051c2:	d109      	bne.n	80051d8 <__libc_init_array+0x24>
 80051c4:	4d0b      	ldr	r5, [pc, #44]	@ (80051f4 <__libc_init_array+0x40>)
 80051c6:	4c0c      	ldr	r4, [pc, #48]	@ (80051f8 <__libc_init_array+0x44>)
 80051c8:	f000 fd8c 	bl	8005ce4 <_init>
 80051cc:	1b64      	subs	r4, r4, r5
 80051ce:	10a4      	asrs	r4, r4, #2
 80051d0:	2600      	movs	r6, #0
 80051d2:	42a6      	cmp	r6, r4
 80051d4:	d105      	bne.n	80051e2 <__libc_init_array+0x2e>
 80051d6:	bd70      	pop	{r4, r5, r6, pc}
 80051d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80051dc:	4798      	blx	r3
 80051de:	3601      	adds	r6, #1
 80051e0:	e7ee      	b.n	80051c0 <__libc_init_array+0xc>
 80051e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80051e6:	4798      	blx	r3
 80051e8:	3601      	adds	r6, #1
 80051ea:	e7f2      	b.n	80051d2 <__libc_init_array+0x1e>
 80051ec:	080086fc 	.word	0x080086fc
 80051f0:	080086fc 	.word	0x080086fc
 80051f4:	080086fc 	.word	0x080086fc
 80051f8:	08008700 	.word	0x08008700

080051fc <cosf>:
 80051fc:	ee10 3a10 	vmov	r3, s0
 8005200:	b507      	push	{r0, r1, r2, lr}
 8005202:	4a1e      	ldr	r2, [pc, #120]	@ (800527c <cosf+0x80>)
 8005204:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005208:	4293      	cmp	r3, r2
 800520a:	d806      	bhi.n	800521a <cosf+0x1e>
 800520c:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8005280 <cosf+0x84>
 8005210:	b003      	add	sp, #12
 8005212:	f85d eb04 	ldr.w	lr, [sp], #4
 8005216:	f000 b87b 	b.w	8005310 <__kernel_cosf>
 800521a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800521e:	d304      	bcc.n	800522a <cosf+0x2e>
 8005220:	ee30 0a40 	vsub.f32	s0, s0, s0
 8005224:	b003      	add	sp, #12
 8005226:	f85d fb04 	ldr.w	pc, [sp], #4
 800522a:	4668      	mov	r0, sp
 800522c:	f000 f910 	bl	8005450 <__ieee754_rem_pio2f>
 8005230:	f000 0003 	and.w	r0, r0, #3
 8005234:	2801      	cmp	r0, #1
 8005236:	d009      	beq.n	800524c <cosf+0x50>
 8005238:	2802      	cmp	r0, #2
 800523a:	d010      	beq.n	800525e <cosf+0x62>
 800523c:	b9b0      	cbnz	r0, 800526c <cosf+0x70>
 800523e:	eddd 0a01 	vldr	s1, [sp, #4]
 8005242:	ed9d 0a00 	vldr	s0, [sp]
 8005246:	f000 f863 	bl	8005310 <__kernel_cosf>
 800524a:	e7eb      	b.n	8005224 <cosf+0x28>
 800524c:	eddd 0a01 	vldr	s1, [sp, #4]
 8005250:	ed9d 0a00 	vldr	s0, [sp]
 8005254:	f000 f8b4 	bl	80053c0 <__kernel_sinf>
 8005258:	eeb1 0a40 	vneg.f32	s0, s0
 800525c:	e7e2      	b.n	8005224 <cosf+0x28>
 800525e:	eddd 0a01 	vldr	s1, [sp, #4]
 8005262:	ed9d 0a00 	vldr	s0, [sp]
 8005266:	f000 f853 	bl	8005310 <__kernel_cosf>
 800526a:	e7f5      	b.n	8005258 <cosf+0x5c>
 800526c:	eddd 0a01 	vldr	s1, [sp, #4]
 8005270:	ed9d 0a00 	vldr	s0, [sp]
 8005274:	2001      	movs	r0, #1
 8005276:	f000 f8a3 	bl	80053c0 <__kernel_sinf>
 800527a:	e7d3      	b.n	8005224 <cosf+0x28>
 800527c:	3f490fd8 	.word	0x3f490fd8
 8005280:	00000000 	.word	0x00000000

08005284 <sinf>:
 8005284:	ee10 3a10 	vmov	r3, s0
 8005288:	b507      	push	{r0, r1, r2, lr}
 800528a:	4a1f      	ldr	r2, [pc, #124]	@ (8005308 <sinf+0x84>)
 800528c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005290:	4293      	cmp	r3, r2
 8005292:	d807      	bhi.n	80052a4 <sinf+0x20>
 8005294:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800530c <sinf+0x88>
 8005298:	2000      	movs	r0, #0
 800529a:	b003      	add	sp, #12
 800529c:	f85d eb04 	ldr.w	lr, [sp], #4
 80052a0:	f000 b88e 	b.w	80053c0 <__kernel_sinf>
 80052a4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80052a8:	d304      	bcc.n	80052b4 <sinf+0x30>
 80052aa:	ee30 0a40 	vsub.f32	s0, s0, s0
 80052ae:	b003      	add	sp, #12
 80052b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80052b4:	4668      	mov	r0, sp
 80052b6:	f000 f8cb 	bl	8005450 <__ieee754_rem_pio2f>
 80052ba:	f000 0003 	and.w	r0, r0, #3
 80052be:	2801      	cmp	r0, #1
 80052c0:	d00a      	beq.n	80052d8 <sinf+0x54>
 80052c2:	2802      	cmp	r0, #2
 80052c4:	d00f      	beq.n	80052e6 <sinf+0x62>
 80052c6:	b9c0      	cbnz	r0, 80052fa <sinf+0x76>
 80052c8:	eddd 0a01 	vldr	s1, [sp, #4]
 80052cc:	ed9d 0a00 	vldr	s0, [sp]
 80052d0:	2001      	movs	r0, #1
 80052d2:	f000 f875 	bl	80053c0 <__kernel_sinf>
 80052d6:	e7ea      	b.n	80052ae <sinf+0x2a>
 80052d8:	eddd 0a01 	vldr	s1, [sp, #4]
 80052dc:	ed9d 0a00 	vldr	s0, [sp]
 80052e0:	f000 f816 	bl	8005310 <__kernel_cosf>
 80052e4:	e7e3      	b.n	80052ae <sinf+0x2a>
 80052e6:	eddd 0a01 	vldr	s1, [sp, #4]
 80052ea:	ed9d 0a00 	vldr	s0, [sp]
 80052ee:	2001      	movs	r0, #1
 80052f0:	f000 f866 	bl	80053c0 <__kernel_sinf>
 80052f4:	eeb1 0a40 	vneg.f32	s0, s0
 80052f8:	e7d9      	b.n	80052ae <sinf+0x2a>
 80052fa:	eddd 0a01 	vldr	s1, [sp, #4]
 80052fe:	ed9d 0a00 	vldr	s0, [sp]
 8005302:	f000 f805 	bl	8005310 <__kernel_cosf>
 8005306:	e7f5      	b.n	80052f4 <sinf+0x70>
 8005308:	3f490fd8 	.word	0x3f490fd8
 800530c:	00000000 	.word	0x00000000

08005310 <__kernel_cosf>:
 8005310:	ee10 3a10 	vmov	r3, s0
 8005314:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005318:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800531c:	eef0 6a40 	vmov.f32	s13, s0
 8005320:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005324:	d204      	bcs.n	8005330 <__kernel_cosf+0x20>
 8005326:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800532a:	ee17 2a90 	vmov	r2, s15
 800532e:	b342      	cbz	r2, 8005382 <__kernel_cosf+0x72>
 8005330:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8005334:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 80053a0 <__kernel_cosf+0x90>
 8005338:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 80053a4 <__kernel_cosf+0x94>
 800533c:	4a1a      	ldr	r2, [pc, #104]	@ (80053a8 <__kernel_cosf+0x98>)
 800533e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005342:	4293      	cmp	r3, r2
 8005344:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80053ac <__kernel_cosf+0x9c>
 8005348:	eee6 7a07 	vfma.f32	s15, s12, s14
 800534c:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 80053b0 <__kernel_cosf+0xa0>
 8005350:	eea7 6a87 	vfma.f32	s12, s15, s14
 8005354:	eddf 7a17 	vldr	s15, [pc, #92]	@ 80053b4 <__kernel_cosf+0xa4>
 8005358:	eee6 7a07 	vfma.f32	s15, s12, s14
 800535c:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 80053b8 <__kernel_cosf+0xa8>
 8005360:	eea7 6a87 	vfma.f32	s12, s15, s14
 8005364:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8005368:	ee26 6a07 	vmul.f32	s12, s12, s14
 800536c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8005370:	eee7 0a06 	vfma.f32	s1, s14, s12
 8005374:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005378:	d804      	bhi.n	8005384 <__kernel_cosf+0x74>
 800537a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800537e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005382:	4770      	bx	lr
 8005384:	4a0d      	ldr	r2, [pc, #52]	@ (80053bc <__kernel_cosf+0xac>)
 8005386:	4293      	cmp	r3, r2
 8005388:	bf9a      	itte	ls
 800538a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800538e:	ee07 3a10 	vmovls	s14, r3
 8005392:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8005396:	ee30 0a47 	vsub.f32	s0, s0, s14
 800539a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800539e:	e7ec      	b.n	800537a <__kernel_cosf+0x6a>
 80053a0:	ad47d74e 	.word	0xad47d74e
 80053a4:	310f74f6 	.word	0x310f74f6
 80053a8:	3e999999 	.word	0x3e999999
 80053ac:	b493f27c 	.word	0xb493f27c
 80053b0:	37d00d01 	.word	0x37d00d01
 80053b4:	bab60b61 	.word	0xbab60b61
 80053b8:	3d2aaaab 	.word	0x3d2aaaab
 80053bc:	3f480000 	.word	0x3f480000

080053c0 <__kernel_sinf>:
 80053c0:	ee10 3a10 	vmov	r3, s0
 80053c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80053c8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80053cc:	d204      	bcs.n	80053d8 <__kernel_sinf+0x18>
 80053ce:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80053d2:	ee17 3a90 	vmov	r3, s15
 80053d6:	b35b      	cbz	r3, 8005430 <__kernel_sinf+0x70>
 80053d8:	ee20 7a00 	vmul.f32	s14, s0, s0
 80053dc:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8005434 <__kernel_sinf+0x74>
 80053e0:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8005438 <__kernel_sinf+0x78>
 80053e4:	eea7 6a27 	vfma.f32	s12, s14, s15
 80053e8:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800543c <__kernel_sinf+0x7c>
 80053ec:	eee6 7a07 	vfma.f32	s15, s12, s14
 80053f0:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8005440 <__kernel_sinf+0x80>
 80053f4:	eea7 6a87 	vfma.f32	s12, s15, s14
 80053f8:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8005444 <__kernel_sinf+0x84>
 80053fc:	ee60 6a07 	vmul.f32	s13, s0, s14
 8005400:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005404:	b930      	cbnz	r0, 8005414 <__kernel_sinf+0x54>
 8005406:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8005448 <__kernel_sinf+0x88>
 800540a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800540e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8005412:	4770      	bx	lr
 8005414:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8005418:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800541c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8005420:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8005424:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800544c <__kernel_sinf+0x8c>
 8005428:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800542c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	2f2ec9d3 	.word	0x2f2ec9d3
 8005438:	b2d72f34 	.word	0xb2d72f34
 800543c:	3638ef1b 	.word	0x3638ef1b
 8005440:	b9500d01 	.word	0xb9500d01
 8005444:	3c088889 	.word	0x3c088889
 8005448:	be2aaaab 	.word	0xbe2aaaab
 800544c:	3e2aaaab 	.word	0x3e2aaaab

08005450 <__ieee754_rem_pio2f>:
 8005450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005452:	ee10 6a10 	vmov	r6, s0
 8005456:	4b88      	ldr	r3, [pc, #544]	@ (8005678 <__ieee754_rem_pio2f+0x228>)
 8005458:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800545c:	429d      	cmp	r5, r3
 800545e:	b087      	sub	sp, #28
 8005460:	4604      	mov	r4, r0
 8005462:	d805      	bhi.n	8005470 <__ieee754_rem_pio2f+0x20>
 8005464:	2300      	movs	r3, #0
 8005466:	ed80 0a00 	vstr	s0, [r0]
 800546a:	6043      	str	r3, [r0, #4]
 800546c:	2000      	movs	r0, #0
 800546e:	e022      	b.n	80054b6 <__ieee754_rem_pio2f+0x66>
 8005470:	4b82      	ldr	r3, [pc, #520]	@ (800567c <__ieee754_rem_pio2f+0x22c>)
 8005472:	429d      	cmp	r5, r3
 8005474:	d83a      	bhi.n	80054ec <__ieee754_rem_pio2f+0x9c>
 8005476:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800547a:	2e00      	cmp	r6, #0
 800547c:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8005680 <__ieee754_rem_pio2f+0x230>
 8005480:	4a80      	ldr	r2, [pc, #512]	@ (8005684 <__ieee754_rem_pio2f+0x234>)
 8005482:	f023 030f 	bic.w	r3, r3, #15
 8005486:	dd18      	ble.n	80054ba <__ieee754_rem_pio2f+0x6a>
 8005488:	4293      	cmp	r3, r2
 800548a:	ee70 7a47 	vsub.f32	s15, s0, s14
 800548e:	bf09      	itett	eq
 8005490:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8005688 <__ieee754_rem_pio2f+0x238>
 8005494:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800568c <__ieee754_rem_pio2f+0x23c>
 8005498:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8005690 <__ieee754_rem_pio2f+0x240>
 800549c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80054a0:	ee37 7ae6 	vsub.f32	s14, s15, s13
 80054a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80054a8:	ed80 7a00 	vstr	s14, [r0]
 80054ac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80054b0:	edc0 7a01 	vstr	s15, [r0, #4]
 80054b4:	2001      	movs	r0, #1
 80054b6:	b007      	add	sp, #28
 80054b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054ba:	4293      	cmp	r3, r2
 80054bc:	ee70 7a07 	vadd.f32	s15, s0, s14
 80054c0:	bf09      	itett	eq
 80054c2:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8005688 <__ieee754_rem_pio2f+0x238>
 80054c6:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800568c <__ieee754_rem_pio2f+0x23c>
 80054ca:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8005690 <__ieee754_rem_pio2f+0x240>
 80054ce:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80054d2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80054d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80054da:	ed80 7a00 	vstr	s14, [r0]
 80054de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054e2:	edc0 7a01 	vstr	s15, [r0, #4]
 80054e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80054ea:	e7e4      	b.n	80054b6 <__ieee754_rem_pio2f+0x66>
 80054ec:	4b69      	ldr	r3, [pc, #420]	@ (8005694 <__ieee754_rem_pio2f+0x244>)
 80054ee:	429d      	cmp	r5, r3
 80054f0:	d873      	bhi.n	80055da <__ieee754_rem_pio2f+0x18a>
 80054f2:	f000 f8dd 	bl	80056b0 <fabsf>
 80054f6:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8005698 <__ieee754_rem_pio2f+0x248>
 80054fa:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80054fe:	eee0 7a07 	vfma.f32	s15, s0, s14
 8005502:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005506:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800550a:	ee17 0a90 	vmov	r0, s15
 800550e:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8005680 <__ieee754_rem_pio2f+0x230>
 8005512:	eea7 0a67 	vfms.f32	s0, s14, s15
 8005516:	281f      	cmp	r0, #31
 8005518:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800568c <__ieee754_rem_pio2f+0x23c>
 800551c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005520:	eeb1 6a47 	vneg.f32	s12, s14
 8005524:	ee70 6a67 	vsub.f32	s13, s0, s15
 8005528:	ee16 1a90 	vmov	r1, s13
 800552c:	dc09      	bgt.n	8005542 <__ieee754_rem_pio2f+0xf2>
 800552e:	4a5b      	ldr	r2, [pc, #364]	@ (800569c <__ieee754_rem_pio2f+0x24c>)
 8005530:	1e47      	subs	r7, r0, #1
 8005532:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8005536:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800553a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800553e:	4293      	cmp	r3, r2
 8005540:	d107      	bne.n	8005552 <__ieee754_rem_pio2f+0x102>
 8005542:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8005546:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800554a:	2a08      	cmp	r2, #8
 800554c:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8005550:	dc14      	bgt.n	800557c <__ieee754_rem_pio2f+0x12c>
 8005552:	6021      	str	r1, [r4, #0]
 8005554:	ed94 7a00 	vldr	s14, [r4]
 8005558:	ee30 0a47 	vsub.f32	s0, s0, s14
 800555c:	2e00      	cmp	r6, #0
 800555e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005562:	ed84 0a01 	vstr	s0, [r4, #4]
 8005566:	daa6      	bge.n	80054b6 <__ieee754_rem_pio2f+0x66>
 8005568:	eeb1 7a47 	vneg.f32	s14, s14
 800556c:	eeb1 0a40 	vneg.f32	s0, s0
 8005570:	ed84 7a00 	vstr	s14, [r4]
 8005574:	ed84 0a01 	vstr	s0, [r4, #4]
 8005578:	4240      	negs	r0, r0
 800557a:	e79c      	b.n	80054b6 <__ieee754_rem_pio2f+0x66>
 800557c:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8005688 <__ieee754_rem_pio2f+0x238>
 8005580:	eef0 6a40 	vmov.f32	s13, s0
 8005584:	eee6 6a25 	vfma.f32	s13, s12, s11
 8005588:	ee70 7a66 	vsub.f32	s15, s0, s13
 800558c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8005590:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005690 <__ieee754_rem_pio2f+0x240>
 8005594:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8005598:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800559c:	ee15 2a90 	vmov	r2, s11
 80055a0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80055a4:	1a5b      	subs	r3, r3, r1
 80055a6:	2b19      	cmp	r3, #25
 80055a8:	dc04      	bgt.n	80055b4 <__ieee754_rem_pio2f+0x164>
 80055aa:	edc4 5a00 	vstr	s11, [r4]
 80055ae:	eeb0 0a66 	vmov.f32	s0, s13
 80055b2:	e7cf      	b.n	8005554 <__ieee754_rem_pio2f+0x104>
 80055b4:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 80056a0 <__ieee754_rem_pio2f+0x250>
 80055b8:	eeb0 0a66 	vmov.f32	s0, s13
 80055bc:	eea6 0a25 	vfma.f32	s0, s12, s11
 80055c0:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80055c4:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80056a4 <__ieee754_rem_pio2f+0x254>
 80055c8:	eee6 7a25 	vfma.f32	s15, s12, s11
 80055cc:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80055d0:	ee30 7a67 	vsub.f32	s14, s0, s15
 80055d4:	ed84 7a00 	vstr	s14, [r4]
 80055d8:	e7bc      	b.n	8005554 <__ieee754_rem_pio2f+0x104>
 80055da:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 80055de:	d306      	bcc.n	80055ee <__ieee754_rem_pio2f+0x19e>
 80055e0:	ee70 7a40 	vsub.f32	s15, s0, s0
 80055e4:	edc0 7a01 	vstr	s15, [r0, #4]
 80055e8:	edc0 7a00 	vstr	s15, [r0]
 80055ec:	e73e      	b.n	800546c <__ieee754_rem_pio2f+0x1c>
 80055ee:	15ea      	asrs	r2, r5, #23
 80055f0:	3a86      	subs	r2, #134	@ 0x86
 80055f2:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80055f6:	ee07 3a90 	vmov	s15, r3
 80055fa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80055fe:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80056a8 <__ieee754_rem_pio2f+0x258>
 8005602:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005606:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800560a:	ed8d 7a03 	vstr	s14, [sp, #12]
 800560e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005612:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005616:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800561a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800561e:	ed8d 7a04 	vstr	s14, [sp, #16]
 8005622:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005626:	eef5 7a40 	vcmp.f32	s15, #0.0
 800562a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800562e:	edcd 7a05 	vstr	s15, [sp, #20]
 8005632:	d11e      	bne.n	8005672 <__ieee754_rem_pio2f+0x222>
 8005634:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8005638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800563c:	bf0c      	ite	eq
 800563e:	2301      	moveq	r3, #1
 8005640:	2302      	movne	r3, #2
 8005642:	491a      	ldr	r1, [pc, #104]	@ (80056ac <__ieee754_rem_pio2f+0x25c>)
 8005644:	9101      	str	r1, [sp, #4]
 8005646:	2102      	movs	r1, #2
 8005648:	9100      	str	r1, [sp, #0]
 800564a:	a803      	add	r0, sp, #12
 800564c:	4621      	mov	r1, r4
 800564e:	f000 f837 	bl	80056c0 <__kernel_rem_pio2f>
 8005652:	2e00      	cmp	r6, #0
 8005654:	f6bf af2f 	bge.w	80054b6 <__ieee754_rem_pio2f+0x66>
 8005658:	edd4 7a00 	vldr	s15, [r4]
 800565c:	eef1 7a67 	vneg.f32	s15, s15
 8005660:	edc4 7a00 	vstr	s15, [r4]
 8005664:	edd4 7a01 	vldr	s15, [r4, #4]
 8005668:	eef1 7a67 	vneg.f32	s15, s15
 800566c:	edc4 7a01 	vstr	s15, [r4, #4]
 8005670:	e782      	b.n	8005578 <__ieee754_rem_pio2f+0x128>
 8005672:	2303      	movs	r3, #3
 8005674:	e7e5      	b.n	8005642 <__ieee754_rem_pio2f+0x1f2>
 8005676:	bf00      	nop
 8005678:	3f490fd8 	.word	0x3f490fd8
 800567c:	4016cbe3 	.word	0x4016cbe3
 8005680:	3fc90f80 	.word	0x3fc90f80
 8005684:	3fc90fd0 	.word	0x3fc90fd0
 8005688:	37354400 	.word	0x37354400
 800568c:	37354443 	.word	0x37354443
 8005690:	2e85a308 	.word	0x2e85a308
 8005694:	43490f80 	.word	0x43490f80
 8005698:	3f22f984 	.word	0x3f22f984
 800569c:	08008324 	.word	0x08008324
 80056a0:	2e85a300 	.word	0x2e85a300
 80056a4:	248d3132 	.word	0x248d3132
 80056a8:	43800000 	.word	0x43800000
 80056ac:	080083a4 	.word	0x080083a4

080056b0 <fabsf>:
 80056b0:	ee10 3a10 	vmov	r3, s0
 80056b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80056b8:	ee00 3a10 	vmov	s0, r3
 80056bc:	4770      	bx	lr
	...

080056c0 <__kernel_rem_pio2f>:
 80056c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056c4:	ed2d 8b04 	vpush	{d8-d9}
 80056c8:	b0d9      	sub	sp, #356	@ 0x164
 80056ca:	4690      	mov	r8, r2
 80056cc:	9001      	str	r0, [sp, #4]
 80056ce:	4ab6      	ldr	r2, [pc, #728]	@ (80059a8 <__kernel_rem_pio2f+0x2e8>)
 80056d0:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80056d2:	f118 0f04 	cmn.w	r8, #4
 80056d6:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 80056da:	460f      	mov	r7, r1
 80056dc:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80056e0:	db26      	blt.n	8005730 <__kernel_rem_pio2f+0x70>
 80056e2:	f1b8 0203 	subs.w	r2, r8, #3
 80056e6:	bf48      	it	mi
 80056e8:	f108 0204 	addmi.w	r2, r8, #4
 80056ec:	10d2      	asrs	r2, r2, #3
 80056ee:	1c55      	adds	r5, r2, #1
 80056f0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80056f2:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 80059b8 <__kernel_rem_pio2f+0x2f8>
 80056f6:	00e8      	lsls	r0, r5, #3
 80056f8:	eba2 060b 	sub.w	r6, r2, fp
 80056fc:	9002      	str	r0, [sp, #8]
 80056fe:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8005702:	eb0a 0c0b 	add.w	ip, sl, fp
 8005706:	ac1c      	add	r4, sp, #112	@ 0x70
 8005708:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800570c:	2000      	movs	r0, #0
 800570e:	4560      	cmp	r0, ip
 8005710:	dd10      	ble.n	8005734 <__kernel_rem_pio2f+0x74>
 8005712:	a91c      	add	r1, sp, #112	@ 0x70
 8005714:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8005718:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800571c:	2600      	movs	r6, #0
 800571e:	4556      	cmp	r6, sl
 8005720:	dc24      	bgt.n	800576c <__kernel_rem_pio2f+0xac>
 8005722:	f8dd e004 	ldr.w	lr, [sp, #4]
 8005726:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 80059b8 <__kernel_rem_pio2f+0x2f8>
 800572a:	4684      	mov	ip, r0
 800572c:	2400      	movs	r4, #0
 800572e:	e016      	b.n	800575e <__kernel_rem_pio2f+0x9e>
 8005730:	2200      	movs	r2, #0
 8005732:	e7dc      	b.n	80056ee <__kernel_rem_pio2f+0x2e>
 8005734:	42c6      	cmn	r6, r0
 8005736:	bf5d      	ittte	pl
 8005738:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800573c:	ee07 1a90 	vmovpl	s15, r1
 8005740:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8005744:	eef0 7a47 	vmovmi.f32	s15, s14
 8005748:	ece4 7a01 	vstmia	r4!, {s15}
 800574c:	3001      	adds	r0, #1
 800574e:	e7de      	b.n	800570e <__kernel_rem_pio2f+0x4e>
 8005750:	ecfe 6a01 	vldmia	lr!, {s13}
 8005754:	ed3c 7a01 	vldmdb	ip!, {s14}
 8005758:	eee6 7a87 	vfma.f32	s15, s13, s14
 800575c:	3401      	adds	r4, #1
 800575e:	455c      	cmp	r4, fp
 8005760:	ddf6      	ble.n	8005750 <__kernel_rem_pio2f+0x90>
 8005762:	ece9 7a01 	vstmia	r9!, {s15}
 8005766:	3601      	adds	r6, #1
 8005768:	3004      	adds	r0, #4
 800576a:	e7d8      	b.n	800571e <__kernel_rem_pio2f+0x5e>
 800576c:	a908      	add	r1, sp, #32
 800576e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005772:	9104      	str	r1, [sp, #16]
 8005774:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8005776:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 80059b4 <__kernel_rem_pio2f+0x2f4>
 800577a:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 80059b0 <__kernel_rem_pio2f+0x2f0>
 800577e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8005782:	9203      	str	r2, [sp, #12]
 8005784:	4654      	mov	r4, sl
 8005786:	00a2      	lsls	r2, r4, #2
 8005788:	9205      	str	r2, [sp, #20]
 800578a:	aa58      	add	r2, sp, #352	@ 0x160
 800578c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8005790:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8005794:	a944      	add	r1, sp, #272	@ 0x110
 8005796:	aa08      	add	r2, sp, #32
 8005798:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800579c:	4694      	mov	ip, r2
 800579e:	4626      	mov	r6, r4
 80057a0:	2e00      	cmp	r6, #0
 80057a2:	dc4c      	bgt.n	800583e <__kernel_rem_pio2f+0x17e>
 80057a4:	4628      	mov	r0, r5
 80057a6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80057aa:	f000 f9f1 	bl	8005b90 <scalbnf>
 80057ae:	eeb0 8a40 	vmov.f32	s16, s0
 80057b2:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 80057b6:	ee28 0a00 	vmul.f32	s0, s16, s0
 80057ba:	f000 fa4f 	bl	8005c5c <floorf>
 80057be:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 80057c2:	eea0 8a67 	vfms.f32	s16, s0, s15
 80057c6:	2d00      	cmp	r5, #0
 80057c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80057cc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80057d0:	ee17 9a90 	vmov	r9, s15
 80057d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057d8:	ee38 8a67 	vsub.f32	s16, s16, s15
 80057dc:	dd41      	ble.n	8005862 <__kernel_rem_pio2f+0x1a2>
 80057de:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 80057e2:	a908      	add	r1, sp, #32
 80057e4:	f1c5 0e08 	rsb	lr, r5, #8
 80057e8:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 80057ec:	fa46 f00e 	asr.w	r0, r6, lr
 80057f0:	4481      	add	r9, r0
 80057f2:	fa00 f00e 	lsl.w	r0, r0, lr
 80057f6:	1a36      	subs	r6, r6, r0
 80057f8:	f1c5 0007 	rsb	r0, r5, #7
 80057fc:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8005800:	4106      	asrs	r6, r0
 8005802:	2e00      	cmp	r6, #0
 8005804:	dd3c      	ble.n	8005880 <__kernel_rem_pio2f+0x1c0>
 8005806:	f04f 0e00 	mov.w	lr, #0
 800580a:	f109 0901 	add.w	r9, r9, #1
 800580e:	4670      	mov	r0, lr
 8005810:	4574      	cmp	r4, lr
 8005812:	dc68      	bgt.n	80058e6 <__kernel_rem_pio2f+0x226>
 8005814:	2d00      	cmp	r5, #0
 8005816:	dd03      	ble.n	8005820 <__kernel_rem_pio2f+0x160>
 8005818:	2d01      	cmp	r5, #1
 800581a:	d074      	beq.n	8005906 <__kernel_rem_pio2f+0x246>
 800581c:	2d02      	cmp	r5, #2
 800581e:	d07d      	beq.n	800591c <__kernel_rem_pio2f+0x25c>
 8005820:	2e02      	cmp	r6, #2
 8005822:	d12d      	bne.n	8005880 <__kernel_rem_pio2f+0x1c0>
 8005824:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005828:	ee30 8a48 	vsub.f32	s16, s0, s16
 800582c:	b340      	cbz	r0, 8005880 <__kernel_rem_pio2f+0x1c0>
 800582e:	4628      	mov	r0, r5
 8005830:	9306      	str	r3, [sp, #24]
 8005832:	f000 f9ad 	bl	8005b90 <scalbnf>
 8005836:	9b06      	ldr	r3, [sp, #24]
 8005838:	ee38 8a40 	vsub.f32	s16, s16, s0
 800583c:	e020      	b.n	8005880 <__kernel_rem_pio2f+0x1c0>
 800583e:	ee60 7a28 	vmul.f32	s15, s0, s17
 8005842:	3e01      	subs	r6, #1
 8005844:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005848:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800584c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8005850:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005854:	ecac 0a01 	vstmia	ip!, {s0}
 8005858:	ed30 0a01 	vldmdb	r0!, {s0}
 800585c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8005860:	e79e      	b.n	80057a0 <__kernel_rem_pio2f+0xe0>
 8005862:	d105      	bne.n	8005870 <__kernel_rem_pio2f+0x1b0>
 8005864:	1e60      	subs	r0, r4, #1
 8005866:	a908      	add	r1, sp, #32
 8005868:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800586c:	11f6      	asrs	r6, r6, #7
 800586e:	e7c8      	b.n	8005802 <__kernel_rem_pio2f+0x142>
 8005870:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8005874:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800587c:	da31      	bge.n	80058e2 <__kernel_rem_pio2f+0x222>
 800587e:	2600      	movs	r6, #0
 8005880:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8005884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005888:	f040 8098 	bne.w	80059bc <__kernel_rem_pio2f+0x2fc>
 800588c:	1e60      	subs	r0, r4, #1
 800588e:	2200      	movs	r2, #0
 8005890:	4550      	cmp	r0, sl
 8005892:	da4b      	bge.n	800592c <__kernel_rem_pio2f+0x26c>
 8005894:	2a00      	cmp	r2, #0
 8005896:	d065      	beq.n	8005964 <__kernel_rem_pio2f+0x2a4>
 8005898:	3c01      	subs	r4, #1
 800589a:	ab08      	add	r3, sp, #32
 800589c:	3d08      	subs	r5, #8
 800589e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d0f8      	beq.n	8005898 <__kernel_rem_pio2f+0x1d8>
 80058a6:	4628      	mov	r0, r5
 80058a8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80058ac:	f000 f970 	bl	8005b90 <scalbnf>
 80058b0:	1c63      	adds	r3, r4, #1
 80058b2:	aa44      	add	r2, sp, #272	@ 0x110
 80058b4:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80059b4 <__kernel_rem_pio2f+0x2f4>
 80058b8:	0099      	lsls	r1, r3, #2
 80058ba:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80058be:	4623      	mov	r3, r4
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f280 80a9 	bge.w	8005a18 <__kernel_rem_pio2f+0x358>
 80058c6:	4623      	mov	r3, r4
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f2c0 80c7 	blt.w	8005a5c <__kernel_rem_pio2f+0x39c>
 80058ce:	aa44      	add	r2, sp, #272	@ 0x110
 80058d0:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80058d4:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 80059ac <__kernel_rem_pio2f+0x2ec>
 80058d8:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80059b8 <__kernel_rem_pio2f+0x2f8>
 80058dc:	2000      	movs	r0, #0
 80058de:	1ae2      	subs	r2, r4, r3
 80058e0:	e0b1      	b.n	8005a46 <__kernel_rem_pio2f+0x386>
 80058e2:	2602      	movs	r6, #2
 80058e4:	e78f      	b.n	8005806 <__kernel_rem_pio2f+0x146>
 80058e6:	f852 1b04 	ldr.w	r1, [r2], #4
 80058ea:	b948      	cbnz	r0, 8005900 <__kernel_rem_pio2f+0x240>
 80058ec:	b121      	cbz	r1, 80058f8 <__kernel_rem_pio2f+0x238>
 80058ee:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80058f2:	f842 1c04 	str.w	r1, [r2, #-4]
 80058f6:	2101      	movs	r1, #1
 80058f8:	f10e 0e01 	add.w	lr, lr, #1
 80058fc:	4608      	mov	r0, r1
 80058fe:	e787      	b.n	8005810 <__kernel_rem_pio2f+0x150>
 8005900:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8005904:	e7f5      	b.n	80058f2 <__kernel_rem_pio2f+0x232>
 8005906:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 800590a:	aa08      	add	r2, sp, #32
 800590c:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8005910:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005914:	a908      	add	r1, sp, #32
 8005916:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800591a:	e781      	b.n	8005820 <__kernel_rem_pio2f+0x160>
 800591c:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 8005920:	aa08      	add	r2, sp, #32
 8005922:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8005926:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800592a:	e7f3      	b.n	8005914 <__kernel_rem_pio2f+0x254>
 800592c:	a908      	add	r1, sp, #32
 800592e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8005932:	3801      	subs	r0, #1
 8005934:	430a      	orrs	r2, r1
 8005936:	e7ab      	b.n	8005890 <__kernel_rem_pio2f+0x1d0>
 8005938:	3201      	adds	r2, #1
 800593a:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800593e:	2e00      	cmp	r6, #0
 8005940:	d0fa      	beq.n	8005938 <__kernel_rem_pio2f+0x278>
 8005942:	9905      	ldr	r1, [sp, #20]
 8005944:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8005948:	eb0d 0001 	add.w	r0, sp, r1
 800594c:	18e6      	adds	r6, r4, r3
 800594e:	a91c      	add	r1, sp, #112	@ 0x70
 8005950:	f104 0c01 	add.w	ip, r4, #1
 8005954:	384c      	subs	r0, #76	@ 0x4c
 8005956:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800595a:	4422      	add	r2, r4
 800595c:	4562      	cmp	r2, ip
 800595e:	da04      	bge.n	800596a <__kernel_rem_pio2f+0x2aa>
 8005960:	4614      	mov	r4, r2
 8005962:	e710      	b.n	8005786 <__kernel_rem_pio2f+0xc6>
 8005964:	9804      	ldr	r0, [sp, #16]
 8005966:	2201      	movs	r2, #1
 8005968:	e7e7      	b.n	800593a <__kernel_rem_pio2f+0x27a>
 800596a:	9903      	ldr	r1, [sp, #12]
 800596c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8005970:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8005974:	9105      	str	r1, [sp, #20]
 8005976:	ee07 1a90 	vmov	s15, r1
 800597a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800597e:	2400      	movs	r4, #0
 8005980:	ece6 7a01 	vstmia	r6!, {s15}
 8005984:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80059b8 <__kernel_rem_pio2f+0x2f8>
 8005988:	46b1      	mov	r9, r6
 800598a:	455c      	cmp	r4, fp
 800598c:	dd04      	ble.n	8005998 <__kernel_rem_pio2f+0x2d8>
 800598e:	ece0 7a01 	vstmia	r0!, {s15}
 8005992:	f10c 0c01 	add.w	ip, ip, #1
 8005996:	e7e1      	b.n	800595c <__kernel_rem_pio2f+0x29c>
 8005998:	ecfe 6a01 	vldmia	lr!, {s13}
 800599c:	ed39 7a01 	vldmdb	r9!, {s14}
 80059a0:	3401      	adds	r4, #1
 80059a2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80059a6:	e7f0      	b.n	800598a <__kernel_rem_pio2f+0x2ca>
 80059a8:	080086e8 	.word	0x080086e8
 80059ac:	080086bc 	.word	0x080086bc
 80059b0:	43800000 	.word	0x43800000
 80059b4:	3b800000 	.word	0x3b800000
 80059b8:	00000000 	.word	0x00000000
 80059bc:	9b02      	ldr	r3, [sp, #8]
 80059be:	eeb0 0a48 	vmov.f32	s0, s16
 80059c2:	eba3 0008 	sub.w	r0, r3, r8
 80059c6:	f000 f8e3 	bl	8005b90 <scalbnf>
 80059ca:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 80059b0 <__kernel_rem_pio2f+0x2f0>
 80059ce:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80059d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059d6:	db19      	blt.n	8005a0c <__kernel_rem_pio2f+0x34c>
 80059d8:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 80059b4 <__kernel_rem_pio2f+0x2f4>
 80059dc:	ee60 7a27 	vmul.f32	s15, s0, s15
 80059e0:	aa08      	add	r2, sp, #32
 80059e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80059e6:	3508      	adds	r5, #8
 80059e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059ec:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80059f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80059f4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80059f8:	ee10 3a10 	vmov	r3, s0
 80059fc:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8005a00:	ee17 3a90 	vmov	r3, s15
 8005a04:	3401      	adds	r4, #1
 8005a06:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8005a0a:	e74c      	b.n	80058a6 <__kernel_rem_pio2f+0x1e6>
 8005a0c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005a10:	aa08      	add	r2, sp, #32
 8005a12:	ee10 3a10 	vmov	r3, s0
 8005a16:	e7f6      	b.n	8005a06 <__kernel_rem_pio2f+0x346>
 8005a18:	a808      	add	r0, sp, #32
 8005a1a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8005a1e:	9001      	str	r0, [sp, #4]
 8005a20:	ee07 0a90 	vmov	s15, r0
 8005a24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a28:	3b01      	subs	r3, #1
 8005a2a:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005a2e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8005a32:	ed62 7a01 	vstmdb	r2!, {s15}
 8005a36:	e743      	b.n	80058c0 <__kernel_rem_pio2f+0x200>
 8005a38:	ecfc 6a01 	vldmia	ip!, {s13}
 8005a3c:	ecb5 7a01 	vldmia	r5!, {s14}
 8005a40:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005a44:	3001      	adds	r0, #1
 8005a46:	4550      	cmp	r0, sl
 8005a48:	dc01      	bgt.n	8005a4e <__kernel_rem_pio2f+0x38e>
 8005a4a:	4290      	cmp	r0, r2
 8005a4c:	ddf4      	ble.n	8005a38 <__kernel_rem_pio2f+0x378>
 8005a4e:	a858      	add	r0, sp, #352	@ 0x160
 8005a50:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005a54:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	e735      	b.n	80058c8 <__kernel_rem_pio2f+0x208>
 8005a5c:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	dc09      	bgt.n	8005a76 <__kernel_rem_pio2f+0x3b6>
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	dc27      	bgt.n	8005ab6 <__kernel_rem_pio2f+0x3f6>
 8005a66:	d040      	beq.n	8005aea <__kernel_rem_pio2f+0x42a>
 8005a68:	f009 0007 	and.w	r0, r9, #7
 8005a6c:	b059      	add	sp, #356	@ 0x164
 8005a6e:	ecbd 8b04 	vpop	{d8-d9}
 8005a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a76:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8005a78:	2b03      	cmp	r3, #3
 8005a7a:	d1f5      	bne.n	8005a68 <__kernel_rem_pio2f+0x3a8>
 8005a7c:	aa30      	add	r2, sp, #192	@ 0xc0
 8005a7e:	1f0b      	subs	r3, r1, #4
 8005a80:	4413      	add	r3, r2
 8005a82:	461a      	mov	r2, r3
 8005a84:	4620      	mov	r0, r4
 8005a86:	2800      	cmp	r0, #0
 8005a88:	dc50      	bgt.n	8005b2c <__kernel_rem_pio2f+0x46c>
 8005a8a:	4622      	mov	r2, r4
 8005a8c:	2a01      	cmp	r2, #1
 8005a8e:	dc5d      	bgt.n	8005b4c <__kernel_rem_pio2f+0x48c>
 8005a90:	ab30      	add	r3, sp, #192	@ 0xc0
 8005a92:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 80059b8 <__kernel_rem_pio2f+0x2f8>
 8005a96:	440b      	add	r3, r1
 8005a98:	2c01      	cmp	r4, #1
 8005a9a:	dc67      	bgt.n	8005b6c <__kernel_rem_pio2f+0x4ac>
 8005a9c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8005aa0:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8005aa4:	2e00      	cmp	r6, #0
 8005aa6:	d167      	bne.n	8005b78 <__kernel_rem_pio2f+0x4b8>
 8005aa8:	edc7 6a00 	vstr	s13, [r7]
 8005aac:	ed87 7a01 	vstr	s14, [r7, #4]
 8005ab0:	edc7 7a02 	vstr	s15, [r7, #8]
 8005ab4:	e7d8      	b.n	8005a68 <__kernel_rem_pio2f+0x3a8>
 8005ab6:	ab30      	add	r3, sp, #192	@ 0xc0
 8005ab8:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 80059b8 <__kernel_rem_pio2f+0x2f8>
 8005abc:	440b      	add	r3, r1
 8005abe:	4622      	mov	r2, r4
 8005ac0:	2a00      	cmp	r2, #0
 8005ac2:	da24      	bge.n	8005b0e <__kernel_rem_pio2f+0x44e>
 8005ac4:	b34e      	cbz	r6, 8005b1a <__kernel_rem_pio2f+0x45a>
 8005ac6:	eef1 7a47 	vneg.f32	s15, s14
 8005aca:	edc7 7a00 	vstr	s15, [r7]
 8005ace:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8005ad2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005ad6:	aa31      	add	r2, sp, #196	@ 0xc4
 8005ad8:	2301      	movs	r3, #1
 8005ada:	429c      	cmp	r4, r3
 8005adc:	da20      	bge.n	8005b20 <__kernel_rem_pio2f+0x460>
 8005ade:	b10e      	cbz	r6, 8005ae4 <__kernel_rem_pio2f+0x424>
 8005ae0:	eef1 7a67 	vneg.f32	s15, s15
 8005ae4:	edc7 7a01 	vstr	s15, [r7, #4]
 8005ae8:	e7be      	b.n	8005a68 <__kernel_rem_pio2f+0x3a8>
 8005aea:	ab30      	add	r3, sp, #192	@ 0xc0
 8005aec:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 80059b8 <__kernel_rem_pio2f+0x2f8>
 8005af0:	440b      	add	r3, r1
 8005af2:	2c00      	cmp	r4, #0
 8005af4:	da05      	bge.n	8005b02 <__kernel_rem_pio2f+0x442>
 8005af6:	b10e      	cbz	r6, 8005afc <__kernel_rem_pio2f+0x43c>
 8005af8:	eef1 7a67 	vneg.f32	s15, s15
 8005afc:	edc7 7a00 	vstr	s15, [r7]
 8005b00:	e7b2      	b.n	8005a68 <__kernel_rem_pio2f+0x3a8>
 8005b02:	ed33 7a01 	vldmdb	r3!, {s14}
 8005b06:	3c01      	subs	r4, #1
 8005b08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005b0c:	e7f1      	b.n	8005af2 <__kernel_rem_pio2f+0x432>
 8005b0e:	ed73 7a01 	vldmdb	r3!, {s15}
 8005b12:	3a01      	subs	r2, #1
 8005b14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b18:	e7d2      	b.n	8005ac0 <__kernel_rem_pio2f+0x400>
 8005b1a:	eef0 7a47 	vmov.f32	s15, s14
 8005b1e:	e7d4      	b.n	8005aca <__kernel_rem_pio2f+0x40a>
 8005b20:	ecb2 7a01 	vldmia	r2!, {s14}
 8005b24:	3301      	adds	r3, #1
 8005b26:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005b2a:	e7d6      	b.n	8005ada <__kernel_rem_pio2f+0x41a>
 8005b2c:	ed72 7a01 	vldmdb	r2!, {s15}
 8005b30:	edd2 6a01 	vldr	s13, [r2, #4]
 8005b34:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005b38:	3801      	subs	r0, #1
 8005b3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005b3e:	ed82 7a00 	vstr	s14, [r2]
 8005b42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b46:	edc2 7a01 	vstr	s15, [r2, #4]
 8005b4a:	e79c      	b.n	8005a86 <__kernel_rem_pio2f+0x3c6>
 8005b4c:	ed73 7a01 	vldmdb	r3!, {s15}
 8005b50:	edd3 6a01 	vldr	s13, [r3, #4]
 8005b54:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005b58:	3a01      	subs	r2, #1
 8005b5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005b5e:	ed83 7a00 	vstr	s14, [r3]
 8005b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b66:	edc3 7a01 	vstr	s15, [r3, #4]
 8005b6a:	e78f      	b.n	8005a8c <__kernel_rem_pio2f+0x3cc>
 8005b6c:	ed33 7a01 	vldmdb	r3!, {s14}
 8005b70:	3c01      	subs	r4, #1
 8005b72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005b76:	e78f      	b.n	8005a98 <__kernel_rem_pio2f+0x3d8>
 8005b78:	eef1 6a66 	vneg.f32	s13, s13
 8005b7c:	eeb1 7a47 	vneg.f32	s14, s14
 8005b80:	edc7 6a00 	vstr	s13, [r7]
 8005b84:	ed87 7a01 	vstr	s14, [r7, #4]
 8005b88:	eef1 7a67 	vneg.f32	s15, s15
 8005b8c:	e790      	b.n	8005ab0 <__kernel_rem_pio2f+0x3f0>
 8005b8e:	bf00      	nop

08005b90 <scalbnf>:
 8005b90:	ee10 3a10 	vmov	r3, s0
 8005b94:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8005b98:	d02b      	beq.n	8005bf2 <scalbnf+0x62>
 8005b9a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8005b9e:	d302      	bcc.n	8005ba6 <scalbnf+0x16>
 8005ba0:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005ba4:	4770      	bx	lr
 8005ba6:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8005baa:	d123      	bne.n	8005bf4 <scalbnf+0x64>
 8005bac:	4b24      	ldr	r3, [pc, #144]	@ (8005c40 <scalbnf+0xb0>)
 8005bae:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8005c44 <scalbnf+0xb4>
 8005bb2:	4298      	cmp	r0, r3
 8005bb4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005bb8:	db17      	blt.n	8005bea <scalbnf+0x5a>
 8005bba:	ee10 3a10 	vmov	r3, s0
 8005bbe:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005bc2:	3a19      	subs	r2, #25
 8005bc4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8005bc8:	4288      	cmp	r0, r1
 8005bca:	dd15      	ble.n	8005bf8 <scalbnf+0x68>
 8005bcc:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8005c48 <scalbnf+0xb8>
 8005bd0:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8005c4c <scalbnf+0xbc>
 8005bd4:	ee10 3a10 	vmov	r3, s0
 8005bd8:	eeb0 7a67 	vmov.f32	s14, s15
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	bfb8      	it	lt
 8005be0:	eef0 7a66 	vmovlt.f32	s15, s13
 8005be4:	ee27 0a87 	vmul.f32	s0, s15, s14
 8005be8:	4770      	bx	lr
 8005bea:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8005c50 <scalbnf+0xc0>
 8005bee:	ee27 0a80 	vmul.f32	s0, s15, s0
 8005bf2:	4770      	bx	lr
 8005bf4:	0dd2      	lsrs	r2, r2, #23
 8005bf6:	e7e5      	b.n	8005bc4 <scalbnf+0x34>
 8005bf8:	4410      	add	r0, r2
 8005bfa:	28fe      	cmp	r0, #254	@ 0xfe
 8005bfc:	dce6      	bgt.n	8005bcc <scalbnf+0x3c>
 8005bfe:	2800      	cmp	r0, #0
 8005c00:	dd06      	ble.n	8005c10 <scalbnf+0x80>
 8005c02:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005c06:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8005c0a:	ee00 3a10 	vmov	s0, r3
 8005c0e:	4770      	bx	lr
 8005c10:	f110 0f16 	cmn.w	r0, #22
 8005c14:	da09      	bge.n	8005c2a <scalbnf+0x9a>
 8005c16:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8005c50 <scalbnf+0xc0>
 8005c1a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8005c54 <scalbnf+0xc4>
 8005c1e:	ee10 3a10 	vmov	r3, s0
 8005c22:	eeb0 7a67 	vmov.f32	s14, s15
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	e7d9      	b.n	8005bde <scalbnf+0x4e>
 8005c2a:	3019      	adds	r0, #25
 8005c2c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005c30:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8005c34:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8005c58 <scalbnf+0xc8>
 8005c38:	ee07 3a90 	vmov	s15, r3
 8005c3c:	e7d7      	b.n	8005bee <scalbnf+0x5e>
 8005c3e:	bf00      	nop
 8005c40:	ffff3cb0 	.word	0xffff3cb0
 8005c44:	4c000000 	.word	0x4c000000
 8005c48:	7149f2ca 	.word	0x7149f2ca
 8005c4c:	f149f2ca 	.word	0xf149f2ca
 8005c50:	0da24260 	.word	0x0da24260
 8005c54:	8da24260 	.word	0x8da24260
 8005c58:	33000000 	.word	0x33000000

08005c5c <floorf>:
 8005c5c:	ee10 3a10 	vmov	r3, s0
 8005c60:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005c64:	3a7f      	subs	r2, #127	@ 0x7f
 8005c66:	2a16      	cmp	r2, #22
 8005c68:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005c6c:	dc2b      	bgt.n	8005cc6 <floorf+0x6a>
 8005c6e:	2a00      	cmp	r2, #0
 8005c70:	da12      	bge.n	8005c98 <floorf+0x3c>
 8005c72:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8005cd8 <floorf+0x7c>
 8005c76:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005c7a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c82:	dd06      	ble.n	8005c92 <floorf+0x36>
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	da24      	bge.n	8005cd2 <floorf+0x76>
 8005c88:	2900      	cmp	r1, #0
 8005c8a:	4b14      	ldr	r3, [pc, #80]	@ (8005cdc <floorf+0x80>)
 8005c8c:	bf08      	it	eq
 8005c8e:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8005c92:	ee00 3a10 	vmov	s0, r3
 8005c96:	4770      	bx	lr
 8005c98:	4911      	ldr	r1, [pc, #68]	@ (8005ce0 <floorf+0x84>)
 8005c9a:	4111      	asrs	r1, r2
 8005c9c:	420b      	tst	r3, r1
 8005c9e:	d0fa      	beq.n	8005c96 <floorf+0x3a>
 8005ca0:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8005cd8 <floorf+0x7c>
 8005ca4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005ca8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cb0:	ddef      	ble.n	8005c92 <floorf+0x36>
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	bfbe      	ittt	lt
 8005cb6:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8005cba:	fa40 f202 	asrlt.w	r2, r0, r2
 8005cbe:	189b      	addlt	r3, r3, r2
 8005cc0:	ea23 0301 	bic.w	r3, r3, r1
 8005cc4:	e7e5      	b.n	8005c92 <floorf+0x36>
 8005cc6:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8005cca:	d3e4      	bcc.n	8005c96 <floorf+0x3a>
 8005ccc:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005cd0:	4770      	bx	lr
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	e7dd      	b.n	8005c92 <floorf+0x36>
 8005cd6:	bf00      	nop
 8005cd8:	7149f2ca 	.word	0x7149f2ca
 8005cdc:	bf800000 	.word	0xbf800000
 8005ce0:	007fffff 	.word	0x007fffff

08005ce4 <_init>:
 8005ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ce6:	bf00      	nop
 8005ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cea:	bc08      	pop	{r3}
 8005cec:	469e      	mov	lr, r3
 8005cee:	4770      	bx	lr

08005cf0 <_fini>:
 8005cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cf2:	bf00      	nop
 8005cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cf6:	bc08      	pop	{r3}
 8005cf8:	469e      	mov	lr, r3
 8005cfa:	4770      	bx	lr
