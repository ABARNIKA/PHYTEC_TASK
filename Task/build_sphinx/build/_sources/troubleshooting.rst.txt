Troubleshooting Guide
====================

This comprehensive troubleshooting guide provides systematic approaches to diagnosing and resolving issues encountered during EFR32ZG28 development.

Hardware Troubleshooting
------------------------

Board Connection Issues
~~~~~~~~~~~~~~~~~~~~~~

Problem: J-Link Cannot Connect to Target
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: text
   :caption: Connection Failure Symptoms

   Error: "Cannot connect to target"
   Error: "No J-Link device found"
   Error: "SWD communication failure"

**Diagnostic Steps:**

.. code-block:: bash
   :caption: Hardware Connection Diagnosis

   # Step 1: Check USB connection
   lsusb | grep -i segger
   # Expected: Bus XXX Device XXX: ID 1366:1015 SEGGER J-Link
   
   # Step 2: Test J-Link communication
   JLinkExe -?
   # Should show J-Link version and available commands
   
   # Step 3: Test target detection
   JLinkExe -device EFR32ZG28B312F1024IM48-A -if SWD -speed 4000 -autoconnect 1

**Solutions:**

1. **USB Cable Issues**
   
   - Try different USB cable (data cable, not charge-only)
   - Test different USB ports
   - Check for USB 3.0 compatibility issues

2. **Power Supply Problems**
   
   - Verify board power LED is on
   - Measure VDD: should be 3.3V ±5%
   - Check for short circuits

3. **SWD Interface Issues**
   
   - Verify SWD pins not damaged
   - Check for external connections interfering
   - Try slower SWD speed (1000 kHz)

Problem: Device Recognition Warnings
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: text
   :caption: Device Recognition Issues

   Warning: "Device EFR32ZG28B312F1024IM48-A unknown to this software version"
   Info: "Device EFR32ZG28BXXXF1024 selected"

**Analysis:**

This is a **warning only** and does not affect functionality:

- J-Link automatically selects compatible device profile
- All programming and debugging functions work correctly
- CPUID verification confirms correct device detection

**Resolution:**

.. code-block:: bash
   :caption: Device Verification

   # Verify correct device detection
   cat > verify_device.jlink << 'EOF'
   device EFR32ZG28B312F1024IM48-A
   si SWD
   speed 4000
   connect
   mem32 0xE000ED00 1
   echo "CPUID should be 0x411FD210 for Cortex-M33"
   exit
   EOF
   
   JLinkExe -CommanderScript verify_device.jlink

Power and Clock Issues
~~~~~~~~~~~~~~~~~~~~~

Problem: Inconsistent Operation
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Symptoms:**
- Intermittent connection failures
- Unexpected resets during operation
- Clock-related timing issues

**Diagnostic Script:**

.. code-block:: bash
   :caption: Power and Clock Analysis

   #!/bin/bash
   echo "=== EFR32ZG28 Power and Clock Analysis ==="
   
   cat > power_clock_test.jlink << 'EOF'
   device EFR32ZG28B312F1024IM48-A
   si SWD
   speed 4000
   connect
   
   echo "=== Power Supply Analysis ==="
   echo "Check power LED status on board"
   echo "Measure VDD voltage (should be 3.3V)"
   
   echo "=== Clock System Analysis ==="
   echo "CMU base register:"
   mem32 0x40008000 1
   
   echo "System clock status:"
   mem32 0x40008004 1
   
   exit
   EOF
   
   JLinkExe -CommanderScript power_clock_test.jlink

Software Troubleshooting
------------------------

Build System Issues
~~~~~~~~~~~~~~~~~~

Problem: Compilation Failures
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Common Error: Missing Standard Types**

.. code-block:: text
   :caption: Type Definition Errors

   error: unknown type name 'uint32_t'
   error: 'volatile' not permitted here

**Solution:**

.. code-block:: c
   :caption: Required Headers

   #include <stdint.h>    // For uint32_t, uint8_t, etc.
   #include <stdbool.h>   // For bool type
   #include <stddef.h>    // For size_t, NULL

**Common Error: Linker Script Issues**

.. code-block:: text
   :caption: Linker Errors

   error: region `FLASH' overflowed by X bytes
   error: undefined reference to `Reset_Handler'

**Solution:**

.. code-block:: bash
   :caption: Linker Script Verification

   # Check memory definitions
   grep -A 5 "MEMORY" efr32zg28.ld
   
   # Verify vector table inclusion
   grep -A 10 ".text" efr32zg28.ld
   
   # Check startup file linking
   arm-none-eabi-objdump -t startup_efr32zg28.o | grep Reset_Handler

Problem: Flash Programming Failures
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Error: Flash Write Failures**

.. code-block:: text
   :caption: Flash Programming Errors

   Error: "Flash download failed"
   Error: "Verification failed"
   Error: "Flash erase failed"

**Diagnostic Procedure:**

.. code-block:: bash
   :caption: Flash Troubleshooting Script

   #!/bin/bash
   echo "=== Flash Programming Diagnostics ==="
   
   # Test 1: Flash memory detection
   cat > flash_detect.jlink << 'EOF'
   device EFR32ZG28B312F1024IM48-A
   si SWD
   speed 4000
   connect
   
   echo "Flash memory detection:"
   mem32 0x08000000 4
   
   echo "Flash size verification:"
   mem32 0x08100000 1
   echo "(Should fail - beyond flash range)"
   
   exit
   EOF
   
   JLinkExe -CommanderScript flash_detect.jlink
   
   # Test 2: Erase and program test
   echo "Testing flash erase..."
   JLinkExe -device EFR32ZG28B312F1024IM48-A -if SWD -speed 4000 \
            -CommandFile - << 'EOF'
   connect
   erase
   loadfile minimal_led_blink.hex
   verifyfile minimal_led_blink.hex
   exit
   EOF

TrustZone and Security Issues
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Problem: GPIO Register Access Failures
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Error Symptoms:**

.. code-block:: text
   :caption: TrustZone Access Errors

   J-Link>mem32 0x4003C034 1
   Could not read memory.
   
   J-Link>w32 0x4003C034 0x100
   Writing target memory failed.

**Root Cause Analysis:**

This is **expected behavior** due to TrustZone security:

1. GPIO registers are classified as "Secure" peripherals
2. External debuggers lack proper security credentials
3. Only Silicon Labs authenticated tools can access these registers

**Verification Script:**

.. code-block:: bash
   :caption: TrustZone Security Verification

   #!/bin/bash
   echo "=== TrustZone Security Analysis ==="
   
   cat > trustzone_verify.jlink << 'EOF'
   device EFR32ZG28B312F1024IM48-A
   si SWD
   speed 4000
   connect
   
   echo "=== Accessible Registers ==="
   echo "CPUID (should work):"
   mem32 0xE000ED00 1
   
   echo "RAM access (should work):"
   w32 0x20000000 0x12345678
   mem32 0x20000000 1
   
   echo "=== Protected Registers ==="
   echo "GPIO PC_DOUT (should fail):"
   mem32 0x4003C034 1
   
   echo "SMU register (should fail):"
   mem32 0x54008050 1
   
   echo "=== CONCLUSION ==="
   echo "If GPIO access fails, TrustZone is working correctly"
   echo "Use Simplicity Studio 5 for GPIO access"
   
   exit
   EOF
   
   JLinkExe -CommanderScript trustzone_verify.jlink

Problem: HardFault During Execution
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Error Symptoms:**

.. code-block:: text
   :caption: HardFault Analysis

   XPSR = 39000003: IPSR = 003 (HardFault)
   PC = EFFFFFFE
   Status: Fault during GPIO register access

**Diagnostic Steps:**

.. code-block:: bash
   :caption: HardFault Analysis Script

   #!/bin/bash
   echo "=== HardFault Analysis ==="
   
   cat > hardfault_debug.jlink << 'EOF'
   device EFR32ZG28B312F1024IM48-A
   si SWD
   speed 4000
   connect
   
   echo "Load and run program..."
   loadfile minimal_led_blink.hex
   go
   sleep 2000
   halt
   
   echo "=== Fault Analysis ==="
   regs
   
   echo "Check fault status registers:"
   mem32 0xE000ED28 1
   echo "Hard Fault Status Register"
   
   mem32 0xE000ED2C 1
   echo "Configurable Fault Status Register"
   
   exit
   EOF
   
   JLinkExe -CommanderScript hardfault_debug.jlink

**Solution:**

HardFault occurs due to attempted access to TrustZone-protected registers. This is expected and confirms security is working correctly.

SS5 Integration Issues
~~~~~~~~~~~~~~~~~~~~~

Problem: SS5 Build Failures
^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Error: Component Not Found**

.. code-block:: text
   :caption: SS5 Component Errors

   Error: Component 'simple_led' not found
   Error: Device 'EFR32ZG28B312F1024IM48-A' not supported

**Solution Steps:**

.. code-block:: bash
   :caption: SS5 Troubleshooting

   # Step 1: Verify Gecko SDK installation
   if [ -z "$GECKO_SDK_PATH" ]; then
       echo "Error: GECKO_SDK_PATH not set"
       echo "Install latest Gecko SDK via SS5 Package Manager"
   fi
   
   # Step 2: Check EFR32ZG28 support
   find $GECKO_SDK_PATH -name "*efr32zg28*" -type d
   
   # Step 3: Verify SLC command
   slc --version
   
   # Step 4: Regenerate project
   cd ss5_project
   slc generate
   make clean
   make

Problem: SS5 Component Configuration
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Error: Missing Component Dependencies**

.. code-block:: text
   :caption: Component Dependency Errors

   Error: Component dependency not satisfied
   Warning: Configuration mismatch

**Solution:**

.. code-block:: yaml
   :caption: Correct Component Configuration

   # Essential components for EFR32ZG28
   component:
   - {id: device_init}        # Required for TrustZone
   - {id: device_init_hfxo}   # Clock initialization
   - {id: sl_system}          # System services
   - {id: simple_led}         # LED control
   - {id: power_manager}      # Power management

Progressive Debugging Methodology
---------------------------------

Systematic Troubleshooting Approach
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Step 1: Hardware Validation
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: bash
   :caption: Hardware Validation Checklist

   #!/bin/bash
   echo "=== Step 1: Hardware Validation ==="
   
   # Check 1: Board power
   echo "✓ Check power LED on board"
   echo "✓ Measure VDD voltage (should be 3.3V)"
   
   # Check 2: USB connection
   echo "Checking USB connection..."
   lsusb | grep -i segger && echo "✓ J-Link detected" || echo "✗ J-Link not found"
   
   # Check 3: J-Link communication
   echo "Testing J-Link communication..."
   JLinkExe -device EFR32ZG28B312F1024IM48-A -if SWD -speed 4000 -autoconnect 1 \
            -CommanderScript /dev/null && echo "✓ J-Link communication OK" || echo "✗ J-Link communication failed"

Step 2: Software Environment
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: bash
   :caption: Software Environment Validation

   #!/bin/bash
   echo "=== Step 2: Software Environment ==="
   
   # Check toolchain
   echo "Checking ARM GCC toolchain..."
   arm-none-eabi-gcc --version && echo "✓ GCC ARM available" || echo "✗ GCC ARM missing"
   
   # Check Gecko SDK
   echo "Checking Gecko SDK..."
   [ -n "$GECKO_SDK_PATH" ] && echo "✓ GECKO_SDK_PATH set" || echo "✗ GECKO_SDK_PATH not set"
   
   # Check SS5 tools
   echo "Checking SS5 tools..."
   command -v slc &> /dev/null && echo "✓ SLC available" || echo "⚠ SLC not found (SS5 installation)"

Step 3: Build System Test
^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: bash
   :caption: Build System Validation

   #!/bin/bash
   echo "=== Step 3: Build System Test ==="
   
   # Test minimal build
   echo "Testing minimal build..."
   cat > test_build.c << 'EOF'
   #include <stdint.h>
   volatile uint32_t test_var = 0x12345678;
   int main(void) { while(1) test_var++; }
   EOF
   
   arm-none-eabi-gcc -mcpu=cortex-m33 -mthumb -specs=nosys.specs \
       -T efr32zg28.ld -o test_build.elf test_build.c && \
       echo "✓ Build successful" || echo "✗ Build failed"
   
   # Test flash programming
   if [ -f test_build.elf ]; then
       arm-none-eabi-objcopy -O ihex test_build.elf test_build.hex
       echo "Testing flash programming..."
       # Flash test would go here
   fi

Step 4: TrustZone Analysis
^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: bash
   :caption: TrustZone Security Analysis

   #!/bin/bash
   echo "=== Step 4: TrustZone Analysis ==="
   
   cat > trustzone_test.jlink << 'EOF'
   device EFR32ZG28B312F1024IM48-A
   si SWD
   speed 4000
   connect
   
   echo "Testing accessible registers:"
   mem32 0xE000ED00 1
   echo "CPUID read result (should succeed)"
   
   echo "Testing protected registers:"
   mem32 0x4003C034 1
   echo "GPIO read result (should fail with TrustZone)"
   
   exit
   EOF
   
   JLinkExe -CommanderScript trustzone_test.jlink

Step 5: Solution Implementation
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: bash
   :caption: Solution Implementation Test

   #!/bin/bash
   echo "=== Step 5: Solution Implementation ==="
   
   # Test SS5 integration
   if [ -d "ss5_project" ]; then
       echo "Testing SS5 integration..."
       cd ss5_project
       slc generate && make && echo "✓ SS5 build successful" || echo "✗ SS5 build failed"
       cd ..
   fi
   
   # Test alternative solutions
   echo "Testing alternative solutions..."
   ./complete_build_flash.sh gcc && echo "✓ GCC solution works" || echo "✗ GCC solution failed"

Common Error Patterns and Solutions
----------------------------------

Error Pattern Matrix
~~~~~~~~~~~~~~~~~~~

.. list-table:: Common Error Resolution Matrix
   :header-rows: 1
   :widths: 30 35 35

   * - Error Pattern
     - Root Cause
     - Solution
   * - "Could not read memory"
     - TrustZone protection
     - Use SS5 integration
   * - "Device unknown"
     - J-Link database
     - Warning only, continue
   * - "Flash download failed"
     - Connection/power issue
     - Check hardware connections
   * - "undefined reference"
     - Missing object files
     - Check linker configuration
   * - "region overflowed"
     - Code too large
     - Optimize or increase memory
   * - "Component not found"
     - Missing SDK/SS5
     - Install required tools
   * - IPSR = 003 (HardFault)
     - TrustZone access attempt
     - Expected with external tools

Automated Troubleshooting Tools
------------------------------

Ultimate Troubleshooting Script
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: bash
   :caption: complete_troubleshooting.sh - Comprehensive Diagnosis

   #!/bin/bash
   set -e
   
   echo "=== EFR32ZG28 Ultimate Troubleshooting Tool ==="
   echo "This script will systematically test all aspects of the development environment"
   echo ""
   
   # Initialize result tracking
   declare -A results
   
   # Function to run test and track results
   run_test() {
       local test_name="$1"
       local test_command="$2"
       
       echo "Running: $test_name"
       if eval "$test_command" &>/dev/null; then
           echo "✓ PASS: $test_name"
           results["$test_name"]="PASS"
       else
           echo "✗ FAIL: $test_name"
           results["$test_name"]="FAIL"
       fi
   }
   
   # Hardware tests
   echo "=== HARDWARE TESTS ==="
   run_test "USB_Connection" "lsusb | grep -i segger"
   run_test "J-Link_Command" "JLinkExe -?"
   run_test "Target_Detection" "echo 'connect\nexit' | JLinkExe -device EFR32ZG28B312F1024IM48-A -if SWD"
   
   # Software tests
   echo "=== SOFTWARE TESTS ==="
   run_test "GCC_ARM_Toolchain" "arm-none-eabi-gcc --version"
   run_test "Gecko_SDK_Path" "test -n '$GECKO_SDK_PATH'"
   run_test "EFR32ZG28_Support" "test -d '$GECKO_SDK_PATH/platform/Device/SiliconLabs/EFR32ZG28'"
   run_test "SLC_Command" "slc --version"
   
   # Build tests
   echo "=== BUILD TESTS ==="
   run_test "Minimal_Compile" "arm-none-eabi-gcc -mcpu=cortex-m33 -mthumb -c -o /tmp/test.o /dev/null"
   run_test "Linker_Script" "test -f efr32zg28.ld"
   run_test "SS5_Project" "test -f ss5_project/efr32zg28_contiki.slcp"
   
   # Security tests
   echo "=== SECURITY TESTS ==="
   run_test "TrustZone_Active" "echo 'connect\nmem32 0x4003C034 1\nexit' | JLinkExe -device EFR32ZG28B312F1024IM48-A -if SWD | grep -q 'Could not read'"
   
   # Generate report
   echo ""
   echo "=== TROUBLESHOOTING REPORT ==="
   echo "Test Results Summary:"
   
   pass_count=0
   fail_count=0
   
   for test in "${!results[@]}"; do
       result="${results[$test]}"
       echo "  $test: $result"
       if [ "$result" = "PASS" ]; then
           ((pass_count++))
       else
           ((fail_count++))
       fi
   done
   
   echo ""
   echo "Summary: $pass_count passed, $fail_count failed"
   
   # Provide recommendations
   echo ""
   echo "=== RECOMMENDATIONS ==="
   
   if [ "${results[TrustZone_Active]}" = "PASS" ]; then
       echo "✓ TrustZone security is active (expected)"
       echo "  → Use Simplicity Studio 5 for GPIO access"
   fi
   
   if [ "${results[SS5_Project]}" = "PASS" ]; then
       echo "✓ SS5 project available"
       echo "  → Run: cd ss5_project && slc generate && make"
   fi
   
   if [ $fail_count -eq 0 ]; then
       echo "🎉 All tests passed! System ready for development."
   else
       echo "⚠️  Some tests failed. Address failed items before proceeding."
   fi

Debug Variable Monitoring
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: bash
   :caption: debug_monitor.sh - Runtime Variable Monitoring

   #!/bin/bash
   echo "=== Debug Variable Monitoring ==="
   
   # Create monitoring script for J-Link
   cat > monitor_variables.jlink << 'EOF'
   device EFR32ZG28B312F1024IM48-A
   si SWD
   speed 4000
   connect
   
   echo "Starting debug variable monitoring..."
   echo "Note: Variables will be at different addresses each run"
   
   # Start program
   loadfile minimal_led_blink.hex
   go
   
   # Monitor for 10 seconds
   sleep 2000
   halt
   
   echo "=== Debug Variable Search ==="
   echo "Searching for debug variables in RAM..."
   
   # Search common patterns
   mem32 0x20000000 64
   
   echo "Look for incrementing values (debug counters)"
   echo "Look for 0x12345678 or similar signature values"
   
   exit
   EOF
   
   JLinkExe -CommanderScript monitor_variables.jlink

Emergency Recovery Procedures
----------------------------

System Recovery
~~~~~~~~~~~~~~

Complete System Reset
^^^^^^^^^^^^^^^^^^^^^

.. code-block:: bash
   :caption: emergency_recovery.sh - Complete System Recovery

   #!/bin/bash
   echo "=== Emergency Recovery Procedure ==="
   
   # Step 1: Hardware reset
   echo "Step 1: Performing hardware reset..."
   cat > hardware_reset.jlink << 'EOF'
   device EFR32ZG28B312F1024IM48-A
   si SWD
   speed 4000
   connect
   
   # Perform system reset
   w32 0xE000ED0C 0x05FA0004
   
   # Wait for reset
   sleep 1000
   
   # Reconnect
   connect
   
   echo "Hardware reset complete"
   exit
   EOF
   
   JLinkExe -CommanderScript hardware_reset.jlink
   
   # Step 2: Flash erase
   echo "Step 2: Erasing flash memory..."
   cat > flash_erase.jlink << 'EOF'
   device EFR32ZG28B312F1024IM48-A
   si SWD
   speed 4000
   connect
   
   # Erase entire flash
   erase
   
   echo "Flash erase complete"
   exit
   EOF
   
   JLinkExe -CommanderScript flash_erase.jlink
   
   echo "Emergency recovery complete"
   echo "System ready for fresh programming"

Flash Recovery
^^^^^^^^^^^^^

.. code-block:: bash
   :caption: flash_recovery.sh - Flash Memory Recovery

   #!/bin/bash
   echo "=== Flash Memory Recovery ==="
   
   # Test flash accessibility
   echo "Testing flash memory accessibility..."
   cat > flash_test.jlink << 'EOF'
   device EFR32ZG28B312F1024IM48-A
   si SWD
   speed 4000
   connect
   
   echo "Flash memory test:"
   mem32 0x08000000 4
   
   echo "Testing flash write capability:"
   w32 0x08000000 0x12345678
   mem32 0x08000000 1
   
   exit
   EOF
   
   JLinkExe -CommanderScript flash_test.jlink
   
   # If flash is accessible, reprogram with known good binary
   if [ -f "minimal_led_blink.hex" ]; then
       echo "Reprogramming with known good binary..."
       JLinkExe -device EFR32ZG28B312F1024IM48-A -if SWD -speed 4000 \
                -CommandFile - << 'EOF'
   connect
   erase
   loadfile minimal_led_blink.hex
   verifyfile minimal_led_blink.hex
   go
   exit
   EOF
   fi

Expert-Level Troubleshooting
---------------------------

Advanced Debugging Techniques
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Memory Map Analysis
^^^^^^^^^^^^^^^^^^

.. code-block:: bash
   :caption: advanced_memory_analysis.sh

   #!/bin/bash
   echo "=== Advanced Memory Map Analysis ==="
   
   cat > memory_analysis.jlink << 'EOF'
   device EFR32ZG28B312F1024IM48-A
   si SWD
   speed 4000
   connect
   
   echo "=== Complete Memory Map Analysis ==="
   
   echo "Flash memory mapping:"
   mem32 0x08000000 1
   mem32 0x08080000 1
   mem32 0x080FFFFF 1
   mem32 0x08100000 1
   echo "(Last address should fail)"
   
   echo "RAM memory mapping:"
   mem32 0x20000000 1
   mem32 0x20020000 1
   mem32 0x2003FFFF 1
   mem32 0x20040000 1
   echo "(Last address should fail if 256KB RAM)"
   
   echo "Peripheral memory mapping:"
   mem32 0x40000000 1
   echo "CMU base:"
   mem32 0x40008000 1
   echo "GPIO base (should fail):"
   mem32 0x4003C000 1
   
   exit
   EOF
   
   JLinkExe -CommanderScript memory_analysis.jlink

Security State Analysis
^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: bash
   :caption: security_state_analysis.sh

   #!/bin/bash
   echo "=== Security State Analysis ==="
   
   cat > security_analysis.jlink << 'EOF'
   device EFR32ZG28B312F1024IM48-A
   si SWD
   speed 4000
   connect
   
   echo "=== ARM Cortex-M33 Security Analysis ==="
   
   echo "CPUID (should be 0x411FD210):"
   mem32 0xE000ED00 1
   
   echo "AIRCR (Application Interrupt/Reset Control):"
   mem32 0xE000ED0C 1
   
   echo "Security extension registers:"
   mem32 0xE000ED14 1
   mem32 0xE000ED94 1
   
   echo "Security state indicators:"
   echo "If TrustZone is active, some reads may fail"
   
   exit
   EOF
   
   JLinkExe -CommanderScript security_analysis.jlink

Troubleshooting Decision Tree
----------------------------

Problem Classification
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: text
   :caption: Troubleshooting Decision Tree

   Problem Encountered
   ├── Hardware Issues
   │   ├── Connection Failures → Check USB, power, cables
   │   ├── Device Recognition → Update J-Link, verify device
   │   └── Power Problems → Check voltage, LED status
   │
   ├── Software Issues  
   │   ├── Build Failures → Check toolchain, headers, linker
   │   ├── Flash Failures → Verify connection, erase first
   │   └── Runtime Errors → Check for HardFault, TrustZone
   │
   ├── TrustZone Issues
   │   ├── GPIO Access Denied → Expected, use SS5
   │   ├── HardFault on Access → Expected security response
   │   └── Memory Protection → Cannot bypass, design limitation
   │
   └── Integration Issues
       ├── SS5 Problems → Check SDK, components, dependencies
       ├── Component Errors → Verify configuration, regenerate
       └── Build System → Check paths, tools, permissions

Resolution Priority
~~~~~~~~~~~~~~~~~~

.. list-table:: Issue Resolution Priority
   :header-rows: 1
   :widths: 20 30 25 25

   * - Priority
     - Issue Type
     - Impact
     - Resolution Time
   * - **Critical**
     - Hardware failure
     - Blocks all development
     - Immediate
   * - **High**
     - Build system failure
     - Blocks development
     - Same day
   * - **Medium**
     - TrustZone limitations
     - Requires workaround
     - Within week
   * - **Low**
     - Warning messages
     - Cosmetic only
     - Next release

Support Resources
----------------

Documentation References
~~~~~~~~~~~~~~~~~~~~~~~~

1. **Project Documentation**
   
   - ``FINAL_README.md`` - Complete project guide
   - ``FINAL_SPHINX.md`` - Comprehensive technical reference
   - ``SS5_INTEGRATION_GUIDE.md`` - SS5 setup and usage

2. **Hardware References**
   
   - ``HARDWARE_DEBUG_GUIDE.md`` - Hardware troubleshooting
   - ``JLINK_REFERENCE.md`` - J-Link usage guide
   - EFR32ZG28 datasheet - Silicon Labs official documentation

3. **Software References**
   
   - Gecko SDK documentation
   - ARM Cortex-M33 technical reference
   - TrustZone for ARMv8-M specification

Community Support
~~~~~~~~~~~~~~~~~

1. **Silicon Labs Community**
   
   - Official Silicon Labs forums
   - Simplicity Studio support
   - Gecko SDK GitHub repository

2. **ARM Developer Resources**
   
   - ARM Cortex-M33 documentation
   - TrustZone implementation guides
   - ARM Community forums

3. **Contiki-NG Community**
   
   - Contiki-NG GitHub repository
   - Community forums and discussions
   - Platform-specific guides

**Troubleshooting Status**: ✅ **COMPREHENSIVE** - Complete troubleshooting framework covering hardware, software, security, and integration issues with systematic resolution procedures.
