
FSM_Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002df0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08002fb4  08002fb4  00012fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003094  08003094  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003094  08003094  00013094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800309c  0800309c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800309c  0800309c  0001309c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030a0  080030a0  000130a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080030a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  20000070  08003114  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08003114  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008d7c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016ad  00000000  00000000  00028e1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000758  00000000  00000000  0002a4d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006c0  00000000  00000000  0002ac28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021c59  00000000  00000000  0002b2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000095cf  00000000  00000000  0004cf41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c97c3  00000000  00000000  00056510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011fcd3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002348  00000000  00000000  0011fd24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000070 	.word	0x20000070
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002f9c 	.word	0x08002f9c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000074 	.word	0x20000074
 8000200:	08002f9c 	.word	0x08002f9c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000510:	1d39      	adds	r1, r7, #4
 8000512:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000516:	2201      	movs	r2, #1
 8000518:	4803      	ldr	r0, [pc, #12]	; (8000528 <__io_putchar+0x20>)
 800051a:	f001 fc9a 	bl	8001e52 <HAL_UART_Transmit>
  return ch;
 800051e:	687b      	ldr	r3, [r7, #4]
}
 8000520:	4618      	mov	r0, r3
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	20000090 	.word	0x20000090

0800052c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000530:	f000 faea 	bl	8000b08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000534:	f000 f854 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000538:	f000 f8ea 	bl	8000710 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800053c:	f000 f8be 	bl	80006bc <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
				  while (1)
				  {
    /* USER CODE END WHILE */
					  switch (current_state) {
 8000540:	4b21      	ldr	r3, [pc, #132]	; (80005c8 <main+0x9c>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	2b03      	cmp	r3, #3
 8000546:	d83b      	bhi.n	80005c0 <main+0x94>
 8000548:	a201      	add	r2, pc, #4	; (adr r2, 8000550 <main+0x24>)
 800054a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800054e:	bf00      	nop
 8000550:	08000561 	.word	0x08000561
 8000554:	08000577 	.word	0x08000577
 8000558:	0800058d 	.word	0x0800058d
 800055c:	080005a3 	.word	0x080005a3
					      case IDLE:
					        printf("State: IDLE\r\n");
 8000560:	481a      	ldr	r0, [pc, #104]	; (80005cc <main+0xa0>)
 8000562:	f002 f88b 	bl	800267c <puts>
					        HAL_Delay(1000);
 8000566:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800056a:	f000 fb3f 	bl	8000bec <HAL_Delay>
					        current_state = SELECTING;
 800056e:	4b16      	ldr	r3, [pc, #88]	; (80005c8 <main+0x9c>)
 8000570:	2201      	movs	r2, #1
 8000572:	701a      	strb	r2, [r3, #0]
					        break;
 8000574:	e024      	b.n	80005c0 <main+0x94>

					      case SELECTING:
					        printf("State: SELECTING PRODUCT\r\n");
 8000576:	4816      	ldr	r0, [pc, #88]	; (80005d0 <main+0xa4>)
 8000578:	f002 f880 	bl	800267c <puts>
					        HAL_Delay(1000);
 800057c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000580:	f000 fb34 	bl	8000bec <HAL_Delay>
					        current_state = PAYING;
 8000584:	4b10      	ldr	r3, [pc, #64]	; (80005c8 <main+0x9c>)
 8000586:	2202      	movs	r2, #2
 8000588:	701a      	strb	r2, [r3, #0]
					        break;
 800058a:	e019      	b.n	80005c0 <main+0x94>

					      case PAYING:
					        printf("State: PROCESSING PAYMENT\r\n");
 800058c:	4811      	ldr	r0, [pc, #68]	; (80005d4 <main+0xa8>)
 800058e:	f002 f875 	bl	800267c <puts>
					        HAL_Delay(1000);
 8000592:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000596:	f000 fb29 	bl	8000bec <HAL_Delay>
					        current_state = DISPENSING;
 800059a:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <main+0x9c>)
 800059c:	2203      	movs	r2, #3
 800059e:	701a      	strb	r2, [r3, #0]
					        break;
 80005a0:	e00e      	b.n	80005c0 <main+0x94>

					      case DISPENSING:
					        printf("State: DISPENSING PRODUCT\r\n");
 80005a2:	480d      	ldr	r0, [pc, #52]	; (80005d8 <main+0xac>)
 80005a4:	f002 f86a 	bl	800267c <puts>
					        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);  // Toggle LD2
 80005a8:	2120      	movs	r1, #32
 80005aa:	480c      	ldr	r0, [pc, #48]	; (80005dc <main+0xb0>)
 80005ac:	f000 fe01 	bl	80011b2 <HAL_GPIO_TogglePin>
					        HAL_Delay(1000);
 80005b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005b4:	f000 fb1a 	bl	8000bec <HAL_Delay>
					        current_state = IDLE;
 80005b8:	4b03      	ldr	r3, [pc, #12]	; (80005c8 <main+0x9c>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	701a      	strb	r2, [r3, #0]
					        break;
 80005be:	bf00      	nop
					    }
					  HAL_Delay(200);
 80005c0:	20c8      	movs	r0, #200	; 0xc8
 80005c2:	f000 fb13 	bl	8000bec <HAL_Delay>
					  switch (current_state) {
 80005c6:	e7bb      	b.n	8000540 <main+0x14>
 80005c8:	2000008c 	.word	0x2000008c
 80005cc:	08002fb4 	.word	0x08002fb4
 80005d0:	08002fc4 	.word	0x08002fc4
 80005d4:	08002fe0 	.word	0x08002fe0
 80005d8:	08002ffc 	.word	0x08002ffc
 80005dc:	40020000 	.word	0x40020000

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b094      	sub	sp, #80	; 0x50
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 031c 	add.w	r3, r7, #28
 80005ea:	2234      	movs	r2, #52	; 0x34
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f001 ffce 	bl	8002590 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	f107 0308 	add.w	r3, r7, #8
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	4b2a      	ldr	r3, [pc, #168]	; (80006b4 <SystemClock_Config+0xd4>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	4a29      	ldr	r2, [pc, #164]	; (80006b4 <SystemClock_Config+0xd4>)
 800060e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000612:	6413      	str	r3, [r2, #64]	; 0x40
 8000614:	4b27      	ldr	r3, [pc, #156]	; (80006b4 <SystemClock_Config+0xd4>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000620:	2300      	movs	r3, #0
 8000622:	603b      	str	r3, [r7, #0]
 8000624:	4b24      	ldr	r3, [pc, #144]	; (80006b8 <SystemClock_Config+0xd8>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800062c:	4a22      	ldr	r2, [pc, #136]	; (80006b8 <SystemClock_Config+0xd8>)
 800062e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000632:	6013      	str	r3, [r2, #0]
 8000634:	4b20      	ldr	r3, [pc, #128]	; (80006b8 <SystemClock_Config+0xd8>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800063c:	603b      	str	r3, [r7, #0]
 800063e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000640:	2302      	movs	r3, #2
 8000642:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000644:	2301      	movs	r3, #1
 8000646:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000648:	2310      	movs	r3, #16
 800064a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064c:	2302      	movs	r3, #2
 800064e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000650:	2300      	movs	r3, #0
 8000652:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000654:	2310      	movs	r3, #16
 8000656:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000658:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800065c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800065e:	2304      	movs	r3, #4
 8000660:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000662:	2302      	movs	r3, #2
 8000664:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000666:	2302      	movs	r3, #2
 8000668:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066a:	f107 031c 	add.w	r3, r7, #28
 800066e:	4618      	mov	r0, r3
 8000670:	f001 f904 	bl	800187c <HAL_RCC_OscConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800067a:	f000 f8b7 	bl	80007ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067e:	230f      	movs	r3, #15
 8000680:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000682:	2302      	movs	r3, #2
 8000684:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800068a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000694:	f107 0308 	add.w	r3, r7, #8
 8000698:	2102      	movs	r1, #2
 800069a:	4618      	mov	r0, r3
 800069c:	f000 fda4 	bl	80011e8 <HAL_RCC_ClockConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006a6:	f000 f8a1 	bl	80007ec <Error_Handler>
  }
}
 80006aa:	bf00      	nop
 80006ac:	3750      	adds	r7, #80	; 0x50
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40007000 	.word	0x40007000

080006bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006c0:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006c2:	4a12      	ldr	r2, [pc, #72]	; (800070c <MX_USART2_UART_Init+0x50>)
 80006c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006c6:	4b10      	ldr	r3, [pc, #64]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006da:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006e0:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006e2:	220c      	movs	r2, #12
 80006e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006f2:	4805      	ldr	r0, [pc, #20]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006f4:	f001 fb60 	bl	8001db8 <HAL_UART_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006fe:	f000 f875 	bl	80007ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000090 	.word	0x20000090
 800070c:	40004400 	.word	0x40004400

08000710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08a      	sub	sp, #40	; 0x28
 8000714:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000716:	f107 0314 	add.w	r3, r7, #20
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	613b      	str	r3, [r7, #16]
 800072a:	4b2d      	ldr	r3, [pc, #180]	; (80007e0 <MX_GPIO_Init+0xd0>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a2c      	ldr	r2, [pc, #176]	; (80007e0 <MX_GPIO_Init+0xd0>)
 8000730:	f043 0304 	orr.w	r3, r3, #4
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b2a      	ldr	r3, [pc, #168]	; (80007e0 <MX_GPIO_Init+0xd0>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0304 	and.w	r3, r3, #4
 800073e:	613b      	str	r3, [r7, #16]
 8000740:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	60fb      	str	r3, [r7, #12]
 8000746:	4b26      	ldr	r3, [pc, #152]	; (80007e0 <MX_GPIO_Init+0xd0>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a25      	ldr	r2, [pc, #148]	; (80007e0 <MX_GPIO_Init+0xd0>)
 800074c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b23      	ldr	r3, [pc, #140]	; (80007e0 <MX_GPIO_Init+0xd0>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	4b1f      	ldr	r3, [pc, #124]	; (80007e0 <MX_GPIO_Init+0xd0>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a1e      	ldr	r2, [pc, #120]	; (80007e0 <MX_GPIO_Init+0xd0>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b1c      	ldr	r3, [pc, #112]	; (80007e0 <MX_GPIO_Init+0xd0>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	4b18      	ldr	r3, [pc, #96]	; (80007e0 <MX_GPIO_Init+0xd0>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a17      	ldr	r2, [pc, #92]	; (80007e0 <MX_GPIO_Init+0xd0>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <MX_GPIO_Init+0xd0>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	2120      	movs	r1, #32
 800079a:	4812      	ldr	r0, [pc, #72]	; (80007e4 <MX_GPIO_Init+0xd4>)
 800079c:	f000 fcf0 	bl	8001180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007a6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007b0:	f107 0314 	add.w	r3, r7, #20
 80007b4:	4619      	mov	r1, r3
 80007b6:	480c      	ldr	r0, [pc, #48]	; (80007e8 <MX_GPIO_Init+0xd8>)
 80007b8:	f000 fb4e 	bl	8000e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007bc:	2320      	movs	r3, #32
 80007be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c0:	2301      	movs	r3, #1
 80007c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c8:	2300      	movs	r3, #0
 80007ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	4619      	mov	r1, r3
 80007d2:	4804      	ldr	r0, [pc, #16]	; (80007e4 <MX_GPIO_Init+0xd4>)
 80007d4:	f000 fb40 	bl	8000e58 <HAL_GPIO_Init>

}
 80007d8:	bf00      	nop
 80007da:	3728      	adds	r7, #40	; 0x28
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40020000 	.word	0x40020000
 80007e8:	40020800 	.word	0x40020800

080007ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f0:	b672      	cpsid	i
}
 80007f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
				  /* User can add his own implementation to report the HAL error return state */
				  __disable_irq();
				  while (1)
 80007f4:	e7fe      	b.n	80007f4 <Error_Handler+0x8>
	...

080007f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	4b14      	ldr	r3, [pc, #80]	; (8000854 <HAL_MspInit+0x5c>)
 8000804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000806:	4a13      	ldr	r2, [pc, #76]	; (8000854 <HAL_MspInit+0x5c>)
 8000808:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800080c:	6453      	str	r3, [r2, #68]	; 0x44
 800080e:	4b11      	ldr	r3, [pc, #68]	; (8000854 <HAL_MspInit+0x5c>)
 8000810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	603b      	str	r3, [r7, #0]
 800081e:	4b0d      	ldr	r3, [pc, #52]	; (8000854 <HAL_MspInit+0x5c>)
 8000820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000822:	4a0c      	ldr	r2, [pc, #48]	; (8000854 <HAL_MspInit+0x5c>)
 8000824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000828:	6413      	str	r3, [r2, #64]	; 0x40
 800082a:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <HAL_MspInit+0x5c>)
 800082c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000832:	603b      	str	r3, [r7, #0]
 8000834:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000836:	2007      	movs	r0, #7
 8000838:	f000 facc 	bl	8000dd4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800083c:	2200      	movs	r2, #0
 800083e:	2100      	movs	r1, #0
 8000840:	2005      	movs	r0, #5
 8000842:	f000 fad2 	bl	8000dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000846:	2005      	movs	r0, #5
 8000848:	f000 faeb 	bl	8000e22 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084c:	bf00      	nop
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40023800 	.word	0x40023800

08000858 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08a      	sub	sp, #40	; 0x28
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a19      	ldr	r2, [pc, #100]	; (80008dc <HAL_UART_MspInit+0x84>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d12b      	bne.n	80008d2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	613b      	str	r3, [r7, #16]
 800087e:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <HAL_UART_MspInit+0x88>)
 8000880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000882:	4a17      	ldr	r2, [pc, #92]	; (80008e0 <HAL_UART_MspInit+0x88>)
 8000884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000888:	6413      	str	r3, [r2, #64]	; 0x40
 800088a:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <HAL_UART_MspInit+0x88>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <HAL_UART_MspInit+0x88>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a10      	ldr	r2, [pc, #64]	; (80008e0 <HAL_UART_MspInit+0x88>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <HAL_UART_MspInit+0x88>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008b2:	230c      	movs	r3, #12
 80008b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b6:	2302      	movs	r3, #2
 80008b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008be:	2303      	movs	r3, #3
 80008c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008c2:	2307      	movs	r3, #7
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	4619      	mov	r1, r3
 80008cc:	4805      	ldr	r0, [pc, #20]	; (80008e4 <HAL_UART_MspInit+0x8c>)
 80008ce:	f000 fac3 	bl	8000e58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008d2:	bf00      	nop
 80008d4:	3728      	adds	r7, #40	; 0x28
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40004400 	.word	0x40004400
 80008e0:	40023800 	.word	0x40023800
 80008e4:	40020000 	.word	0x40020000

080008e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008ec:	e7fe      	b.n	80008ec <NMI_Handler+0x4>

080008ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f2:	e7fe      	b.n	80008f2 <HardFault_Handler+0x4>

080008f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <MemManage_Handler+0x4>

080008fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008fe:	e7fe      	b.n	80008fe <BusFault_Handler+0x4>

08000900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000904:	e7fe      	b.n	8000904 <UsageFault_Handler+0x4>

08000906 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr

08000922 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000934:	f000 f93a 	bl	8000bac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}

0800093c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr

0800094a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	b086      	sub	sp, #24
 800094e:	af00      	add	r7, sp, #0
 8000950:	60f8      	str	r0, [r7, #12]
 8000952:	60b9      	str	r1, [r7, #8]
 8000954:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000956:	2300      	movs	r3, #0
 8000958:	617b      	str	r3, [r7, #20]
 800095a:	e00a      	b.n	8000972 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800095c:	f3af 8000 	nop.w
 8000960:	4601      	mov	r1, r0
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	1c5a      	adds	r2, r3, #1
 8000966:	60ba      	str	r2, [r7, #8]
 8000968:	b2ca      	uxtb	r2, r1
 800096a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	3301      	adds	r3, #1
 8000970:	617b      	str	r3, [r7, #20]
 8000972:	697a      	ldr	r2, [r7, #20]
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	429a      	cmp	r2, r3
 8000978:	dbf0      	blt.n	800095c <_read+0x12>
  }

  return len;
 800097a:	687b      	ldr	r3, [r7, #4]
}
 800097c:	4618      	mov	r0, r3
 800097e:	3718      	adds	r7, #24
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000990:	2300      	movs	r3, #0
 8000992:	617b      	str	r3, [r7, #20]
 8000994:	e009      	b.n	80009aa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	1c5a      	adds	r2, r3, #1
 800099a:	60ba      	str	r2, [r7, #8]
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff fdb2 	bl	8000508 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	3301      	adds	r3, #1
 80009a8:	617b      	str	r3, [r7, #20]
 80009aa:	697a      	ldr	r2, [r7, #20]
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	429a      	cmp	r2, r3
 80009b0:	dbf1      	blt.n	8000996 <_write+0x12>
  }
  return len;
 80009b2:	687b      	ldr	r3, [r7, #4]
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3718      	adds	r7, #24
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <_close>:

int _close(int file)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	370c      	adds	r7, #12
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr

080009d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009e4:	605a      	str	r2, [r3, #4]
  return 0;
 80009e6:	2300      	movs	r3, #0
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <_isatty>:

int _isatty(int file)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009fc:	2301      	movs	r3, #1
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr

08000a0a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	b085      	sub	sp, #20
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	60f8      	str	r0, [r7, #12]
 8000a12:	60b9      	str	r1, [r7, #8]
 8000a14:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a16:	2300      	movs	r3, #0
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3714      	adds	r7, #20
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a2c:	4a14      	ldr	r2, [pc, #80]	; (8000a80 <_sbrk+0x5c>)
 8000a2e:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <_sbrk+0x60>)
 8000a30:	1ad3      	subs	r3, r2, r3
 8000a32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a38:	4b13      	ldr	r3, [pc, #76]	; (8000a88 <_sbrk+0x64>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d102      	bne.n	8000a46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a40:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <_sbrk+0x64>)
 8000a42:	4a12      	ldr	r2, [pc, #72]	; (8000a8c <_sbrk+0x68>)
 8000a44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a46:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <_sbrk+0x64>)
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d207      	bcs.n	8000a64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a54:	f001 fd72 	bl	800253c <__errno>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	220c      	movs	r2, #12
 8000a5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a62:	e009      	b.n	8000a78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a64:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <_sbrk+0x64>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a6a:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <_sbrk+0x64>)
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4413      	add	r3, r2
 8000a72:	4a05      	ldr	r2, [pc, #20]	; (8000a88 <_sbrk+0x64>)
 8000a74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a76:	68fb      	ldr	r3, [r7, #12]
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3718      	adds	r7, #24
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20020000 	.word	0x20020000
 8000a84:	00000400 	.word	0x00000400
 8000a88:	200000d4 	.word	0x200000d4
 8000a8c:	200000f0 	.word	0x200000f0

08000a90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <SystemInit+0x20>)
 8000a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a9a:	4a05      	ldr	r2, [pc, #20]	; (8000ab0 <SystemInit+0x20>)
 8000a9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ab4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ab8:	480d      	ldr	r0, [pc, #52]	; (8000af0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000aba:	490e      	ldr	r1, [pc, #56]	; (8000af4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000abc:	4a0e      	ldr	r2, [pc, #56]	; (8000af8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000abe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac0:	e002      	b.n	8000ac8 <LoopCopyDataInit>

08000ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ac6:	3304      	adds	r3, #4

08000ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000acc:	d3f9      	bcc.n	8000ac2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ace:	4a0b      	ldr	r2, [pc, #44]	; (8000afc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ad0:	4c0b      	ldr	r4, [pc, #44]	; (8000b00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad4:	e001      	b.n	8000ada <LoopFillZerobss>

08000ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad8:	3204      	adds	r2, #4

08000ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000adc:	d3fb      	bcc.n	8000ad6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ade:	f7ff ffd7 	bl	8000a90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ae2:	f001 fd31 	bl	8002548 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ae6:	f7ff fd21 	bl	800052c <main>
  bx  lr    
 8000aea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000aec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000af8:	080030a4 	.word	0x080030a4
  ldr r2, =_sbss
 8000afc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b00:	200000ec 	.word	0x200000ec

08000b04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b04:	e7fe      	b.n	8000b04 <ADC_IRQHandler>
	...

08000b08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b0c:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <HAL_Init+0x40>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a0d      	ldr	r2, [pc, #52]	; (8000b48 <HAL_Init+0x40>)
 8000b12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b18:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <HAL_Init+0x40>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a0a      	ldr	r2, [pc, #40]	; (8000b48 <HAL_Init+0x40>)
 8000b1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b24:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <HAL_Init+0x40>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a07      	ldr	r2, [pc, #28]	; (8000b48 <HAL_Init+0x40>)
 8000b2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b30:	2003      	movs	r0, #3
 8000b32:	f000 f94f 	bl	8000dd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b36:	2000      	movs	r0, #0
 8000b38:	f000 f808 	bl	8000b4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b3c:	f7ff fe5c 	bl	80007f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b40:	2300      	movs	r3, #0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40023c00 	.word	0x40023c00

08000b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b54:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <HAL_InitTick+0x54>)
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <HAL_InitTick+0x58>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f000 f967 	bl	8000e3e <HAL_SYSTICK_Config>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
 8000b78:	e00e      	b.n	8000b98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2b0f      	cmp	r3, #15
 8000b7e:	d80a      	bhi.n	8000b96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b80:	2200      	movs	r2, #0
 8000b82:	6879      	ldr	r1, [r7, #4]
 8000b84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b88:	f000 f92f 	bl	8000dea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b8c:	4a06      	ldr	r2, [pc, #24]	; (8000ba8 <HAL_InitTick+0x5c>)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b92:	2300      	movs	r3, #0
 8000b94:	e000      	b.n	8000b98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000000 	.word	0x20000000
 8000ba4:	20000008 	.word	0x20000008
 8000ba8:	20000004 	.word	0x20000004

08000bac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_IncTick+0x20>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <HAL_IncTick+0x24>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4413      	add	r3, r2
 8000bbc:	4a04      	ldr	r2, [pc, #16]	; (8000bd0 <HAL_IncTick+0x24>)
 8000bbe:	6013      	str	r3, [r2, #0]
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	20000008 	.word	0x20000008
 8000bd0:	200000d8 	.word	0x200000d8

08000bd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd8:	4b03      	ldr	r3, [pc, #12]	; (8000be8 <HAL_GetTick+0x14>)
 8000bda:	681b      	ldr	r3, [r3, #0]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	200000d8 	.word	0x200000d8

08000bec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bf4:	f7ff ffee 	bl	8000bd4 <HAL_GetTick>
 8000bf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c04:	d005      	beq.n	8000c12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c06:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <HAL_Delay+0x44>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	4413      	add	r3, r2
 8000c10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c12:	bf00      	nop
 8000c14:	f7ff ffde 	bl	8000bd4 <HAL_GetTick>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d8f7      	bhi.n	8000c14 <HAL_Delay+0x28>
  {
  }
}
 8000c24:	bf00      	nop
 8000c26:	bf00      	nop
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000008 	.word	0x20000008

08000c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f003 0307 	and.w	r3, r3, #7
 8000c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <__NVIC_SetPriorityGrouping+0x44>)
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c4a:	68ba      	ldr	r2, [r7, #8]
 8000c4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c50:	4013      	ands	r3, r2
 8000c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c66:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <__NVIC_SetPriorityGrouping+0x44>)
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	60d3      	str	r3, [r2, #12]
}
 8000c6c:	bf00      	nop
 8000c6e:	3714      	adds	r7, #20
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c80:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <__NVIC_GetPriorityGrouping+0x18>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	0a1b      	lsrs	r3, r3, #8
 8000c86:	f003 0307 	and.w	r3, r3, #7
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	db0b      	blt.n	8000cc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	f003 021f 	and.w	r2, r3, #31
 8000cb0:	4907      	ldr	r1, [pc, #28]	; (8000cd0 <__NVIC_EnableIRQ+0x38>)
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	095b      	lsrs	r3, r3, #5
 8000cb8:	2001      	movs	r0, #1
 8000cba:	fa00 f202 	lsl.w	r2, r0, r2
 8000cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	e000e100 	.word	0xe000e100

08000cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	6039      	str	r1, [r7, #0]
 8000cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	db0a      	blt.n	8000cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	b2da      	uxtb	r2, r3
 8000cec:	490c      	ldr	r1, [pc, #48]	; (8000d20 <__NVIC_SetPriority+0x4c>)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	0112      	lsls	r2, r2, #4
 8000cf4:	b2d2      	uxtb	r2, r2
 8000cf6:	440b      	add	r3, r1
 8000cf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cfc:	e00a      	b.n	8000d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	b2da      	uxtb	r2, r3
 8000d02:	4908      	ldr	r1, [pc, #32]	; (8000d24 <__NVIC_SetPriority+0x50>)
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	f003 030f 	and.w	r3, r3, #15
 8000d0a:	3b04      	subs	r3, #4
 8000d0c:	0112      	lsls	r2, r2, #4
 8000d0e:	b2d2      	uxtb	r2, r2
 8000d10:	440b      	add	r3, r1
 8000d12:	761a      	strb	r2, [r3, #24]
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000e100 	.word	0xe000e100
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b089      	sub	sp, #36	; 0x24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	f003 0307 	and.w	r3, r3, #7
 8000d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	f1c3 0307 	rsb	r3, r3, #7
 8000d42:	2b04      	cmp	r3, #4
 8000d44:	bf28      	it	cs
 8000d46:	2304      	movcs	r3, #4
 8000d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	3304      	adds	r3, #4
 8000d4e:	2b06      	cmp	r3, #6
 8000d50:	d902      	bls.n	8000d58 <NVIC_EncodePriority+0x30>
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	3b03      	subs	r3, #3
 8000d56:	e000      	b.n	8000d5a <NVIC_EncodePriority+0x32>
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43da      	mvns	r2, r3
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	401a      	ands	r2, r3
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7a:	43d9      	mvns	r1, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d80:	4313      	orrs	r3, r2
         );
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3724      	adds	r7, #36	; 0x24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
	...

08000d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000da0:	d301      	bcc.n	8000da6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000da2:	2301      	movs	r3, #1
 8000da4:	e00f      	b.n	8000dc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000da6:	4a0a      	ldr	r2, [pc, #40]	; (8000dd0 <SysTick_Config+0x40>)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3b01      	subs	r3, #1
 8000dac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dae:	210f      	movs	r1, #15
 8000db0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000db4:	f7ff ff8e 	bl	8000cd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db8:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <SysTick_Config+0x40>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dbe:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <SysTick_Config+0x40>)
 8000dc0:	2207      	movs	r2, #7
 8000dc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	e000e010 	.word	0xe000e010

08000dd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff ff29 	bl	8000c34 <__NVIC_SetPriorityGrouping>
}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b086      	sub	sp, #24
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	4603      	mov	r3, r0
 8000df2:	60b9      	str	r1, [r7, #8]
 8000df4:	607a      	str	r2, [r7, #4]
 8000df6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dfc:	f7ff ff3e 	bl	8000c7c <__NVIC_GetPriorityGrouping>
 8000e00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	68b9      	ldr	r1, [r7, #8]
 8000e06:	6978      	ldr	r0, [r7, #20]
 8000e08:	f7ff ff8e 	bl	8000d28 <NVIC_EncodePriority>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e12:	4611      	mov	r1, r2
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff ff5d 	bl	8000cd4 <__NVIC_SetPriority>
}
 8000e1a:	bf00      	nop
 8000e1c:	3718      	adds	r7, #24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b082      	sub	sp, #8
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	4603      	mov	r3, r0
 8000e2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff ff31 	bl	8000c98 <__NVIC_EnableIRQ>
}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b082      	sub	sp, #8
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f7ff ffa2 	bl	8000d90 <SysTick_Config>
 8000e4c:	4603      	mov	r3, r0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
	...

08000e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b089      	sub	sp, #36	; 0x24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e66:	2300      	movs	r3, #0
 8000e68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61fb      	str	r3, [r7, #28]
 8000e72:	e165      	b.n	8001140 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e74:	2201      	movs	r2, #1
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	697a      	ldr	r2, [r7, #20]
 8000e84:	4013      	ands	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	f040 8154 	bne.w	800113a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f003 0303 	and.w	r3, r3, #3
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d005      	beq.n	8000eaa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ea6:	2b02      	cmp	r3, #2
 8000ea8:	d130      	bne.n	8000f0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	68da      	ldr	r2, [r3, #12]
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	4013      	ands	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	091b      	lsrs	r3, r3, #4
 8000ef6:	f003 0201 	and.w	r2, r3, #1
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f003 0303 	and.w	r3, r3, #3
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d017      	beq.n	8000f48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	2203      	movs	r2, #3
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	689a      	ldr	r2, [r3, #8]
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 0303 	and.w	r3, r3, #3
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d123      	bne.n	8000f9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	08da      	lsrs	r2, r3, #3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3208      	adds	r2, #8
 8000f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	f003 0307 	and.w	r3, r3, #7
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	220f      	movs	r2, #15
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4013      	ands	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	691a      	ldr	r2, [r3, #16]
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	08da      	lsrs	r2, r3, #3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	3208      	adds	r2, #8
 8000f96:	69b9      	ldr	r1, [r7, #24]
 8000f98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	2203      	movs	r2, #3
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f003 0203 	and.w	r2, r3, #3
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	f000 80ae 	beq.w	800113a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	4b5d      	ldr	r3, [pc, #372]	; (8001158 <HAL_GPIO_Init+0x300>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe6:	4a5c      	ldr	r2, [pc, #368]	; (8001158 <HAL_GPIO_Init+0x300>)
 8000fe8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fec:	6453      	str	r3, [r2, #68]	; 0x44
 8000fee:	4b5a      	ldr	r3, [pc, #360]	; (8001158 <HAL_GPIO_Init+0x300>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ffa:	4a58      	ldr	r2, [pc, #352]	; (800115c <HAL_GPIO_Init+0x304>)
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	089b      	lsrs	r3, r3, #2
 8001000:	3302      	adds	r3, #2
 8001002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001006:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	f003 0303 	and.w	r3, r3, #3
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	220f      	movs	r2, #15
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	43db      	mvns	r3, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4013      	ands	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a4f      	ldr	r2, [pc, #316]	; (8001160 <HAL_GPIO_Init+0x308>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d025      	beq.n	8001072 <HAL_GPIO_Init+0x21a>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a4e      	ldr	r2, [pc, #312]	; (8001164 <HAL_GPIO_Init+0x30c>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d01f      	beq.n	800106e <HAL_GPIO_Init+0x216>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a4d      	ldr	r2, [pc, #308]	; (8001168 <HAL_GPIO_Init+0x310>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d019      	beq.n	800106a <HAL_GPIO_Init+0x212>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a4c      	ldr	r2, [pc, #304]	; (800116c <HAL_GPIO_Init+0x314>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d013      	beq.n	8001066 <HAL_GPIO_Init+0x20e>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a4b      	ldr	r2, [pc, #300]	; (8001170 <HAL_GPIO_Init+0x318>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d00d      	beq.n	8001062 <HAL_GPIO_Init+0x20a>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a4a      	ldr	r2, [pc, #296]	; (8001174 <HAL_GPIO_Init+0x31c>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d007      	beq.n	800105e <HAL_GPIO_Init+0x206>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a49      	ldr	r2, [pc, #292]	; (8001178 <HAL_GPIO_Init+0x320>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d101      	bne.n	800105a <HAL_GPIO_Init+0x202>
 8001056:	2306      	movs	r3, #6
 8001058:	e00c      	b.n	8001074 <HAL_GPIO_Init+0x21c>
 800105a:	2307      	movs	r3, #7
 800105c:	e00a      	b.n	8001074 <HAL_GPIO_Init+0x21c>
 800105e:	2305      	movs	r3, #5
 8001060:	e008      	b.n	8001074 <HAL_GPIO_Init+0x21c>
 8001062:	2304      	movs	r3, #4
 8001064:	e006      	b.n	8001074 <HAL_GPIO_Init+0x21c>
 8001066:	2303      	movs	r3, #3
 8001068:	e004      	b.n	8001074 <HAL_GPIO_Init+0x21c>
 800106a:	2302      	movs	r3, #2
 800106c:	e002      	b.n	8001074 <HAL_GPIO_Init+0x21c>
 800106e:	2301      	movs	r3, #1
 8001070:	e000      	b.n	8001074 <HAL_GPIO_Init+0x21c>
 8001072:	2300      	movs	r3, #0
 8001074:	69fa      	ldr	r2, [r7, #28]
 8001076:	f002 0203 	and.w	r2, r2, #3
 800107a:	0092      	lsls	r2, r2, #2
 800107c:	4093      	lsls	r3, r2
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4313      	orrs	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001084:	4935      	ldr	r1, [pc, #212]	; (800115c <HAL_GPIO_Init+0x304>)
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	089b      	lsrs	r3, r3, #2
 800108a:	3302      	adds	r3, #2
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001092:	4b3a      	ldr	r3, [pc, #232]	; (800117c <HAL_GPIO_Init+0x324>)
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	43db      	mvns	r3, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4013      	ands	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010b6:	4a31      	ldr	r2, [pc, #196]	; (800117c <HAL_GPIO_Init+0x324>)
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010bc:	4b2f      	ldr	r3, [pc, #188]	; (800117c <HAL_GPIO_Init+0x324>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	43db      	mvns	r3, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4013      	ands	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d003      	beq.n	80010e0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	4313      	orrs	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010e0:	4a26      	ldr	r2, [pc, #152]	; (800117c <HAL_GPIO_Init+0x324>)
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010e6:	4b25      	ldr	r3, [pc, #148]	; (800117c <HAL_GPIO_Init+0x324>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	43db      	mvns	r3, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4013      	ands	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d003      	beq.n	800110a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	4313      	orrs	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800110a:	4a1c      	ldr	r2, [pc, #112]	; (800117c <HAL_GPIO_Init+0x324>)
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001110:	4b1a      	ldr	r3, [pc, #104]	; (800117c <HAL_GPIO_Init+0x324>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	43db      	mvns	r3, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d003      	beq.n	8001134 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	4313      	orrs	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001134:	4a11      	ldr	r2, [pc, #68]	; (800117c <HAL_GPIO_Init+0x324>)
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3301      	adds	r3, #1
 800113e:	61fb      	str	r3, [r7, #28]
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	2b0f      	cmp	r3, #15
 8001144:	f67f ae96 	bls.w	8000e74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001148:	bf00      	nop
 800114a:	bf00      	nop
 800114c:	3724      	adds	r7, #36	; 0x24
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	40023800 	.word	0x40023800
 800115c:	40013800 	.word	0x40013800
 8001160:	40020000 	.word	0x40020000
 8001164:	40020400 	.word	0x40020400
 8001168:	40020800 	.word	0x40020800
 800116c:	40020c00 	.word	0x40020c00
 8001170:	40021000 	.word	0x40021000
 8001174:	40021400 	.word	0x40021400
 8001178:	40021800 	.word	0x40021800
 800117c:	40013c00 	.word	0x40013c00

08001180 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	460b      	mov	r3, r1
 800118a:	807b      	strh	r3, [r7, #2]
 800118c:	4613      	mov	r3, r2
 800118e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001190:	787b      	ldrb	r3, [r7, #1]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001196:	887a      	ldrh	r2, [r7, #2]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800119c:	e003      	b.n	80011a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800119e:	887b      	ldrh	r3, [r7, #2]
 80011a0:	041a      	lsls	r2, r3, #16
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	619a      	str	r2, [r3, #24]
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011b2:	b480      	push	{r7}
 80011b4:	b085      	sub	sp, #20
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
 80011ba:	460b      	mov	r3, r1
 80011bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	695b      	ldr	r3, [r3, #20]
 80011c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011c4:	887a      	ldrh	r2, [r7, #2]
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	4013      	ands	r3, r2
 80011ca:	041a      	lsls	r2, r3, #16
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	43d9      	mvns	r1, r3
 80011d0:	887b      	ldrh	r3, [r7, #2]
 80011d2:	400b      	ands	r3, r1
 80011d4:	431a      	orrs	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	619a      	str	r2, [r3, #24]
}
 80011da:	bf00      	nop
 80011dc:	3714      	adds	r7, #20
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
	...

080011e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d101      	bne.n	80011fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e0cc      	b.n	8001396 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80011fc:	4b68      	ldr	r3, [pc, #416]	; (80013a0 <HAL_RCC_ClockConfig+0x1b8>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 030f 	and.w	r3, r3, #15
 8001204:	683a      	ldr	r2, [r7, #0]
 8001206:	429a      	cmp	r2, r3
 8001208:	d90c      	bls.n	8001224 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800120a:	4b65      	ldr	r3, [pc, #404]	; (80013a0 <HAL_RCC_ClockConfig+0x1b8>)
 800120c:	683a      	ldr	r2, [r7, #0]
 800120e:	b2d2      	uxtb	r2, r2
 8001210:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001212:	4b63      	ldr	r3, [pc, #396]	; (80013a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 030f 	and.w	r3, r3, #15
 800121a:	683a      	ldr	r2, [r7, #0]
 800121c:	429a      	cmp	r2, r3
 800121e:	d001      	beq.n	8001224 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	e0b8      	b.n	8001396 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0302 	and.w	r3, r3, #2
 800122c:	2b00      	cmp	r3, #0
 800122e:	d020      	beq.n	8001272 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0304 	and.w	r3, r3, #4
 8001238:	2b00      	cmp	r3, #0
 800123a:	d005      	beq.n	8001248 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800123c:	4b59      	ldr	r3, [pc, #356]	; (80013a4 <HAL_RCC_ClockConfig+0x1bc>)
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	4a58      	ldr	r2, [pc, #352]	; (80013a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001242:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001246:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 0308 	and.w	r3, r3, #8
 8001250:	2b00      	cmp	r3, #0
 8001252:	d005      	beq.n	8001260 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001254:	4b53      	ldr	r3, [pc, #332]	; (80013a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	4a52      	ldr	r2, [pc, #328]	; (80013a4 <HAL_RCC_ClockConfig+0x1bc>)
 800125a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800125e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001260:	4b50      	ldr	r3, [pc, #320]	; (80013a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	494d      	ldr	r1, [pc, #308]	; (80013a4 <HAL_RCC_ClockConfig+0x1bc>)
 800126e:	4313      	orrs	r3, r2
 8001270:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	2b00      	cmp	r3, #0
 800127c:	d044      	beq.n	8001308 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d107      	bne.n	8001296 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001286:	4b47      	ldr	r3, [pc, #284]	; (80013a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d119      	bne.n	80012c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e07f      	b.n	8001396 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	2b02      	cmp	r3, #2
 800129c:	d003      	beq.n	80012a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012a2:	2b03      	cmp	r3, #3
 80012a4:	d107      	bne.n	80012b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012a6:	4b3f      	ldr	r3, [pc, #252]	; (80013a4 <HAL_RCC_ClockConfig+0x1bc>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d109      	bne.n	80012c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e06f      	b.n	8001396 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b6:	4b3b      	ldr	r3, [pc, #236]	; (80013a4 <HAL_RCC_ClockConfig+0x1bc>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d101      	bne.n	80012c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e067      	b.n	8001396 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012c6:	4b37      	ldr	r3, [pc, #220]	; (80013a4 <HAL_RCC_ClockConfig+0x1bc>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	f023 0203 	bic.w	r2, r3, #3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	4934      	ldr	r1, [pc, #208]	; (80013a4 <HAL_RCC_ClockConfig+0x1bc>)
 80012d4:	4313      	orrs	r3, r2
 80012d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012d8:	f7ff fc7c 	bl	8000bd4 <HAL_GetTick>
 80012dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012de:	e00a      	b.n	80012f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012e0:	f7ff fc78 	bl	8000bd4 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e04f      	b.n	8001396 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012f6:	4b2b      	ldr	r3, [pc, #172]	; (80013a4 <HAL_RCC_ClockConfig+0x1bc>)
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f003 020c 	and.w	r2, r3, #12
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	429a      	cmp	r2, r3
 8001306:	d1eb      	bne.n	80012e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001308:	4b25      	ldr	r3, [pc, #148]	; (80013a0 <HAL_RCC_ClockConfig+0x1b8>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 030f 	and.w	r3, r3, #15
 8001310:	683a      	ldr	r2, [r7, #0]
 8001312:	429a      	cmp	r2, r3
 8001314:	d20c      	bcs.n	8001330 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001316:	4b22      	ldr	r3, [pc, #136]	; (80013a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001318:	683a      	ldr	r2, [r7, #0]
 800131a:	b2d2      	uxtb	r2, r2
 800131c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800131e:	4b20      	ldr	r3, [pc, #128]	; (80013a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 030f 	and.w	r3, r3, #15
 8001326:	683a      	ldr	r2, [r7, #0]
 8001328:	429a      	cmp	r2, r3
 800132a:	d001      	beq.n	8001330 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e032      	b.n	8001396 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0304 	and.w	r3, r3, #4
 8001338:	2b00      	cmp	r3, #0
 800133a:	d008      	beq.n	800134e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800133c:	4b19      	ldr	r3, [pc, #100]	; (80013a4 <HAL_RCC_ClockConfig+0x1bc>)
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	4916      	ldr	r1, [pc, #88]	; (80013a4 <HAL_RCC_ClockConfig+0x1bc>)
 800134a:	4313      	orrs	r3, r2
 800134c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0308 	and.w	r3, r3, #8
 8001356:	2b00      	cmp	r3, #0
 8001358:	d009      	beq.n	800136e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800135a:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <HAL_RCC_ClockConfig+0x1bc>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	00db      	lsls	r3, r3, #3
 8001368:	490e      	ldr	r1, [pc, #56]	; (80013a4 <HAL_RCC_ClockConfig+0x1bc>)
 800136a:	4313      	orrs	r3, r2
 800136c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800136e:	f000 f855 	bl	800141c <HAL_RCC_GetSysClockFreq>
 8001372:	4602      	mov	r2, r0
 8001374:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	091b      	lsrs	r3, r3, #4
 800137a:	f003 030f 	and.w	r3, r3, #15
 800137e:	490a      	ldr	r1, [pc, #40]	; (80013a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001380:	5ccb      	ldrb	r3, [r1, r3]
 8001382:	fa22 f303 	lsr.w	r3, r2, r3
 8001386:	4a09      	ldr	r2, [pc, #36]	; (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 8001388:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800138a:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <HAL_RCC_ClockConfig+0x1c8>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff fbdc 	bl	8000b4c <HAL_InitTick>

  return HAL_OK;
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40023c00 	.word	0x40023c00
 80013a4:	40023800 	.word	0x40023800
 80013a8:	08003018 	.word	0x08003018
 80013ac:	20000000 	.word	0x20000000
 80013b0:	20000004 	.word	0x20000004

080013b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013b8:	4b03      	ldr	r3, [pc, #12]	; (80013c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80013ba:	681b      	ldr	r3, [r3, #0]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	20000000 	.word	0x20000000

080013cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80013d0:	f7ff fff0 	bl	80013b4 <HAL_RCC_GetHCLKFreq>
 80013d4:	4602      	mov	r2, r0
 80013d6:	4b05      	ldr	r3, [pc, #20]	; (80013ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	0a9b      	lsrs	r3, r3, #10
 80013dc:	f003 0307 	and.w	r3, r3, #7
 80013e0:	4903      	ldr	r1, [pc, #12]	; (80013f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013e2:	5ccb      	ldrb	r3, [r1, r3]
 80013e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40023800 	.word	0x40023800
 80013f0:	08003028 	.word	0x08003028

080013f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80013f8:	f7ff ffdc 	bl	80013b4 <HAL_RCC_GetHCLKFreq>
 80013fc:	4602      	mov	r2, r0
 80013fe:	4b05      	ldr	r3, [pc, #20]	; (8001414 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	0b5b      	lsrs	r3, r3, #13
 8001404:	f003 0307 	and.w	r3, r3, #7
 8001408:	4903      	ldr	r1, [pc, #12]	; (8001418 <HAL_RCC_GetPCLK2Freq+0x24>)
 800140a:	5ccb      	ldrb	r3, [r1, r3]
 800140c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001410:	4618      	mov	r0, r3
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40023800 	.word	0x40023800
 8001418:	08003028 	.word	0x08003028

0800141c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800141c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001420:	b0ae      	sub	sp, #184	; 0xb8
 8001422:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001424:	2300      	movs	r3, #0
 8001426:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800142a:	2300      	movs	r3, #0
 800142c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001430:	2300      	movs	r3, #0
 8001432:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001436:	2300      	movs	r3, #0
 8001438:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800143c:	2300      	movs	r3, #0
 800143e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001442:	4bcb      	ldr	r3, [pc, #812]	; (8001770 <HAL_RCC_GetSysClockFreq+0x354>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f003 030c 	and.w	r3, r3, #12
 800144a:	2b0c      	cmp	r3, #12
 800144c:	f200 8206 	bhi.w	800185c <HAL_RCC_GetSysClockFreq+0x440>
 8001450:	a201      	add	r2, pc, #4	; (adr r2, 8001458 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001456:	bf00      	nop
 8001458:	0800148d 	.word	0x0800148d
 800145c:	0800185d 	.word	0x0800185d
 8001460:	0800185d 	.word	0x0800185d
 8001464:	0800185d 	.word	0x0800185d
 8001468:	08001495 	.word	0x08001495
 800146c:	0800185d 	.word	0x0800185d
 8001470:	0800185d 	.word	0x0800185d
 8001474:	0800185d 	.word	0x0800185d
 8001478:	0800149d 	.word	0x0800149d
 800147c:	0800185d 	.word	0x0800185d
 8001480:	0800185d 	.word	0x0800185d
 8001484:	0800185d 	.word	0x0800185d
 8001488:	0800168d 	.word	0x0800168d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800148c:	4bb9      	ldr	r3, [pc, #740]	; (8001774 <HAL_RCC_GetSysClockFreq+0x358>)
 800148e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001492:	e1e7      	b.n	8001864 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001494:	4bb8      	ldr	r3, [pc, #736]	; (8001778 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001496:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800149a:	e1e3      	b.n	8001864 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800149c:	4bb4      	ldr	r3, [pc, #720]	; (8001770 <HAL_RCC_GetSysClockFreq+0x354>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014a8:	4bb1      	ldr	r3, [pc, #708]	; (8001770 <HAL_RCC_GetSysClockFreq+0x354>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d071      	beq.n	8001598 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014b4:	4bae      	ldr	r3, [pc, #696]	; (8001770 <HAL_RCC_GetSysClockFreq+0x354>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	099b      	lsrs	r3, r3, #6
 80014ba:	2200      	movs	r2, #0
 80014bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80014c0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80014c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80014c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80014d0:	2300      	movs	r3, #0
 80014d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80014d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80014da:	4622      	mov	r2, r4
 80014dc:	462b      	mov	r3, r5
 80014de:	f04f 0000 	mov.w	r0, #0
 80014e2:	f04f 0100 	mov.w	r1, #0
 80014e6:	0159      	lsls	r1, r3, #5
 80014e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014ec:	0150      	lsls	r0, r2, #5
 80014ee:	4602      	mov	r2, r0
 80014f0:	460b      	mov	r3, r1
 80014f2:	4621      	mov	r1, r4
 80014f4:	1a51      	subs	r1, r2, r1
 80014f6:	6439      	str	r1, [r7, #64]	; 0x40
 80014f8:	4629      	mov	r1, r5
 80014fa:	eb63 0301 	sbc.w	r3, r3, r1
 80014fe:	647b      	str	r3, [r7, #68]	; 0x44
 8001500:	f04f 0200 	mov.w	r2, #0
 8001504:	f04f 0300 	mov.w	r3, #0
 8001508:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800150c:	4649      	mov	r1, r9
 800150e:	018b      	lsls	r3, r1, #6
 8001510:	4641      	mov	r1, r8
 8001512:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001516:	4641      	mov	r1, r8
 8001518:	018a      	lsls	r2, r1, #6
 800151a:	4641      	mov	r1, r8
 800151c:	1a51      	subs	r1, r2, r1
 800151e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001520:	4649      	mov	r1, r9
 8001522:	eb63 0301 	sbc.w	r3, r3, r1
 8001526:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001528:	f04f 0200 	mov.w	r2, #0
 800152c:	f04f 0300 	mov.w	r3, #0
 8001530:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001534:	4649      	mov	r1, r9
 8001536:	00cb      	lsls	r3, r1, #3
 8001538:	4641      	mov	r1, r8
 800153a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800153e:	4641      	mov	r1, r8
 8001540:	00ca      	lsls	r2, r1, #3
 8001542:	4610      	mov	r0, r2
 8001544:	4619      	mov	r1, r3
 8001546:	4603      	mov	r3, r0
 8001548:	4622      	mov	r2, r4
 800154a:	189b      	adds	r3, r3, r2
 800154c:	633b      	str	r3, [r7, #48]	; 0x30
 800154e:	462b      	mov	r3, r5
 8001550:	460a      	mov	r2, r1
 8001552:	eb42 0303 	adc.w	r3, r2, r3
 8001556:	637b      	str	r3, [r7, #52]	; 0x34
 8001558:	f04f 0200 	mov.w	r2, #0
 800155c:	f04f 0300 	mov.w	r3, #0
 8001560:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001564:	4629      	mov	r1, r5
 8001566:	024b      	lsls	r3, r1, #9
 8001568:	4621      	mov	r1, r4
 800156a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800156e:	4621      	mov	r1, r4
 8001570:	024a      	lsls	r2, r1, #9
 8001572:	4610      	mov	r0, r2
 8001574:	4619      	mov	r1, r3
 8001576:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800157a:	2200      	movs	r2, #0
 800157c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001580:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001584:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001588:	f7fe fe3c 	bl	8000204 <__aeabi_uldivmod>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	4613      	mov	r3, r2
 8001592:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001596:	e067      	b.n	8001668 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001598:	4b75      	ldr	r3, [pc, #468]	; (8001770 <HAL_RCC_GetSysClockFreq+0x354>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	099b      	lsrs	r3, r3, #6
 800159e:	2200      	movs	r2, #0
 80015a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80015a4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80015a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80015ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80015b2:	2300      	movs	r3, #0
 80015b4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80015b6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80015ba:	4622      	mov	r2, r4
 80015bc:	462b      	mov	r3, r5
 80015be:	f04f 0000 	mov.w	r0, #0
 80015c2:	f04f 0100 	mov.w	r1, #0
 80015c6:	0159      	lsls	r1, r3, #5
 80015c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015cc:	0150      	lsls	r0, r2, #5
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	4621      	mov	r1, r4
 80015d4:	1a51      	subs	r1, r2, r1
 80015d6:	62b9      	str	r1, [r7, #40]	; 0x28
 80015d8:	4629      	mov	r1, r5
 80015da:	eb63 0301 	sbc.w	r3, r3, r1
 80015de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015e0:	f04f 0200 	mov.w	r2, #0
 80015e4:	f04f 0300 	mov.w	r3, #0
 80015e8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80015ec:	4649      	mov	r1, r9
 80015ee:	018b      	lsls	r3, r1, #6
 80015f0:	4641      	mov	r1, r8
 80015f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015f6:	4641      	mov	r1, r8
 80015f8:	018a      	lsls	r2, r1, #6
 80015fa:	4641      	mov	r1, r8
 80015fc:	ebb2 0a01 	subs.w	sl, r2, r1
 8001600:	4649      	mov	r1, r9
 8001602:	eb63 0b01 	sbc.w	fp, r3, r1
 8001606:	f04f 0200 	mov.w	r2, #0
 800160a:	f04f 0300 	mov.w	r3, #0
 800160e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001612:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001616:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800161a:	4692      	mov	sl, r2
 800161c:	469b      	mov	fp, r3
 800161e:	4623      	mov	r3, r4
 8001620:	eb1a 0303 	adds.w	r3, sl, r3
 8001624:	623b      	str	r3, [r7, #32]
 8001626:	462b      	mov	r3, r5
 8001628:	eb4b 0303 	adc.w	r3, fp, r3
 800162c:	627b      	str	r3, [r7, #36]	; 0x24
 800162e:	f04f 0200 	mov.w	r2, #0
 8001632:	f04f 0300 	mov.w	r3, #0
 8001636:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800163a:	4629      	mov	r1, r5
 800163c:	028b      	lsls	r3, r1, #10
 800163e:	4621      	mov	r1, r4
 8001640:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001644:	4621      	mov	r1, r4
 8001646:	028a      	lsls	r2, r1, #10
 8001648:	4610      	mov	r0, r2
 800164a:	4619      	mov	r1, r3
 800164c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001650:	2200      	movs	r2, #0
 8001652:	673b      	str	r3, [r7, #112]	; 0x70
 8001654:	677a      	str	r2, [r7, #116]	; 0x74
 8001656:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800165a:	f7fe fdd3 	bl	8000204 <__aeabi_uldivmod>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	4613      	mov	r3, r2
 8001664:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001668:	4b41      	ldr	r3, [pc, #260]	; (8001770 <HAL_RCC_GetSysClockFreq+0x354>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	0c1b      	lsrs	r3, r3, #16
 800166e:	f003 0303 	and.w	r3, r3, #3
 8001672:	3301      	adds	r3, #1
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800167a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800167e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001682:	fbb2 f3f3 	udiv	r3, r2, r3
 8001686:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800168a:	e0eb      	b.n	8001864 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800168c:	4b38      	ldr	r3, [pc, #224]	; (8001770 <HAL_RCC_GetSysClockFreq+0x354>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001694:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001698:	4b35      	ldr	r3, [pc, #212]	; (8001770 <HAL_RCC_GetSysClockFreq+0x354>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d06b      	beq.n	800177c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016a4:	4b32      	ldr	r3, [pc, #200]	; (8001770 <HAL_RCC_GetSysClockFreq+0x354>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	099b      	lsrs	r3, r3, #6
 80016aa:	2200      	movs	r2, #0
 80016ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80016ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80016b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016b6:	663b      	str	r3, [r7, #96]	; 0x60
 80016b8:	2300      	movs	r3, #0
 80016ba:	667b      	str	r3, [r7, #100]	; 0x64
 80016bc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80016c0:	4622      	mov	r2, r4
 80016c2:	462b      	mov	r3, r5
 80016c4:	f04f 0000 	mov.w	r0, #0
 80016c8:	f04f 0100 	mov.w	r1, #0
 80016cc:	0159      	lsls	r1, r3, #5
 80016ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016d2:	0150      	lsls	r0, r2, #5
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	4621      	mov	r1, r4
 80016da:	1a51      	subs	r1, r2, r1
 80016dc:	61b9      	str	r1, [r7, #24]
 80016de:	4629      	mov	r1, r5
 80016e0:	eb63 0301 	sbc.w	r3, r3, r1
 80016e4:	61fb      	str	r3, [r7, #28]
 80016e6:	f04f 0200 	mov.w	r2, #0
 80016ea:	f04f 0300 	mov.w	r3, #0
 80016ee:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80016f2:	4659      	mov	r1, fp
 80016f4:	018b      	lsls	r3, r1, #6
 80016f6:	4651      	mov	r1, sl
 80016f8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016fc:	4651      	mov	r1, sl
 80016fe:	018a      	lsls	r2, r1, #6
 8001700:	4651      	mov	r1, sl
 8001702:	ebb2 0801 	subs.w	r8, r2, r1
 8001706:	4659      	mov	r1, fp
 8001708:	eb63 0901 	sbc.w	r9, r3, r1
 800170c:	f04f 0200 	mov.w	r2, #0
 8001710:	f04f 0300 	mov.w	r3, #0
 8001714:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001718:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800171c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001720:	4690      	mov	r8, r2
 8001722:	4699      	mov	r9, r3
 8001724:	4623      	mov	r3, r4
 8001726:	eb18 0303 	adds.w	r3, r8, r3
 800172a:	613b      	str	r3, [r7, #16]
 800172c:	462b      	mov	r3, r5
 800172e:	eb49 0303 	adc.w	r3, r9, r3
 8001732:	617b      	str	r3, [r7, #20]
 8001734:	f04f 0200 	mov.w	r2, #0
 8001738:	f04f 0300 	mov.w	r3, #0
 800173c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001740:	4629      	mov	r1, r5
 8001742:	024b      	lsls	r3, r1, #9
 8001744:	4621      	mov	r1, r4
 8001746:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800174a:	4621      	mov	r1, r4
 800174c:	024a      	lsls	r2, r1, #9
 800174e:	4610      	mov	r0, r2
 8001750:	4619      	mov	r1, r3
 8001752:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001756:	2200      	movs	r2, #0
 8001758:	65bb      	str	r3, [r7, #88]	; 0x58
 800175a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800175c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001760:	f7fe fd50 	bl	8000204 <__aeabi_uldivmod>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	4613      	mov	r3, r2
 800176a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800176e:	e065      	b.n	800183c <HAL_RCC_GetSysClockFreq+0x420>
 8001770:	40023800 	.word	0x40023800
 8001774:	00f42400 	.word	0x00f42400
 8001778:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800177c:	4b3d      	ldr	r3, [pc, #244]	; (8001874 <HAL_RCC_GetSysClockFreq+0x458>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	099b      	lsrs	r3, r3, #6
 8001782:	2200      	movs	r2, #0
 8001784:	4618      	mov	r0, r3
 8001786:	4611      	mov	r1, r2
 8001788:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800178c:	653b      	str	r3, [r7, #80]	; 0x50
 800178e:	2300      	movs	r3, #0
 8001790:	657b      	str	r3, [r7, #84]	; 0x54
 8001792:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001796:	4642      	mov	r2, r8
 8001798:	464b      	mov	r3, r9
 800179a:	f04f 0000 	mov.w	r0, #0
 800179e:	f04f 0100 	mov.w	r1, #0
 80017a2:	0159      	lsls	r1, r3, #5
 80017a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017a8:	0150      	lsls	r0, r2, #5
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	4641      	mov	r1, r8
 80017b0:	1a51      	subs	r1, r2, r1
 80017b2:	60b9      	str	r1, [r7, #8]
 80017b4:	4649      	mov	r1, r9
 80017b6:	eb63 0301 	sbc.w	r3, r3, r1
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	f04f 0200 	mov.w	r2, #0
 80017c0:	f04f 0300 	mov.w	r3, #0
 80017c4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80017c8:	4659      	mov	r1, fp
 80017ca:	018b      	lsls	r3, r1, #6
 80017cc:	4651      	mov	r1, sl
 80017ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017d2:	4651      	mov	r1, sl
 80017d4:	018a      	lsls	r2, r1, #6
 80017d6:	4651      	mov	r1, sl
 80017d8:	1a54      	subs	r4, r2, r1
 80017da:	4659      	mov	r1, fp
 80017dc:	eb63 0501 	sbc.w	r5, r3, r1
 80017e0:	f04f 0200 	mov.w	r2, #0
 80017e4:	f04f 0300 	mov.w	r3, #0
 80017e8:	00eb      	lsls	r3, r5, #3
 80017ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017ee:	00e2      	lsls	r2, r4, #3
 80017f0:	4614      	mov	r4, r2
 80017f2:	461d      	mov	r5, r3
 80017f4:	4643      	mov	r3, r8
 80017f6:	18e3      	adds	r3, r4, r3
 80017f8:	603b      	str	r3, [r7, #0]
 80017fa:	464b      	mov	r3, r9
 80017fc:	eb45 0303 	adc.w	r3, r5, r3
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	f04f 0200 	mov.w	r2, #0
 8001806:	f04f 0300 	mov.w	r3, #0
 800180a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800180e:	4629      	mov	r1, r5
 8001810:	028b      	lsls	r3, r1, #10
 8001812:	4621      	mov	r1, r4
 8001814:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001818:	4621      	mov	r1, r4
 800181a:	028a      	lsls	r2, r1, #10
 800181c:	4610      	mov	r0, r2
 800181e:	4619      	mov	r1, r3
 8001820:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001824:	2200      	movs	r2, #0
 8001826:	64bb      	str	r3, [r7, #72]	; 0x48
 8001828:	64fa      	str	r2, [r7, #76]	; 0x4c
 800182a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800182e:	f7fe fce9 	bl	8000204 <__aeabi_uldivmod>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	4613      	mov	r3, r2
 8001838:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800183c:	4b0d      	ldr	r3, [pc, #52]	; (8001874 <HAL_RCC_GetSysClockFreq+0x458>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	0f1b      	lsrs	r3, r3, #28
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800184a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800184e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001852:	fbb2 f3f3 	udiv	r3, r2, r3
 8001856:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800185a:	e003      	b.n	8001864 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <HAL_RCC_GetSysClockFreq+0x45c>)
 800185e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001862:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001864:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001868:	4618      	mov	r0, r3
 800186a:	37b8      	adds	r7, #184	; 0xb8
 800186c:	46bd      	mov	sp, r7
 800186e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001872:	bf00      	nop
 8001874:	40023800 	.word	0x40023800
 8001878:	00f42400 	.word	0x00f42400

0800187c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d101      	bne.n	800188e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e28d      	b.n	8001daa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	2b00      	cmp	r3, #0
 8001898:	f000 8083 	beq.w	80019a2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800189c:	4b94      	ldr	r3, [pc, #592]	; (8001af0 <HAL_RCC_OscConfig+0x274>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f003 030c 	and.w	r3, r3, #12
 80018a4:	2b04      	cmp	r3, #4
 80018a6:	d019      	beq.n	80018dc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018a8:	4b91      	ldr	r3, [pc, #580]	; (8001af0 <HAL_RCC_OscConfig+0x274>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80018b0:	2b08      	cmp	r3, #8
 80018b2:	d106      	bne.n	80018c2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018b4:	4b8e      	ldr	r3, [pc, #568]	; (8001af0 <HAL_RCC_OscConfig+0x274>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018c0:	d00c      	beq.n	80018dc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018c2:	4b8b      	ldr	r3, [pc, #556]	; (8001af0 <HAL_RCC_OscConfig+0x274>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018ca:	2b0c      	cmp	r3, #12
 80018cc:	d112      	bne.n	80018f4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018ce:	4b88      	ldr	r3, [pc, #544]	; (8001af0 <HAL_RCC_OscConfig+0x274>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018da:	d10b      	bne.n	80018f4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018dc:	4b84      	ldr	r3, [pc, #528]	; (8001af0 <HAL_RCC_OscConfig+0x274>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d05b      	beq.n	80019a0 <HAL_RCC_OscConfig+0x124>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d157      	bne.n	80019a0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e25a      	b.n	8001daa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018fc:	d106      	bne.n	800190c <HAL_RCC_OscConfig+0x90>
 80018fe:	4b7c      	ldr	r3, [pc, #496]	; (8001af0 <HAL_RCC_OscConfig+0x274>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a7b      	ldr	r2, [pc, #492]	; (8001af0 <HAL_RCC_OscConfig+0x274>)
 8001904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001908:	6013      	str	r3, [r2, #0]
 800190a:	e01d      	b.n	8001948 <HAL_RCC_OscConfig+0xcc>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001914:	d10c      	bne.n	8001930 <HAL_RCC_OscConfig+0xb4>
 8001916:	4b76      	ldr	r3, [pc, #472]	; (8001af0 <HAL_RCC_OscConfig+0x274>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a75      	ldr	r2, [pc, #468]	; (8001af0 <HAL_RCC_OscConfig+0x274>)
 800191c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001920:	6013      	str	r3, [r2, #0]
 8001922:	4b73      	ldr	r3, [pc, #460]	; (8001af0 <HAL_RCC_OscConfig+0x274>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a72      	ldr	r2, [pc, #456]	; (8001af0 <HAL_RCC_OscConfig+0x274>)
 8001928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800192c:	6013      	str	r3, [r2, #0]
 800192e:	e00b      	b.n	8001948 <HAL_RCC_OscConfig+0xcc>
 8001930:	4b6f      	ldr	r3, [pc, #444]	; (8001af0 <HAL_RCC_OscConfig+0x274>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a6e      	ldr	r2, [pc, #440]	; (8001af0 <HAL_RCC_OscConfig+0x274>)
 8001936:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800193a:	6013      	str	r3, [r2, #0]
 800193c:	4b6c      	ldr	r3, [pc, #432]	; (8001af0 <HAL_RCC_OscConfig+0x274>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a6b      	ldr	r2, [pc, #428]	; (8001af0 <HAL_RCC_OscConfig+0x274>)
 8001942:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001946:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d013      	beq.n	8001978 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001950:	f7ff f940 	bl	8000bd4 <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001958:	f7ff f93c 	bl	8000bd4 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b64      	cmp	r3, #100	; 0x64
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e21f      	b.n	8001daa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800196a:	4b61      	ldr	r3, [pc, #388]	; (8001af0 <HAL_RCC_OscConfig+0x274>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d0f0      	beq.n	8001958 <HAL_RCC_OscConfig+0xdc>
 8001976:	e014      	b.n	80019a2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001978:	f7ff f92c 	bl	8000bd4 <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001980:	f7ff f928 	bl	8000bd4 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b64      	cmp	r3, #100	; 0x64
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e20b      	b.n	8001daa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001992:	4b57      	ldr	r3, [pc, #348]	; (8001af0 <HAL_RCC_OscConfig+0x274>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1f0      	bne.n	8001980 <HAL_RCC_OscConfig+0x104>
 800199e:	e000      	b.n	80019a2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d06f      	beq.n	8001a8e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80019ae:	4b50      	ldr	r3, [pc, #320]	; (8001af0 <HAL_RCC_OscConfig+0x274>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f003 030c 	and.w	r3, r3, #12
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d017      	beq.n	80019ea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019ba:	4b4d      	ldr	r3, [pc, #308]	; (8001af0 <HAL_RCC_OscConfig+0x274>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80019c2:	2b08      	cmp	r3, #8
 80019c4:	d105      	bne.n	80019d2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019c6:	4b4a      	ldr	r3, [pc, #296]	; (8001af0 <HAL_RCC_OscConfig+0x274>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d00b      	beq.n	80019ea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019d2:	4b47      	ldr	r3, [pc, #284]	; (8001af0 <HAL_RCC_OscConfig+0x274>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019da:	2b0c      	cmp	r3, #12
 80019dc:	d11c      	bne.n	8001a18 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019de:	4b44      	ldr	r3, [pc, #272]	; (8001af0 <HAL_RCC_OscConfig+0x274>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d116      	bne.n	8001a18 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ea:	4b41      	ldr	r3, [pc, #260]	; (8001af0 <HAL_RCC_OscConfig+0x274>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d005      	beq.n	8001a02 <HAL_RCC_OscConfig+0x186>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d001      	beq.n	8001a02 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e1d3      	b.n	8001daa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a02:	4b3b      	ldr	r3, [pc, #236]	; (8001af0 <HAL_RCC_OscConfig+0x274>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	691b      	ldr	r3, [r3, #16]
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	4937      	ldr	r1, [pc, #220]	; (8001af0 <HAL_RCC_OscConfig+0x274>)
 8001a12:	4313      	orrs	r3, r2
 8001a14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a16:	e03a      	b.n	8001a8e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d020      	beq.n	8001a62 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a20:	4b34      	ldr	r3, [pc, #208]	; (8001af4 <HAL_RCC_OscConfig+0x278>)
 8001a22:	2201      	movs	r2, #1
 8001a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a26:	f7ff f8d5 	bl	8000bd4 <HAL_GetTick>
 8001a2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a2c:	e008      	b.n	8001a40 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a2e:	f7ff f8d1 	bl	8000bd4 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e1b4      	b.n	8001daa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a40:	4b2b      	ldr	r3, [pc, #172]	; (8001af0 <HAL_RCC_OscConfig+0x274>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d0f0      	beq.n	8001a2e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a4c:	4b28      	ldr	r3, [pc, #160]	; (8001af0 <HAL_RCC_OscConfig+0x274>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	691b      	ldr	r3, [r3, #16]
 8001a58:	00db      	lsls	r3, r3, #3
 8001a5a:	4925      	ldr	r1, [pc, #148]	; (8001af0 <HAL_RCC_OscConfig+0x274>)
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	600b      	str	r3, [r1, #0]
 8001a60:	e015      	b.n	8001a8e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a62:	4b24      	ldr	r3, [pc, #144]	; (8001af4 <HAL_RCC_OscConfig+0x278>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a68:	f7ff f8b4 	bl	8000bd4 <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a70:	f7ff f8b0 	bl	8000bd4 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e193      	b.n	8001daa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a82:	4b1b      	ldr	r3, [pc, #108]	; (8001af0 <HAL_RCC_OscConfig+0x274>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1f0      	bne.n	8001a70 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0308 	and.w	r3, r3, #8
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d036      	beq.n	8001b08 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d016      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aa2:	4b15      	ldr	r3, [pc, #84]	; (8001af8 <HAL_RCC_OscConfig+0x27c>)
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa8:	f7ff f894 	bl	8000bd4 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ab0:	f7ff f890 	bl	8000bd4 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e173      	b.n	8001daa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ac2:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <HAL_RCC_OscConfig+0x274>)
 8001ac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d0f0      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x234>
 8001ace:	e01b      	b.n	8001b08 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ad0:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <HAL_RCC_OscConfig+0x27c>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad6:	f7ff f87d 	bl	8000bd4 <HAL_GetTick>
 8001ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001adc:	e00e      	b.n	8001afc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ade:	f7ff f879 	bl	8000bd4 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d907      	bls.n	8001afc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e15c      	b.n	8001daa <HAL_RCC_OscConfig+0x52e>
 8001af0:	40023800 	.word	0x40023800
 8001af4:	42470000 	.word	0x42470000
 8001af8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001afc:	4b8a      	ldr	r3, [pc, #552]	; (8001d28 <HAL_RCC_OscConfig+0x4ac>)
 8001afe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1ea      	bne.n	8001ade <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0304 	and.w	r3, r3, #4
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f000 8097 	beq.w	8001c44 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b16:	2300      	movs	r3, #0
 8001b18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b1a:	4b83      	ldr	r3, [pc, #524]	; (8001d28 <HAL_RCC_OscConfig+0x4ac>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d10f      	bne.n	8001b46 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	60bb      	str	r3, [r7, #8]
 8001b2a:	4b7f      	ldr	r3, [pc, #508]	; (8001d28 <HAL_RCC_OscConfig+0x4ac>)
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	4a7e      	ldr	r2, [pc, #504]	; (8001d28 <HAL_RCC_OscConfig+0x4ac>)
 8001b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b34:	6413      	str	r3, [r2, #64]	; 0x40
 8001b36:	4b7c      	ldr	r3, [pc, #496]	; (8001d28 <HAL_RCC_OscConfig+0x4ac>)
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3e:	60bb      	str	r3, [r7, #8]
 8001b40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b42:	2301      	movs	r3, #1
 8001b44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b46:	4b79      	ldr	r3, [pc, #484]	; (8001d2c <HAL_RCC_OscConfig+0x4b0>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d118      	bne.n	8001b84 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b52:	4b76      	ldr	r3, [pc, #472]	; (8001d2c <HAL_RCC_OscConfig+0x4b0>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a75      	ldr	r2, [pc, #468]	; (8001d2c <HAL_RCC_OscConfig+0x4b0>)
 8001b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b5e:	f7ff f839 	bl	8000bd4 <HAL_GetTick>
 8001b62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b64:	e008      	b.n	8001b78 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b66:	f7ff f835 	bl	8000bd4 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e118      	b.n	8001daa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b78:	4b6c      	ldr	r3, [pc, #432]	; (8001d2c <HAL_RCC_OscConfig+0x4b0>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d0f0      	beq.n	8001b66 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d106      	bne.n	8001b9a <HAL_RCC_OscConfig+0x31e>
 8001b8c:	4b66      	ldr	r3, [pc, #408]	; (8001d28 <HAL_RCC_OscConfig+0x4ac>)
 8001b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b90:	4a65      	ldr	r2, [pc, #404]	; (8001d28 <HAL_RCC_OscConfig+0x4ac>)
 8001b92:	f043 0301 	orr.w	r3, r3, #1
 8001b96:	6713      	str	r3, [r2, #112]	; 0x70
 8001b98:	e01c      	b.n	8001bd4 <HAL_RCC_OscConfig+0x358>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	2b05      	cmp	r3, #5
 8001ba0:	d10c      	bne.n	8001bbc <HAL_RCC_OscConfig+0x340>
 8001ba2:	4b61      	ldr	r3, [pc, #388]	; (8001d28 <HAL_RCC_OscConfig+0x4ac>)
 8001ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba6:	4a60      	ldr	r2, [pc, #384]	; (8001d28 <HAL_RCC_OscConfig+0x4ac>)
 8001ba8:	f043 0304 	orr.w	r3, r3, #4
 8001bac:	6713      	str	r3, [r2, #112]	; 0x70
 8001bae:	4b5e      	ldr	r3, [pc, #376]	; (8001d28 <HAL_RCC_OscConfig+0x4ac>)
 8001bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb2:	4a5d      	ldr	r2, [pc, #372]	; (8001d28 <HAL_RCC_OscConfig+0x4ac>)
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	6713      	str	r3, [r2, #112]	; 0x70
 8001bba:	e00b      	b.n	8001bd4 <HAL_RCC_OscConfig+0x358>
 8001bbc:	4b5a      	ldr	r3, [pc, #360]	; (8001d28 <HAL_RCC_OscConfig+0x4ac>)
 8001bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc0:	4a59      	ldr	r2, [pc, #356]	; (8001d28 <HAL_RCC_OscConfig+0x4ac>)
 8001bc2:	f023 0301 	bic.w	r3, r3, #1
 8001bc6:	6713      	str	r3, [r2, #112]	; 0x70
 8001bc8:	4b57      	ldr	r3, [pc, #348]	; (8001d28 <HAL_RCC_OscConfig+0x4ac>)
 8001bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bcc:	4a56      	ldr	r2, [pc, #344]	; (8001d28 <HAL_RCC_OscConfig+0x4ac>)
 8001bce:	f023 0304 	bic.w	r3, r3, #4
 8001bd2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d015      	beq.n	8001c08 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bdc:	f7fe fffa 	bl	8000bd4 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be2:	e00a      	b.n	8001bfa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001be4:	f7fe fff6 	bl	8000bd4 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e0d7      	b.n	8001daa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bfa:	4b4b      	ldr	r3, [pc, #300]	; (8001d28 <HAL_RCC_OscConfig+0x4ac>)
 8001bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d0ee      	beq.n	8001be4 <HAL_RCC_OscConfig+0x368>
 8001c06:	e014      	b.n	8001c32 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c08:	f7fe ffe4 	bl	8000bd4 <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c0e:	e00a      	b.n	8001c26 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c10:	f7fe ffe0 	bl	8000bd4 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e0c1      	b.n	8001daa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c26:	4b40      	ldr	r3, [pc, #256]	; (8001d28 <HAL_RCC_OscConfig+0x4ac>)
 8001c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1ee      	bne.n	8001c10 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c32:	7dfb      	ldrb	r3, [r7, #23]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d105      	bne.n	8001c44 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c38:	4b3b      	ldr	r3, [pc, #236]	; (8001d28 <HAL_RCC_OscConfig+0x4ac>)
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3c:	4a3a      	ldr	r2, [pc, #232]	; (8001d28 <HAL_RCC_OscConfig+0x4ac>)
 8001c3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c42:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f000 80ad 	beq.w	8001da8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c4e:	4b36      	ldr	r3, [pc, #216]	; (8001d28 <HAL_RCC_OscConfig+0x4ac>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f003 030c 	and.w	r3, r3, #12
 8001c56:	2b08      	cmp	r3, #8
 8001c58:	d060      	beq.n	8001d1c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d145      	bne.n	8001cee <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c62:	4b33      	ldr	r3, [pc, #204]	; (8001d30 <HAL_RCC_OscConfig+0x4b4>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c68:	f7fe ffb4 	bl	8000bd4 <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c70:	f7fe ffb0 	bl	8000bd4 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e093      	b.n	8001daa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c82:	4b29      	ldr	r3, [pc, #164]	; (8001d28 <HAL_RCC_OscConfig+0x4ac>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1f0      	bne.n	8001c70 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	69da      	ldr	r2, [r3, #28]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a1b      	ldr	r3, [r3, #32]
 8001c96:	431a      	orrs	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9c:	019b      	lsls	r3, r3, #6
 8001c9e:	431a      	orrs	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca4:	085b      	lsrs	r3, r3, #1
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	041b      	lsls	r3, r3, #16
 8001caa:	431a      	orrs	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb0:	061b      	lsls	r3, r3, #24
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb8:	071b      	lsls	r3, r3, #28
 8001cba:	491b      	ldr	r1, [pc, #108]	; (8001d28 <HAL_RCC_OscConfig+0x4ac>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cc0:	4b1b      	ldr	r3, [pc, #108]	; (8001d30 <HAL_RCC_OscConfig+0x4b4>)
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc6:	f7fe ff85 	bl	8000bd4 <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ccc:	e008      	b.n	8001ce0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cce:	f7fe ff81 	bl	8000bd4 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d901      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e064      	b.n	8001daa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ce0:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <HAL_RCC_OscConfig+0x4ac>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d0f0      	beq.n	8001cce <HAL_RCC_OscConfig+0x452>
 8001cec:	e05c      	b.n	8001da8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cee:	4b10      	ldr	r3, [pc, #64]	; (8001d30 <HAL_RCC_OscConfig+0x4b4>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf4:	f7fe ff6e 	bl	8000bd4 <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cfc:	f7fe ff6a 	bl	8000bd4 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e04d      	b.n	8001daa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d0e:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <HAL_RCC_OscConfig+0x4ac>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1f0      	bne.n	8001cfc <HAL_RCC_OscConfig+0x480>
 8001d1a:	e045      	b.n	8001da8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d107      	bne.n	8001d34 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e040      	b.n	8001daa <HAL_RCC_OscConfig+0x52e>
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	40007000 	.word	0x40007000
 8001d30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d34:	4b1f      	ldr	r3, [pc, #124]	; (8001db4 <HAL_RCC_OscConfig+0x538>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d030      	beq.n	8001da4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d129      	bne.n	8001da4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d122      	bne.n	8001da4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d64:	4013      	ands	r3, r2
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d119      	bne.n	8001da4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7a:	085b      	lsrs	r3, r3, #1
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d10f      	bne.n	8001da4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d107      	bne.n	8001da4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d001      	beq.n	8001da8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e000      	b.n	8001daa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3718      	adds	r7, #24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40023800 	.word	0x40023800

08001db8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e03f      	b.n	8001e4a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d106      	bne.n	8001de4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7fe fd3a 	bl	8000858 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2224      	movs	r2, #36	; 0x24
 8001de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68da      	ldr	r2, [r3, #12]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001dfa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f000 f929 	bl	8002054 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	691a      	ldr	r2, [r3, #16]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	695a      	ldr	r2, [r3, #20]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68da      	ldr	r2, [r3, #12]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2220      	movs	r2, #32
 8001e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2220      	movs	r2, #32
 8001e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b08a      	sub	sp, #40	; 0x28
 8001e56:	af02      	add	r7, sp, #8
 8001e58:	60f8      	str	r0, [r7, #12]
 8001e5a:	60b9      	str	r1, [r7, #8]
 8001e5c:	603b      	str	r3, [r7, #0]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b20      	cmp	r3, #32
 8001e70:	d17c      	bne.n	8001f6c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d002      	beq.n	8001e7e <HAL_UART_Transmit+0x2c>
 8001e78:	88fb      	ldrh	r3, [r7, #6]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e075      	b.n	8001f6e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d101      	bne.n	8001e90 <HAL_UART_Transmit+0x3e>
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	e06e      	b.n	8001f6e <HAL_UART_Transmit+0x11c>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2221      	movs	r2, #33	; 0x21
 8001ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ea6:	f7fe fe95 	bl	8000bd4 <HAL_GetTick>
 8001eaa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	88fa      	ldrh	r2, [r7, #6]
 8001eb0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	88fa      	ldrh	r2, [r7, #6]
 8001eb6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ec0:	d108      	bne.n	8001ed4 <HAL_UART_Transmit+0x82>
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d104      	bne.n	8001ed4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	61bb      	str	r3, [r7, #24]
 8001ed2:	e003      	b.n	8001edc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001ee4:	e02a      	b.n	8001f3c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	9300      	str	r3, [sp, #0]
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	2200      	movs	r2, #0
 8001eee:	2180      	movs	r1, #128	; 0x80
 8001ef0:	68f8      	ldr	r0, [r7, #12]
 8001ef2:	f000 f840 	bl	8001f76 <UART_WaitOnFlagUntilTimeout>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e036      	b.n	8001f6e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d10b      	bne.n	8001f1e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	881b      	ldrh	r3, [r3, #0]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f14:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	3302      	adds	r3, #2
 8001f1a:	61bb      	str	r3, [r7, #24]
 8001f1c:	e007      	b.n	8001f2e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	781a      	ldrb	r2, [r3, #0]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	3b01      	subs	r3, #1
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1cf      	bne.n	8001ee6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	9300      	str	r3, [sp, #0]
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	2140      	movs	r1, #64	; 0x40
 8001f50:	68f8      	ldr	r0, [r7, #12]
 8001f52:	f000 f810 	bl	8001f76 <UART_WaitOnFlagUntilTimeout>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e006      	b.n	8001f6e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2220      	movs	r2, #32
 8001f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	e000      	b.n	8001f6e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001f6c:	2302      	movs	r3, #2
  }
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3720      	adds	r7, #32
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b090      	sub	sp, #64	; 0x40
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	60f8      	str	r0, [r7, #12]
 8001f7e:	60b9      	str	r1, [r7, #8]
 8001f80:	603b      	str	r3, [r7, #0]
 8001f82:	4613      	mov	r3, r2
 8001f84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f86:	e050      	b.n	800202a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f8e:	d04c      	beq.n	800202a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001f90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d007      	beq.n	8001fa6 <UART_WaitOnFlagUntilTimeout+0x30>
 8001f96:	f7fe fe1d 	bl	8000bd4 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d241      	bcs.n	800202a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	330c      	adds	r3, #12
 8001fac:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fb0:	e853 3f00 	ldrex	r3, [r3]
 8001fb4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	330c      	adds	r3, #12
 8001fc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001fc6:	637a      	str	r2, [r7, #52]	; 0x34
 8001fc8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001fcc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fce:	e841 2300 	strex	r3, r2, [r1]
 8001fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1e5      	bne.n	8001fa6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	3314      	adds	r3, #20
 8001fe0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	e853 3f00 	ldrex	r3, [r3]
 8001fe8:	613b      	str	r3, [r7, #16]
   return(result);
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	f023 0301 	bic.w	r3, r3, #1
 8001ff0:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	3314      	adds	r3, #20
 8001ff8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ffa:	623a      	str	r2, [r7, #32]
 8001ffc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ffe:	69f9      	ldr	r1, [r7, #28]
 8002000:	6a3a      	ldr	r2, [r7, #32]
 8002002:	e841 2300 	strex	r3, r2, [r1]
 8002006:	61bb      	str	r3, [r7, #24]
   return(result);
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1e5      	bne.n	8001fda <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2220      	movs	r2, #32
 8002012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2220      	movs	r2, #32
 800201a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e00f      	b.n	800204a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	4013      	ands	r3, r2
 8002034:	68ba      	ldr	r2, [r7, #8]
 8002036:	429a      	cmp	r2, r3
 8002038:	bf0c      	ite	eq
 800203a:	2301      	moveq	r3, #1
 800203c:	2300      	movne	r3, #0
 800203e:	b2db      	uxtb	r3, r3
 8002040:	461a      	mov	r2, r3
 8002042:	79fb      	ldrb	r3, [r7, #7]
 8002044:	429a      	cmp	r2, r3
 8002046:	d09f      	beq.n	8001f88 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3740      	adds	r7, #64	; 0x40
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
	...

08002054 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002054:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002058:	b0c0      	sub	sp, #256	; 0x100
 800205a:	af00      	add	r7, sp, #0
 800205c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800206c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002070:	68d9      	ldr	r1, [r3, #12]
 8002072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	ea40 0301 	orr.w	r3, r0, r1
 800207c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800207e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002082:	689a      	ldr	r2, [r3, #8]
 8002084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	431a      	orrs	r2, r3
 800208c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	431a      	orrs	r2, r3
 8002094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	4313      	orrs	r3, r2
 800209c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80020a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80020ac:	f021 010c 	bic.w	r1, r1, #12
 80020b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80020ba:	430b      	orrs	r3, r1
 80020bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80020ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020ce:	6999      	ldr	r1, [r3, #24]
 80020d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	ea40 0301 	orr.w	r3, r0, r1
 80020da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80020dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	4b8f      	ldr	r3, [pc, #572]	; (8002320 <UART_SetConfig+0x2cc>)
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d005      	beq.n	80020f4 <UART_SetConfig+0xa0>
 80020e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	4b8d      	ldr	r3, [pc, #564]	; (8002324 <UART_SetConfig+0x2d0>)
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d104      	bne.n	80020fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80020f4:	f7ff f97e 	bl	80013f4 <HAL_RCC_GetPCLK2Freq>
 80020f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80020fc:	e003      	b.n	8002106 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80020fe:	f7ff f965 	bl	80013cc <HAL_RCC_GetPCLK1Freq>
 8002102:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800210a:	69db      	ldr	r3, [r3, #28]
 800210c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002110:	f040 810c 	bne.w	800232c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002114:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002118:	2200      	movs	r2, #0
 800211a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800211e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002122:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002126:	4622      	mov	r2, r4
 8002128:	462b      	mov	r3, r5
 800212a:	1891      	adds	r1, r2, r2
 800212c:	65b9      	str	r1, [r7, #88]	; 0x58
 800212e:	415b      	adcs	r3, r3
 8002130:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002132:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002136:	4621      	mov	r1, r4
 8002138:	eb12 0801 	adds.w	r8, r2, r1
 800213c:	4629      	mov	r1, r5
 800213e:	eb43 0901 	adc.w	r9, r3, r1
 8002142:	f04f 0200 	mov.w	r2, #0
 8002146:	f04f 0300 	mov.w	r3, #0
 800214a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800214e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002152:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002156:	4690      	mov	r8, r2
 8002158:	4699      	mov	r9, r3
 800215a:	4623      	mov	r3, r4
 800215c:	eb18 0303 	adds.w	r3, r8, r3
 8002160:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002164:	462b      	mov	r3, r5
 8002166:	eb49 0303 	adc.w	r3, r9, r3
 800216a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800216e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800217a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800217e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002182:	460b      	mov	r3, r1
 8002184:	18db      	adds	r3, r3, r3
 8002186:	653b      	str	r3, [r7, #80]	; 0x50
 8002188:	4613      	mov	r3, r2
 800218a:	eb42 0303 	adc.w	r3, r2, r3
 800218e:	657b      	str	r3, [r7, #84]	; 0x54
 8002190:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002194:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002198:	f7fe f834 	bl	8000204 <__aeabi_uldivmod>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	4b61      	ldr	r3, [pc, #388]	; (8002328 <UART_SetConfig+0x2d4>)
 80021a2:	fba3 2302 	umull	r2, r3, r3, r2
 80021a6:	095b      	lsrs	r3, r3, #5
 80021a8:	011c      	lsls	r4, r3, #4
 80021aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021ae:	2200      	movs	r2, #0
 80021b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80021b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80021b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80021bc:	4642      	mov	r2, r8
 80021be:	464b      	mov	r3, r9
 80021c0:	1891      	adds	r1, r2, r2
 80021c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80021c4:	415b      	adcs	r3, r3
 80021c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80021cc:	4641      	mov	r1, r8
 80021ce:	eb12 0a01 	adds.w	sl, r2, r1
 80021d2:	4649      	mov	r1, r9
 80021d4:	eb43 0b01 	adc.w	fp, r3, r1
 80021d8:	f04f 0200 	mov.w	r2, #0
 80021dc:	f04f 0300 	mov.w	r3, #0
 80021e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80021e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80021e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80021ec:	4692      	mov	sl, r2
 80021ee:	469b      	mov	fp, r3
 80021f0:	4643      	mov	r3, r8
 80021f2:	eb1a 0303 	adds.w	r3, sl, r3
 80021f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80021fa:	464b      	mov	r3, r9
 80021fc:	eb4b 0303 	adc.w	r3, fp, r3
 8002200:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002210:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002214:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002218:	460b      	mov	r3, r1
 800221a:	18db      	adds	r3, r3, r3
 800221c:	643b      	str	r3, [r7, #64]	; 0x40
 800221e:	4613      	mov	r3, r2
 8002220:	eb42 0303 	adc.w	r3, r2, r3
 8002224:	647b      	str	r3, [r7, #68]	; 0x44
 8002226:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800222a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800222e:	f7fd ffe9 	bl	8000204 <__aeabi_uldivmod>
 8002232:	4602      	mov	r2, r0
 8002234:	460b      	mov	r3, r1
 8002236:	4611      	mov	r1, r2
 8002238:	4b3b      	ldr	r3, [pc, #236]	; (8002328 <UART_SetConfig+0x2d4>)
 800223a:	fba3 2301 	umull	r2, r3, r3, r1
 800223e:	095b      	lsrs	r3, r3, #5
 8002240:	2264      	movs	r2, #100	; 0x64
 8002242:	fb02 f303 	mul.w	r3, r2, r3
 8002246:	1acb      	subs	r3, r1, r3
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800224e:	4b36      	ldr	r3, [pc, #216]	; (8002328 <UART_SetConfig+0x2d4>)
 8002250:	fba3 2302 	umull	r2, r3, r3, r2
 8002254:	095b      	lsrs	r3, r3, #5
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800225c:	441c      	add	r4, r3
 800225e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002262:	2200      	movs	r2, #0
 8002264:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002268:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800226c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002270:	4642      	mov	r2, r8
 8002272:	464b      	mov	r3, r9
 8002274:	1891      	adds	r1, r2, r2
 8002276:	63b9      	str	r1, [r7, #56]	; 0x38
 8002278:	415b      	adcs	r3, r3
 800227a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800227c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002280:	4641      	mov	r1, r8
 8002282:	1851      	adds	r1, r2, r1
 8002284:	6339      	str	r1, [r7, #48]	; 0x30
 8002286:	4649      	mov	r1, r9
 8002288:	414b      	adcs	r3, r1
 800228a:	637b      	str	r3, [r7, #52]	; 0x34
 800228c:	f04f 0200 	mov.w	r2, #0
 8002290:	f04f 0300 	mov.w	r3, #0
 8002294:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002298:	4659      	mov	r1, fp
 800229a:	00cb      	lsls	r3, r1, #3
 800229c:	4651      	mov	r1, sl
 800229e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022a2:	4651      	mov	r1, sl
 80022a4:	00ca      	lsls	r2, r1, #3
 80022a6:	4610      	mov	r0, r2
 80022a8:	4619      	mov	r1, r3
 80022aa:	4603      	mov	r3, r0
 80022ac:	4642      	mov	r2, r8
 80022ae:	189b      	adds	r3, r3, r2
 80022b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80022b4:	464b      	mov	r3, r9
 80022b6:	460a      	mov	r2, r1
 80022b8:	eb42 0303 	adc.w	r3, r2, r3
 80022bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80022c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80022cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80022d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80022d4:	460b      	mov	r3, r1
 80022d6:	18db      	adds	r3, r3, r3
 80022d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80022da:	4613      	mov	r3, r2
 80022dc:	eb42 0303 	adc.w	r3, r2, r3
 80022e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80022e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80022ea:	f7fd ff8b 	bl	8000204 <__aeabi_uldivmod>
 80022ee:	4602      	mov	r2, r0
 80022f0:	460b      	mov	r3, r1
 80022f2:	4b0d      	ldr	r3, [pc, #52]	; (8002328 <UART_SetConfig+0x2d4>)
 80022f4:	fba3 1302 	umull	r1, r3, r3, r2
 80022f8:	095b      	lsrs	r3, r3, #5
 80022fa:	2164      	movs	r1, #100	; 0x64
 80022fc:	fb01 f303 	mul.w	r3, r1, r3
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	3332      	adds	r3, #50	; 0x32
 8002306:	4a08      	ldr	r2, [pc, #32]	; (8002328 <UART_SetConfig+0x2d4>)
 8002308:	fba2 2303 	umull	r2, r3, r2, r3
 800230c:	095b      	lsrs	r3, r3, #5
 800230e:	f003 0207 	and.w	r2, r3, #7
 8002312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4422      	add	r2, r4
 800231a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800231c:	e105      	b.n	800252a <UART_SetConfig+0x4d6>
 800231e:	bf00      	nop
 8002320:	40011000 	.word	0x40011000
 8002324:	40011400 	.word	0x40011400
 8002328:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800232c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002330:	2200      	movs	r2, #0
 8002332:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002336:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800233a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800233e:	4642      	mov	r2, r8
 8002340:	464b      	mov	r3, r9
 8002342:	1891      	adds	r1, r2, r2
 8002344:	6239      	str	r1, [r7, #32]
 8002346:	415b      	adcs	r3, r3
 8002348:	627b      	str	r3, [r7, #36]	; 0x24
 800234a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800234e:	4641      	mov	r1, r8
 8002350:	1854      	adds	r4, r2, r1
 8002352:	4649      	mov	r1, r9
 8002354:	eb43 0501 	adc.w	r5, r3, r1
 8002358:	f04f 0200 	mov.w	r2, #0
 800235c:	f04f 0300 	mov.w	r3, #0
 8002360:	00eb      	lsls	r3, r5, #3
 8002362:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002366:	00e2      	lsls	r2, r4, #3
 8002368:	4614      	mov	r4, r2
 800236a:	461d      	mov	r5, r3
 800236c:	4643      	mov	r3, r8
 800236e:	18e3      	adds	r3, r4, r3
 8002370:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002374:	464b      	mov	r3, r9
 8002376:	eb45 0303 	adc.w	r3, r5, r3
 800237a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800237e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800238a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800238e:	f04f 0200 	mov.w	r2, #0
 8002392:	f04f 0300 	mov.w	r3, #0
 8002396:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800239a:	4629      	mov	r1, r5
 800239c:	008b      	lsls	r3, r1, #2
 800239e:	4621      	mov	r1, r4
 80023a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023a4:	4621      	mov	r1, r4
 80023a6:	008a      	lsls	r2, r1, #2
 80023a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80023ac:	f7fd ff2a 	bl	8000204 <__aeabi_uldivmod>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	4b60      	ldr	r3, [pc, #384]	; (8002538 <UART_SetConfig+0x4e4>)
 80023b6:	fba3 2302 	umull	r2, r3, r3, r2
 80023ba:	095b      	lsrs	r3, r3, #5
 80023bc:	011c      	lsls	r4, r3, #4
 80023be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023c2:	2200      	movs	r2, #0
 80023c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80023c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80023cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80023d0:	4642      	mov	r2, r8
 80023d2:	464b      	mov	r3, r9
 80023d4:	1891      	adds	r1, r2, r2
 80023d6:	61b9      	str	r1, [r7, #24]
 80023d8:	415b      	adcs	r3, r3
 80023da:	61fb      	str	r3, [r7, #28]
 80023dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023e0:	4641      	mov	r1, r8
 80023e2:	1851      	adds	r1, r2, r1
 80023e4:	6139      	str	r1, [r7, #16]
 80023e6:	4649      	mov	r1, r9
 80023e8:	414b      	adcs	r3, r1
 80023ea:	617b      	str	r3, [r7, #20]
 80023ec:	f04f 0200 	mov.w	r2, #0
 80023f0:	f04f 0300 	mov.w	r3, #0
 80023f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80023f8:	4659      	mov	r1, fp
 80023fa:	00cb      	lsls	r3, r1, #3
 80023fc:	4651      	mov	r1, sl
 80023fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002402:	4651      	mov	r1, sl
 8002404:	00ca      	lsls	r2, r1, #3
 8002406:	4610      	mov	r0, r2
 8002408:	4619      	mov	r1, r3
 800240a:	4603      	mov	r3, r0
 800240c:	4642      	mov	r2, r8
 800240e:	189b      	adds	r3, r3, r2
 8002410:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002414:	464b      	mov	r3, r9
 8002416:	460a      	mov	r2, r1
 8002418:	eb42 0303 	adc.w	r3, r2, r3
 800241c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	67bb      	str	r3, [r7, #120]	; 0x78
 800242a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800242c:	f04f 0200 	mov.w	r2, #0
 8002430:	f04f 0300 	mov.w	r3, #0
 8002434:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002438:	4649      	mov	r1, r9
 800243a:	008b      	lsls	r3, r1, #2
 800243c:	4641      	mov	r1, r8
 800243e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002442:	4641      	mov	r1, r8
 8002444:	008a      	lsls	r2, r1, #2
 8002446:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800244a:	f7fd fedb 	bl	8000204 <__aeabi_uldivmod>
 800244e:	4602      	mov	r2, r0
 8002450:	460b      	mov	r3, r1
 8002452:	4b39      	ldr	r3, [pc, #228]	; (8002538 <UART_SetConfig+0x4e4>)
 8002454:	fba3 1302 	umull	r1, r3, r3, r2
 8002458:	095b      	lsrs	r3, r3, #5
 800245a:	2164      	movs	r1, #100	; 0x64
 800245c:	fb01 f303 	mul.w	r3, r1, r3
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	011b      	lsls	r3, r3, #4
 8002464:	3332      	adds	r3, #50	; 0x32
 8002466:	4a34      	ldr	r2, [pc, #208]	; (8002538 <UART_SetConfig+0x4e4>)
 8002468:	fba2 2303 	umull	r2, r3, r2, r3
 800246c:	095b      	lsrs	r3, r3, #5
 800246e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002472:	441c      	add	r4, r3
 8002474:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002478:	2200      	movs	r2, #0
 800247a:	673b      	str	r3, [r7, #112]	; 0x70
 800247c:	677a      	str	r2, [r7, #116]	; 0x74
 800247e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002482:	4642      	mov	r2, r8
 8002484:	464b      	mov	r3, r9
 8002486:	1891      	adds	r1, r2, r2
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	415b      	adcs	r3, r3
 800248c:	60fb      	str	r3, [r7, #12]
 800248e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002492:	4641      	mov	r1, r8
 8002494:	1851      	adds	r1, r2, r1
 8002496:	6039      	str	r1, [r7, #0]
 8002498:	4649      	mov	r1, r9
 800249a:	414b      	adcs	r3, r1
 800249c:	607b      	str	r3, [r7, #4]
 800249e:	f04f 0200 	mov.w	r2, #0
 80024a2:	f04f 0300 	mov.w	r3, #0
 80024a6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80024aa:	4659      	mov	r1, fp
 80024ac:	00cb      	lsls	r3, r1, #3
 80024ae:	4651      	mov	r1, sl
 80024b0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024b4:	4651      	mov	r1, sl
 80024b6:	00ca      	lsls	r2, r1, #3
 80024b8:	4610      	mov	r0, r2
 80024ba:	4619      	mov	r1, r3
 80024bc:	4603      	mov	r3, r0
 80024be:	4642      	mov	r2, r8
 80024c0:	189b      	adds	r3, r3, r2
 80024c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80024c4:	464b      	mov	r3, r9
 80024c6:	460a      	mov	r2, r1
 80024c8:	eb42 0303 	adc.w	r3, r2, r3
 80024cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80024ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	663b      	str	r3, [r7, #96]	; 0x60
 80024d8:	667a      	str	r2, [r7, #100]	; 0x64
 80024da:	f04f 0200 	mov.w	r2, #0
 80024de:	f04f 0300 	mov.w	r3, #0
 80024e2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80024e6:	4649      	mov	r1, r9
 80024e8:	008b      	lsls	r3, r1, #2
 80024ea:	4641      	mov	r1, r8
 80024ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80024f0:	4641      	mov	r1, r8
 80024f2:	008a      	lsls	r2, r1, #2
 80024f4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80024f8:	f7fd fe84 	bl	8000204 <__aeabi_uldivmod>
 80024fc:	4602      	mov	r2, r0
 80024fe:	460b      	mov	r3, r1
 8002500:	4b0d      	ldr	r3, [pc, #52]	; (8002538 <UART_SetConfig+0x4e4>)
 8002502:	fba3 1302 	umull	r1, r3, r3, r2
 8002506:	095b      	lsrs	r3, r3, #5
 8002508:	2164      	movs	r1, #100	; 0x64
 800250a:	fb01 f303 	mul.w	r3, r1, r3
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	011b      	lsls	r3, r3, #4
 8002512:	3332      	adds	r3, #50	; 0x32
 8002514:	4a08      	ldr	r2, [pc, #32]	; (8002538 <UART_SetConfig+0x4e4>)
 8002516:	fba2 2303 	umull	r2, r3, r2, r3
 800251a:	095b      	lsrs	r3, r3, #5
 800251c:	f003 020f 	and.w	r2, r3, #15
 8002520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4422      	add	r2, r4
 8002528:	609a      	str	r2, [r3, #8]
}
 800252a:	bf00      	nop
 800252c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002530:	46bd      	mov	sp, r7
 8002532:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002536:	bf00      	nop
 8002538:	51eb851f 	.word	0x51eb851f

0800253c <__errno>:
 800253c:	4b01      	ldr	r3, [pc, #4]	; (8002544 <__errno+0x8>)
 800253e:	6818      	ldr	r0, [r3, #0]
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	2000000c 	.word	0x2000000c

08002548 <__libc_init_array>:
 8002548:	b570      	push	{r4, r5, r6, lr}
 800254a:	4d0d      	ldr	r5, [pc, #52]	; (8002580 <__libc_init_array+0x38>)
 800254c:	4c0d      	ldr	r4, [pc, #52]	; (8002584 <__libc_init_array+0x3c>)
 800254e:	1b64      	subs	r4, r4, r5
 8002550:	10a4      	asrs	r4, r4, #2
 8002552:	2600      	movs	r6, #0
 8002554:	42a6      	cmp	r6, r4
 8002556:	d109      	bne.n	800256c <__libc_init_array+0x24>
 8002558:	4d0b      	ldr	r5, [pc, #44]	; (8002588 <__libc_init_array+0x40>)
 800255a:	4c0c      	ldr	r4, [pc, #48]	; (800258c <__libc_init_array+0x44>)
 800255c:	f000 fd1e 	bl	8002f9c <_init>
 8002560:	1b64      	subs	r4, r4, r5
 8002562:	10a4      	asrs	r4, r4, #2
 8002564:	2600      	movs	r6, #0
 8002566:	42a6      	cmp	r6, r4
 8002568:	d105      	bne.n	8002576 <__libc_init_array+0x2e>
 800256a:	bd70      	pop	{r4, r5, r6, pc}
 800256c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002570:	4798      	blx	r3
 8002572:	3601      	adds	r6, #1
 8002574:	e7ee      	b.n	8002554 <__libc_init_array+0xc>
 8002576:	f855 3b04 	ldr.w	r3, [r5], #4
 800257a:	4798      	blx	r3
 800257c:	3601      	adds	r6, #1
 800257e:	e7f2      	b.n	8002566 <__libc_init_array+0x1e>
 8002580:	0800309c 	.word	0x0800309c
 8002584:	0800309c 	.word	0x0800309c
 8002588:	0800309c 	.word	0x0800309c
 800258c:	080030a0 	.word	0x080030a0

08002590 <memset>:
 8002590:	4402      	add	r2, r0
 8002592:	4603      	mov	r3, r0
 8002594:	4293      	cmp	r3, r2
 8002596:	d100      	bne.n	800259a <memset+0xa>
 8002598:	4770      	bx	lr
 800259a:	f803 1b01 	strb.w	r1, [r3], #1
 800259e:	e7f9      	b.n	8002594 <memset+0x4>

080025a0 <_puts_r>:
 80025a0:	b570      	push	{r4, r5, r6, lr}
 80025a2:	460e      	mov	r6, r1
 80025a4:	4605      	mov	r5, r0
 80025a6:	b118      	cbz	r0, 80025b0 <_puts_r+0x10>
 80025a8:	6983      	ldr	r3, [r0, #24]
 80025aa:	b90b      	cbnz	r3, 80025b0 <_puts_r+0x10>
 80025ac:	f000 fa48 	bl	8002a40 <__sinit>
 80025b0:	69ab      	ldr	r3, [r5, #24]
 80025b2:	68ac      	ldr	r4, [r5, #8]
 80025b4:	b913      	cbnz	r3, 80025bc <_puts_r+0x1c>
 80025b6:	4628      	mov	r0, r5
 80025b8:	f000 fa42 	bl	8002a40 <__sinit>
 80025bc:	4b2c      	ldr	r3, [pc, #176]	; (8002670 <_puts_r+0xd0>)
 80025be:	429c      	cmp	r4, r3
 80025c0:	d120      	bne.n	8002604 <_puts_r+0x64>
 80025c2:	686c      	ldr	r4, [r5, #4]
 80025c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80025c6:	07db      	lsls	r3, r3, #31
 80025c8:	d405      	bmi.n	80025d6 <_puts_r+0x36>
 80025ca:	89a3      	ldrh	r3, [r4, #12]
 80025cc:	0598      	lsls	r0, r3, #22
 80025ce:	d402      	bmi.n	80025d6 <_puts_r+0x36>
 80025d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80025d2:	f000 fad3 	bl	8002b7c <__retarget_lock_acquire_recursive>
 80025d6:	89a3      	ldrh	r3, [r4, #12]
 80025d8:	0719      	lsls	r1, r3, #28
 80025da:	d51d      	bpl.n	8002618 <_puts_r+0x78>
 80025dc:	6923      	ldr	r3, [r4, #16]
 80025de:	b1db      	cbz	r3, 8002618 <_puts_r+0x78>
 80025e0:	3e01      	subs	r6, #1
 80025e2:	68a3      	ldr	r3, [r4, #8]
 80025e4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80025e8:	3b01      	subs	r3, #1
 80025ea:	60a3      	str	r3, [r4, #8]
 80025ec:	bb39      	cbnz	r1, 800263e <_puts_r+0x9e>
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	da38      	bge.n	8002664 <_puts_r+0xc4>
 80025f2:	4622      	mov	r2, r4
 80025f4:	210a      	movs	r1, #10
 80025f6:	4628      	mov	r0, r5
 80025f8:	f000 f848 	bl	800268c <__swbuf_r>
 80025fc:	3001      	adds	r0, #1
 80025fe:	d011      	beq.n	8002624 <_puts_r+0x84>
 8002600:	250a      	movs	r5, #10
 8002602:	e011      	b.n	8002628 <_puts_r+0x88>
 8002604:	4b1b      	ldr	r3, [pc, #108]	; (8002674 <_puts_r+0xd4>)
 8002606:	429c      	cmp	r4, r3
 8002608:	d101      	bne.n	800260e <_puts_r+0x6e>
 800260a:	68ac      	ldr	r4, [r5, #8]
 800260c:	e7da      	b.n	80025c4 <_puts_r+0x24>
 800260e:	4b1a      	ldr	r3, [pc, #104]	; (8002678 <_puts_r+0xd8>)
 8002610:	429c      	cmp	r4, r3
 8002612:	bf08      	it	eq
 8002614:	68ec      	ldreq	r4, [r5, #12]
 8002616:	e7d5      	b.n	80025c4 <_puts_r+0x24>
 8002618:	4621      	mov	r1, r4
 800261a:	4628      	mov	r0, r5
 800261c:	f000 f888 	bl	8002730 <__swsetup_r>
 8002620:	2800      	cmp	r0, #0
 8002622:	d0dd      	beq.n	80025e0 <_puts_r+0x40>
 8002624:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002628:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800262a:	07da      	lsls	r2, r3, #31
 800262c:	d405      	bmi.n	800263a <_puts_r+0x9a>
 800262e:	89a3      	ldrh	r3, [r4, #12]
 8002630:	059b      	lsls	r3, r3, #22
 8002632:	d402      	bmi.n	800263a <_puts_r+0x9a>
 8002634:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002636:	f000 faa2 	bl	8002b7e <__retarget_lock_release_recursive>
 800263a:	4628      	mov	r0, r5
 800263c:	bd70      	pop	{r4, r5, r6, pc}
 800263e:	2b00      	cmp	r3, #0
 8002640:	da04      	bge.n	800264c <_puts_r+0xac>
 8002642:	69a2      	ldr	r2, [r4, #24]
 8002644:	429a      	cmp	r2, r3
 8002646:	dc06      	bgt.n	8002656 <_puts_r+0xb6>
 8002648:	290a      	cmp	r1, #10
 800264a:	d004      	beq.n	8002656 <_puts_r+0xb6>
 800264c:	6823      	ldr	r3, [r4, #0]
 800264e:	1c5a      	adds	r2, r3, #1
 8002650:	6022      	str	r2, [r4, #0]
 8002652:	7019      	strb	r1, [r3, #0]
 8002654:	e7c5      	b.n	80025e2 <_puts_r+0x42>
 8002656:	4622      	mov	r2, r4
 8002658:	4628      	mov	r0, r5
 800265a:	f000 f817 	bl	800268c <__swbuf_r>
 800265e:	3001      	adds	r0, #1
 8002660:	d1bf      	bne.n	80025e2 <_puts_r+0x42>
 8002662:	e7df      	b.n	8002624 <_puts_r+0x84>
 8002664:	6823      	ldr	r3, [r4, #0]
 8002666:	250a      	movs	r5, #10
 8002668:	1c5a      	adds	r2, r3, #1
 800266a:	6022      	str	r2, [r4, #0]
 800266c:	701d      	strb	r5, [r3, #0]
 800266e:	e7db      	b.n	8002628 <_puts_r+0x88>
 8002670:	08003054 	.word	0x08003054
 8002674:	08003074 	.word	0x08003074
 8002678:	08003034 	.word	0x08003034

0800267c <puts>:
 800267c:	4b02      	ldr	r3, [pc, #8]	; (8002688 <puts+0xc>)
 800267e:	4601      	mov	r1, r0
 8002680:	6818      	ldr	r0, [r3, #0]
 8002682:	f7ff bf8d 	b.w	80025a0 <_puts_r>
 8002686:	bf00      	nop
 8002688:	2000000c 	.word	0x2000000c

0800268c <__swbuf_r>:
 800268c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800268e:	460e      	mov	r6, r1
 8002690:	4614      	mov	r4, r2
 8002692:	4605      	mov	r5, r0
 8002694:	b118      	cbz	r0, 800269e <__swbuf_r+0x12>
 8002696:	6983      	ldr	r3, [r0, #24]
 8002698:	b90b      	cbnz	r3, 800269e <__swbuf_r+0x12>
 800269a:	f000 f9d1 	bl	8002a40 <__sinit>
 800269e:	4b21      	ldr	r3, [pc, #132]	; (8002724 <__swbuf_r+0x98>)
 80026a0:	429c      	cmp	r4, r3
 80026a2:	d12b      	bne.n	80026fc <__swbuf_r+0x70>
 80026a4:	686c      	ldr	r4, [r5, #4]
 80026a6:	69a3      	ldr	r3, [r4, #24]
 80026a8:	60a3      	str	r3, [r4, #8]
 80026aa:	89a3      	ldrh	r3, [r4, #12]
 80026ac:	071a      	lsls	r2, r3, #28
 80026ae:	d52f      	bpl.n	8002710 <__swbuf_r+0x84>
 80026b0:	6923      	ldr	r3, [r4, #16]
 80026b2:	b36b      	cbz	r3, 8002710 <__swbuf_r+0x84>
 80026b4:	6923      	ldr	r3, [r4, #16]
 80026b6:	6820      	ldr	r0, [r4, #0]
 80026b8:	1ac0      	subs	r0, r0, r3
 80026ba:	6963      	ldr	r3, [r4, #20]
 80026bc:	b2f6      	uxtb	r6, r6
 80026be:	4283      	cmp	r3, r0
 80026c0:	4637      	mov	r7, r6
 80026c2:	dc04      	bgt.n	80026ce <__swbuf_r+0x42>
 80026c4:	4621      	mov	r1, r4
 80026c6:	4628      	mov	r0, r5
 80026c8:	f000 f926 	bl	8002918 <_fflush_r>
 80026cc:	bb30      	cbnz	r0, 800271c <__swbuf_r+0x90>
 80026ce:	68a3      	ldr	r3, [r4, #8]
 80026d0:	3b01      	subs	r3, #1
 80026d2:	60a3      	str	r3, [r4, #8]
 80026d4:	6823      	ldr	r3, [r4, #0]
 80026d6:	1c5a      	adds	r2, r3, #1
 80026d8:	6022      	str	r2, [r4, #0]
 80026da:	701e      	strb	r6, [r3, #0]
 80026dc:	6963      	ldr	r3, [r4, #20]
 80026de:	3001      	adds	r0, #1
 80026e0:	4283      	cmp	r3, r0
 80026e2:	d004      	beq.n	80026ee <__swbuf_r+0x62>
 80026e4:	89a3      	ldrh	r3, [r4, #12]
 80026e6:	07db      	lsls	r3, r3, #31
 80026e8:	d506      	bpl.n	80026f8 <__swbuf_r+0x6c>
 80026ea:	2e0a      	cmp	r6, #10
 80026ec:	d104      	bne.n	80026f8 <__swbuf_r+0x6c>
 80026ee:	4621      	mov	r1, r4
 80026f0:	4628      	mov	r0, r5
 80026f2:	f000 f911 	bl	8002918 <_fflush_r>
 80026f6:	b988      	cbnz	r0, 800271c <__swbuf_r+0x90>
 80026f8:	4638      	mov	r0, r7
 80026fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026fc:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <__swbuf_r+0x9c>)
 80026fe:	429c      	cmp	r4, r3
 8002700:	d101      	bne.n	8002706 <__swbuf_r+0x7a>
 8002702:	68ac      	ldr	r4, [r5, #8]
 8002704:	e7cf      	b.n	80026a6 <__swbuf_r+0x1a>
 8002706:	4b09      	ldr	r3, [pc, #36]	; (800272c <__swbuf_r+0xa0>)
 8002708:	429c      	cmp	r4, r3
 800270a:	bf08      	it	eq
 800270c:	68ec      	ldreq	r4, [r5, #12]
 800270e:	e7ca      	b.n	80026a6 <__swbuf_r+0x1a>
 8002710:	4621      	mov	r1, r4
 8002712:	4628      	mov	r0, r5
 8002714:	f000 f80c 	bl	8002730 <__swsetup_r>
 8002718:	2800      	cmp	r0, #0
 800271a:	d0cb      	beq.n	80026b4 <__swbuf_r+0x28>
 800271c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002720:	e7ea      	b.n	80026f8 <__swbuf_r+0x6c>
 8002722:	bf00      	nop
 8002724:	08003054 	.word	0x08003054
 8002728:	08003074 	.word	0x08003074
 800272c:	08003034 	.word	0x08003034

08002730 <__swsetup_r>:
 8002730:	4b32      	ldr	r3, [pc, #200]	; (80027fc <__swsetup_r+0xcc>)
 8002732:	b570      	push	{r4, r5, r6, lr}
 8002734:	681d      	ldr	r5, [r3, #0]
 8002736:	4606      	mov	r6, r0
 8002738:	460c      	mov	r4, r1
 800273a:	b125      	cbz	r5, 8002746 <__swsetup_r+0x16>
 800273c:	69ab      	ldr	r3, [r5, #24]
 800273e:	b913      	cbnz	r3, 8002746 <__swsetup_r+0x16>
 8002740:	4628      	mov	r0, r5
 8002742:	f000 f97d 	bl	8002a40 <__sinit>
 8002746:	4b2e      	ldr	r3, [pc, #184]	; (8002800 <__swsetup_r+0xd0>)
 8002748:	429c      	cmp	r4, r3
 800274a:	d10f      	bne.n	800276c <__swsetup_r+0x3c>
 800274c:	686c      	ldr	r4, [r5, #4]
 800274e:	89a3      	ldrh	r3, [r4, #12]
 8002750:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002754:	0719      	lsls	r1, r3, #28
 8002756:	d42c      	bmi.n	80027b2 <__swsetup_r+0x82>
 8002758:	06dd      	lsls	r5, r3, #27
 800275a:	d411      	bmi.n	8002780 <__swsetup_r+0x50>
 800275c:	2309      	movs	r3, #9
 800275e:	6033      	str	r3, [r6, #0]
 8002760:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002764:	81a3      	strh	r3, [r4, #12]
 8002766:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800276a:	e03e      	b.n	80027ea <__swsetup_r+0xba>
 800276c:	4b25      	ldr	r3, [pc, #148]	; (8002804 <__swsetup_r+0xd4>)
 800276e:	429c      	cmp	r4, r3
 8002770:	d101      	bne.n	8002776 <__swsetup_r+0x46>
 8002772:	68ac      	ldr	r4, [r5, #8]
 8002774:	e7eb      	b.n	800274e <__swsetup_r+0x1e>
 8002776:	4b24      	ldr	r3, [pc, #144]	; (8002808 <__swsetup_r+0xd8>)
 8002778:	429c      	cmp	r4, r3
 800277a:	bf08      	it	eq
 800277c:	68ec      	ldreq	r4, [r5, #12]
 800277e:	e7e6      	b.n	800274e <__swsetup_r+0x1e>
 8002780:	0758      	lsls	r0, r3, #29
 8002782:	d512      	bpl.n	80027aa <__swsetup_r+0x7a>
 8002784:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002786:	b141      	cbz	r1, 800279a <__swsetup_r+0x6a>
 8002788:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800278c:	4299      	cmp	r1, r3
 800278e:	d002      	beq.n	8002796 <__swsetup_r+0x66>
 8002790:	4630      	mov	r0, r6
 8002792:	f000 fa5b 	bl	8002c4c <_free_r>
 8002796:	2300      	movs	r3, #0
 8002798:	6363      	str	r3, [r4, #52]	; 0x34
 800279a:	89a3      	ldrh	r3, [r4, #12]
 800279c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80027a0:	81a3      	strh	r3, [r4, #12]
 80027a2:	2300      	movs	r3, #0
 80027a4:	6063      	str	r3, [r4, #4]
 80027a6:	6923      	ldr	r3, [r4, #16]
 80027a8:	6023      	str	r3, [r4, #0]
 80027aa:	89a3      	ldrh	r3, [r4, #12]
 80027ac:	f043 0308 	orr.w	r3, r3, #8
 80027b0:	81a3      	strh	r3, [r4, #12]
 80027b2:	6923      	ldr	r3, [r4, #16]
 80027b4:	b94b      	cbnz	r3, 80027ca <__swsetup_r+0x9a>
 80027b6:	89a3      	ldrh	r3, [r4, #12]
 80027b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80027bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027c0:	d003      	beq.n	80027ca <__swsetup_r+0x9a>
 80027c2:	4621      	mov	r1, r4
 80027c4:	4630      	mov	r0, r6
 80027c6:	f000 fa01 	bl	8002bcc <__smakebuf_r>
 80027ca:	89a0      	ldrh	r0, [r4, #12]
 80027cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80027d0:	f010 0301 	ands.w	r3, r0, #1
 80027d4:	d00a      	beq.n	80027ec <__swsetup_r+0xbc>
 80027d6:	2300      	movs	r3, #0
 80027d8:	60a3      	str	r3, [r4, #8]
 80027da:	6963      	ldr	r3, [r4, #20]
 80027dc:	425b      	negs	r3, r3
 80027de:	61a3      	str	r3, [r4, #24]
 80027e0:	6923      	ldr	r3, [r4, #16]
 80027e2:	b943      	cbnz	r3, 80027f6 <__swsetup_r+0xc6>
 80027e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80027e8:	d1ba      	bne.n	8002760 <__swsetup_r+0x30>
 80027ea:	bd70      	pop	{r4, r5, r6, pc}
 80027ec:	0781      	lsls	r1, r0, #30
 80027ee:	bf58      	it	pl
 80027f0:	6963      	ldrpl	r3, [r4, #20]
 80027f2:	60a3      	str	r3, [r4, #8]
 80027f4:	e7f4      	b.n	80027e0 <__swsetup_r+0xb0>
 80027f6:	2000      	movs	r0, #0
 80027f8:	e7f7      	b.n	80027ea <__swsetup_r+0xba>
 80027fa:	bf00      	nop
 80027fc:	2000000c 	.word	0x2000000c
 8002800:	08003054 	.word	0x08003054
 8002804:	08003074 	.word	0x08003074
 8002808:	08003034 	.word	0x08003034

0800280c <__sflush_r>:
 800280c:	898a      	ldrh	r2, [r1, #12]
 800280e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002812:	4605      	mov	r5, r0
 8002814:	0710      	lsls	r0, r2, #28
 8002816:	460c      	mov	r4, r1
 8002818:	d458      	bmi.n	80028cc <__sflush_r+0xc0>
 800281a:	684b      	ldr	r3, [r1, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	dc05      	bgt.n	800282c <__sflush_r+0x20>
 8002820:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002822:	2b00      	cmp	r3, #0
 8002824:	dc02      	bgt.n	800282c <__sflush_r+0x20>
 8002826:	2000      	movs	r0, #0
 8002828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800282c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800282e:	2e00      	cmp	r6, #0
 8002830:	d0f9      	beq.n	8002826 <__sflush_r+0x1a>
 8002832:	2300      	movs	r3, #0
 8002834:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002838:	682f      	ldr	r7, [r5, #0]
 800283a:	602b      	str	r3, [r5, #0]
 800283c:	d032      	beq.n	80028a4 <__sflush_r+0x98>
 800283e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002840:	89a3      	ldrh	r3, [r4, #12]
 8002842:	075a      	lsls	r2, r3, #29
 8002844:	d505      	bpl.n	8002852 <__sflush_r+0x46>
 8002846:	6863      	ldr	r3, [r4, #4]
 8002848:	1ac0      	subs	r0, r0, r3
 800284a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800284c:	b10b      	cbz	r3, 8002852 <__sflush_r+0x46>
 800284e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002850:	1ac0      	subs	r0, r0, r3
 8002852:	2300      	movs	r3, #0
 8002854:	4602      	mov	r2, r0
 8002856:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002858:	6a21      	ldr	r1, [r4, #32]
 800285a:	4628      	mov	r0, r5
 800285c:	47b0      	blx	r6
 800285e:	1c43      	adds	r3, r0, #1
 8002860:	89a3      	ldrh	r3, [r4, #12]
 8002862:	d106      	bne.n	8002872 <__sflush_r+0x66>
 8002864:	6829      	ldr	r1, [r5, #0]
 8002866:	291d      	cmp	r1, #29
 8002868:	d82c      	bhi.n	80028c4 <__sflush_r+0xb8>
 800286a:	4a2a      	ldr	r2, [pc, #168]	; (8002914 <__sflush_r+0x108>)
 800286c:	40ca      	lsrs	r2, r1
 800286e:	07d6      	lsls	r6, r2, #31
 8002870:	d528      	bpl.n	80028c4 <__sflush_r+0xb8>
 8002872:	2200      	movs	r2, #0
 8002874:	6062      	str	r2, [r4, #4]
 8002876:	04d9      	lsls	r1, r3, #19
 8002878:	6922      	ldr	r2, [r4, #16]
 800287a:	6022      	str	r2, [r4, #0]
 800287c:	d504      	bpl.n	8002888 <__sflush_r+0x7c>
 800287e:	1c42      	adds	r2, r0, #1
 8002880:	d101      	bne.n	8002886 <__sflush_r+0x7a>
 8002882:	682b      	ldr	r3, [r5, #0]
 8002884:	b903      	cbnz	r3, 8002888 <__sflush_r+0x7c>
 8002886:	6560      	str	r0, [r4, #84]	; 0x54
 8002888:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800288a:	602f      	str	r7, [r5, #0]
 800288c:	2900      	cmp	r1, #0
 800288e:	d0ca      	beq.n	8002826 <__sflush_r+0x1a>
 8002890:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002894:	4299      	cmp	r1, r3
 8002896:	d002      	beq.n	800289e <__sflush_r+0x92>
 8002898:	4628      	mov	r0, r5
 800289a:	f000 f9d7 	bl	8002c4c <_free_r>
 800289e:	2000      	movs	r0, #0
 80028a0:	6360      	str	r0, [r4, #52]	; 0x34
 80028a2:	e7c1      	b.n	8002828 <__sflush_r+0x1c>
 80028a4:	6a21      	ldr	r1, [r4, #32]
 80028a6:	2301      	movs	r3, #1
 80028a8:	4628      	mov	r0, r5
 80028aa:	47b0      	blx	r6
 80028ac:	1c41      	adds	r1, r0, #1
 80028ae:	d1c7      	bne.n	8002840 <__sflush_r+0x34>
 80028b0:	682b      	ldr	r3, [r5, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d0c4      	beq.n	8002840 <__sflush_r+0x34>
 80028b6:	2b1d      	cmp	r3, #29
 80028b8:	d001      	beq.n	80028be <__sflush_r+0xb2>
 80028ba:	2b16      	cmp	r3, #22
 80028bc:	d101      	bne.n	80028c2 <__sflush_r+0xb6>
 80028be:	602f      	str	r7, [r5, #0]
 80028c0:	e7b1      	b.n	8002826 <__sflush_r+0x1a>
 80028c2:	89a3      	ldrh	r3, [r4, #12]
 80028c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028c8:	81a3      	strh	r3, [r4, #12]
 80028ca:	e7ad      	b.n	8002828 <__sflush_r+0x1c>
 80028cc:	690f      	ldr	r7, [r1, #16]
 80028ce:	2f00      	cmp	r7, #0
 80028d0:	d0a9      	beq.n	8002826 <__sflush_r+0x1a>
 80028d2:	0793      	lsls	r3, r2, #30
 80028d4:	680e      	ldr	r6, [r1, #0]
 80028d6:	bf08      	it	eq
 80028d8:	694b      	ldreq	r3, [r1, #20]
 80028da:	600f      	str	r7, [r1, #0]
 80028dc:	bf18      	it	ne
 80028de:	2300      	movne	r3, #0
 80028e0:	eba6 0807 	sub.w	r8, r6, r7
 80028e4:	608b      	str	r3, [r1, #8]
 80028e6:	f1b8 0f00 	cmp.w	r8, #0
 80028ea:	dd9c      	ble.n	8002826 <__sflush_r+0x1a>
 80028ec:	6a21      	ldr	r1, [r4, #32]
 80028ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80028f0:	4643      	mov	r3, r8
 80028f2:	463a      	mov	r2, r7
 80028f4:	4628      	mov	r0, r5
 80028f6:	47b0      	blx	r6
 80028f8:	2800      	cmp	r0, #0
 80028fa:	dc06      	bgt.n	800290a <__sflush_r+0xfe>
 80028fc:	89a3      	ldrh	r3, [r4, #12]
 80028fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002902:	81a3      	strh	r3, [r4, #12]
 8002904:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002908:	e78e      	b.n	8002828 <__sflush_r+0x1c>
 800290a:	4407      	add	r7, r0
 800290c:	eba8 0800 	sub.w	r8, r8, r0
 8002910:	e7e9      	b.n	80028e6 <__sflush_r+0xda>
 8002912:	bf00      	nop
 8002914:	20400001 	.word	0x20400001

08002918 <_fflush_r>:
 8002918:	b538      	push	{r3, r4, r5, lr}
 800291a:	690b      	ldr	r3, [r1, #16]
 800291c:	4605      	mov	r5, r0
 800291e:	460c      	mov	r4, r1
 8002920:	b913      	cbnz	r3, 8002928 <_fflush_r+0x10>
 8002922:	2500      	movs	r5, #0
 8002924:	4628      	mov	r0, r5
 8002926:	bd38      	pop	{r3, r4, r5, pc}
 8002928:	b118      	cbz	r0, 8002932 <_fflush_r+0x1a>
 800292a:	6983      	ldr	r3, [r0, #24]
 800292c:	b90b      	cbnz	r3, 8002932 <_fflush_r+0x1a>
 800292e:	f000 f887 	bl	8002a40 <__sinit>
 8002932:	4b14      	ldr	r3, [pc, #80]	; (8002984 <_fflush_r+0x6c>)
 8002934:	429c      	cmp	r4, r3
 8002936:	d11b      	bne.n	8002970 <_fflush_r+0x58>
 8002938:	686c      	ldr	r4, [r5, #4]
 800293a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d0ef      	beq.n	8002922 <_fflush_r+0xa>
 8002942:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002944:	07d0      	lsls	r0, r2, #31
 8002946:	d404      	bmi.n	8002952 <_fflush_r+0x3a>
 8002948:	0599      	lsls	r1, r3, #22
 800294a:	d402      	bmi.n	8002952 <_fflush_r+0x3a>
 800294c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800294e:	f000 f915 	bl	8002b7c <__retarget_lock_acquire_recursive>
 8002952:	4628      	mov	r0, r5
 8002954:	4621      	mov	r1, r4
 8002956:	f7ff ff59 	bl	800280c <__sflush_r>
 800295a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800295c:	07da      	lsls	r2, r3, #31
 800295e:	4605      	mov	r5, r0
 8002960:	d4e0      	bmi.n	8002924 <_fflush_r+0xc>
 8002962:	89a3      	ldrh	r3, [r4, #12]
 8002964:	059b      	lsls	r3, r3, #22
 8002966:	d4dd      	bmi.n	8002924 <_fflush_r+0xc>
 8002968:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800296a:	f000 f908 	bl	8002b7e <__retarget_lock_release_recursive>
 800296e:	e7d9      	b.n	8002924 <_fflush_r+0xc>
 8002970:	4b05      	ldr	r3, [pc, #20]	; (8002988 <_fflush_r+0x70>)
 8002972:	429c      	cmp	r4, r3
 8002974:	d101      	bne.n	800297a <_fflush_r+0x62>
 8002976:	68ac      	ldr	r4, [r5, #8]
 8002978:	e7df      	b.n	800293a <_fflush_r+0x22>
 800297a:	4b04      	ldr	r3, [pc, #16]	; (800298c <_fflush_r+0x74>)
 800297c:	429c      	cmp	r4, r3
 800297e:	bf08      	it	eq
 8002980:	68ec      	ldreq	r4, [r5, #12]
 8002982:	e7da      	b.n	800293a <_fflush_r+0x22>
 8002984:	08003054 	.word	0x08003054
 8002988:	08003074 	.word	0x08003074
 800298c:	08003034 	.word	0x08003034

08002990 <std>:
 8002990:	2300      	movs	r3, #0
 8002992:	b510      	push	{r4, lr}
 8002994:	4604      	mov	r4, r0
 8002996:	e9c0 3300 	strd	r3, r3, [r0]
 800299a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800299e:	6083      	str	r3, [r0, #8]
 80029a0:	8181      	strh	r1, [r0, #12]
 80029a2:	6643      	str	r3, [r0, #100]	; 0x64
 80029a4:	81c2      	strh	r2, [r0, #14]
 80029a6:	6183      	str	r3, [r0, #24]
 80029a8:	4619      	mov	r1, r3
 80029aa:	2208      	movs	r2, #8
 80029ac:	305c      	adds	r0, #92	; 0x5c
 80029ae:	f7ff fdef 	bl	8002590 <memset>
 80029b2:	4b05      	ldr	r3, [pc, #20]	; (80029c8 <std+0x38>)
 80029b4:	6263      	str	r3, [r4, #36]	; 0x24
 80029b6:	4b05      	ldr	r3, [pc, #20]	; (80029cc <std+0x3c>)
 80029b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80029ba:	4b05      	ldr	r3, [pc, #20]	; (80029d0 <std+0x40>)
 80029bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80029be:	4b05      	ldr	r3, [pc, #20]	; (80029d4 <std+0x44>)
 80029c0:	6224      	str	r4, [r4, #32]
 80029c2:	6323      	str	r3, [r4, #48]	; 0x30
 80029c4:	bd10      	pop	{r4, pc}
 80029c6:	bf00      	nop
 80029c8:	08002e2d 	.word	0x08002e2d
 80029cc:	08002e4f 	.word	0x08002e4f
 80029d0:	08002e87 	.word	0x08002e87
 80029d4:	08002eab 	.word	0x08002eab

080029d8 <_cleanup_r>:
 80029d8:	4901      	ldr	r1, [pc, #4]	; (80029e0 <_cleanup_r+0x8>)
 80029da:	f000 b8af 	b.w	8002b3c <_fwalk_reent>
 80029de:	bf00      	nop
 80029e0:	08002919 	.word	0x08002919

080029e4 <__sfmoreglue>:
 80029e4:	b570      	push	{r4, r5, r6, lr}
 80029e6:	2268      	movs	r2, #104	; 0x68
 80029e8:	1e4d      	subs	r5, r1, #1
 80029ea:	4355      	muls	r5, r2
 80029ec:	460e      	mov	r6, r1
 80029ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80029f2:	f000 f997 	bl	8002d24 <_malloc_r>
 80029f6:	4604      	mov	r4, r0
 80029f8:	b140      	cbz	r0, 8002a0c <__sfmoreglue+0x28>
 80029fa:	2100      	movs	r1, #0
 80029fc:	e9c0 1600 	strd	r1, r6, [r0]
 8002a00:	300c      	adds	r0, #12
 8002a02:	60a0      	str	r0, [r4, #8]
 8002a04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002a08:	f7ff fdc2 	bl	8002590 <memset>
 8002a0c:	4620      	mov	r0, r4
 8002a0e:	bd70      	pop	{r4, r5, r6, pc}

08002a10 <__sfp_lock_acquire>:
 8002a10:	4801      	ldr	r0, [pc, #4]	; (8002a18 <__sfp_lock_acquire+0x8>)
 8002a12:	f000 b8b3 	b.w	8002b7c <__retarget_lock_acquire_recursive>
 8002a16:	bf00      	nop
 8002a18:	200000dd 	.word	0x200000dd

08002a1c <__sfp_lock_release>:
 8002a1c:	4801      	ldr	r0, [pc, #4]	; (8002a24 <__sfp_lock_release+0x8>)
 8002a1e:	f000 b8ae 	b.w	8002b7e <__retarget_lock_release_recursive>
 8002a22:	bf00      	nop
 8002a24:	200000dd 	.word	0x200000dd

08002a28 <__sinit_lock_acquire>:
 8002a28:	4801      	ldr	r0, [pc, #4]	; (8002a30 <__sinit_lock_acquire+0x8>)
 8002a2a:	f000 b8a7 	b.w	8002b7c <__retarget_lock_acquire_recursive>
 8002a2e:	bf00      	nop
 8002a30:	200000de 	.word	0x200000de

08002a34 <__sinit_lock_release>:
 8002a34:	4801      	ldr	r0, [pc, #4]	; (8002a3c <__sinit_lock_release+0x8>)
 8002a36:	f000 b8a2 	b.w	8002b7e <__retarget_lock_release_recursive>
 8002a3a:	bf00      	nop
 8002a3c:	200000de 	.word	0x200000de

08002a40 <__sinit>:
 8002a40:	b510      	push	{r4, lr}
 8002a42:	4604      	mov	r4, r0
 8002a44:	f7ff fff0 	bl	8002a28 <__sinit_lock_acquire>
 8002a48:	69a3      	ldr	r3, [r4, #24]
 8002a4a:	b11b      	cbz	r3, 8002a54 <__sinit+0x14>
 8002a4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a50:	f7ff bff0 	b.w	8002a34 <__sinit_lock_release>
 8002a54:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002a58:	6523      	str	r3, [r4, #80]	; 0x50
 8002a5a:	4b13      	ldr	r3, [pc, #76]	; (8002aa8 <__sinit+0x68>)
 8002a5c:	4a13      	ldr	r2, [pc, #76]	; (8002aac <__sinit+0x6c>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	62a2      	str	r2, [r4, #40]	; 0x28
 8002a62:	42a3      	cmp	r3, r4
 8002a64:	bf04      	itt	eq
 8002a66:	2301      	moveq	r3, #1
 8002a68:	61a3      	streq	r3, [r4, #24]
 8002a6a:	4620      	mov	r0, r4
 8002a6c:	f000 f820 	bl	8002ab0 <__sfp>
 8002a70:	6060      	str	r0, [r4, #4]
 8002a72:	4620      	mov	r0, r4
 8002a74:	f000 f81c 	bl	8002ab0 <__sfp>
 8002a78:	60a0      	str	r0, [r4, #8]
 8002a7a:	4620      	mov	r0, r4
 8002a7c:	f000 f818 	bl	8002ab0 <__sfp>
 8002a80:	2200      	movs	r2, #0
 8002a82:	60e0      	str	r0, [r4, #12]
 8002a84:	2104      	movs	r1, #4
 8002a86:	6860      	ldr	r0, [r4, #4]
 8002a88:	f7ff ff82 	bl	8002990 <std>
 8002a8c:	68a0      	ldr	r0, [r4, #8]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	2109      	movs	r1, #9
 8002a92:	f7ff ff7d 	bl	8002990 <std>
 8002a96:	68e0      	ldr	r0, [r4, #12]
 8002a98:	2202      	movs	r2, #2
 8002a9a:	2112      	movs	r1, #18
 8002a9c:	f7ff ff78 	bl	8002990 <std>
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	61a3      	str	r3, [r4, #24]
 8002aa4:	e7d2      	b.n	8002a4c <__sinit+0xc>
 8002aa6:	bf00      	nop
 8002aa8:	08003030 	.word	0x08003030
 8002aac:	080029d9 	.word	0x080029d9

08002ab0 <__sfp>:
 8002ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ab2:	4607      	mov	r7, r0
 8002ab4:	f7ff ffac 	bl	8002a10 <__sfp_lock_acquire>
 8002ab8:	4b1e      	ldr	r3, [pc, #120]	; (8002b34 <__sfp+0x84>)
 8002aba:	681e      	ldr	r6, [r3, #0]
 8002abc:	69b3      	ldr	r3, [r6, #24]
 8002abe:	b913      	cbnz	r3, 8002ac6 <__sfp+0x16>
 8002ac0:	4630      	mov	r0, r6
 8002ac2:	f7ff ffbd 	bl	8002a40 <__sinit>
 8002ac6:	3648      	adds	r6, #72	; 0x48
 8002ac8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002acc:	3b01      	subs	r3, #1
 8002ace:	d503      	bpl.n	8002ad8 <__sfp+0x28>
 8002ad0:	6833      	ldr	r3, [r6, #0]
 8002ad2:	b30b      	cbz	r3, 8002b18 <__sfp+0x68>
 8002ad4:	6836      	ldr	r6, [r6, #0]
 8002ad6:	e7f7      	b.n	8002ac8 <__sfp+0x18>
 8002ad8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002adc:	b9d5      	cbnz	r5, 8002b14 <__sfp+0x64>
 8002ade:	4b16      	ldr	r3, [pc, #88]	; (8002b38 <__sfp+0x88>)
 8002ae0:	60e3      	str	r3, [r4, #12]
 8002ae2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002ae6:	6665      	str	r5, [r4, #100]	; 0x64
 8002ae8:	f000 f847 	bl	8002b7a <__retarget_lock_init_recursive>
 8002aec:	f7ff ff96 	bl	8002a1c <__sfp_lock_release>
 8002af0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002af4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002af8:	6025      	str	r5, [r4, #0]
 8002afa:	61a5      	str	r5, [r4, #24]
 8002afc:	2208      	movs	r2, #8
 8002afe:	4629      	mov	r1, r5
 8002b00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002b04:	f7ff fd44 	bl	8002590 <memset>
 8002b08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002b0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002b10:	4620      	mov	r0, r4
 8002b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b14:	3468      	adds	r4, #104	; 0x68
 8002b16:	e7d9      	b.n	8002acc <__sfp+0x1c>
 8002b18:	2104      	movs	r1, #4
 8002b1a:	4638      	mov	r0, r7
 8002b1c:	f7ff ff62 	bl	80029e4 <__sfmoreglue>
 8002b20:	4604      	mov	r4, r0
 8002b22:	6030      	str	r0, [r6, #0]
 8002b24:	2800      	cmp	r0, #0
 8002b26:	d1d5      	bne.n	8002ad4 <__sfp+0x24>
 8002b28:	f7ff ff78 	bl	8002a1c <__sfp_lock_release>
 8002b2c:	230c      	movs	r3, #12
 8002b2e:	603b      	str	r3, [r7, #0]
 8002b30:	e7ee      	b.n	8002b10 <__sfp+0x60>
 8002b32:	bf00      	nop
 8002b34:	08003030 	.word	0x08003030
 8002b38:	ffff0001 	.word	0xffff0001

08002b3c <_fwalk_reent>:
 8002b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b40:	4606      	mov	r6, r0
 8002b42:	4688      	mov	r8, r1
 8002b44:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002b48:	2700      	movs	r7, #0
 8002b4a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002b4e:	f1b9 0901 	subs.w	r9, r9, #1
 8002b52:	d505      	bpl.n	8002b60 <_fwalk_reent+0x24>
 8002b54:	6824      	ldr	r4, [r4, #0]
 8002b56:	2c00      	cmp	r4, #0
 8002b58:	d1f7      	bne.n	8002b4a <_fwalk_reent+0xe>
 8002b5a:	4638      	mov	r0, r7
 8002b5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b60:	89ab      	ldrh	r3, [r5, #12]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d907      	bls.n	8002b76 <_fwalk_reent+0x3a>
 8002b66:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	d003      	beq.n	8002b76 <_fwalk_reent+0x3a>
 8002b6e:	4629      	mov	r1, r5
 8002b70:	4630      	mov	r0, r6
 8002b72:	47c0      	blx	r8
 8002b74:	4307      	orrs	r7, r0
 8002b76:	3568      	adds	r5, #104	; 0x68
 8002b78:	e7e9      	b.n	8002b4e <_fwalk_reent+0x12>

08002b7a <__retarget_lock_init_recursive>:
 8002b7a:	4770      	bx	lr

08002b7c <__retarget_lock_acquire_recursive>:
 8002b7c:	4770      	bx	lr

08002b7e <__retarget_lock_release_recursive>:
 8002b7e:	4770      	bx	lr

08002b80 <__swhatbuf_r>:
 8002b80:	b570      	push	{r4, r5, r6, lr}
 8002b82:	460e      	mov	r6, r1
 8002b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b88:	2900      	cmp	r1, #0
 8002b8a:	b096      	sub	sp, #88	; 0x58
 8002b8c:	4614      	mov	r4, r2
 8002b8e:	461d      	mov	r5, r3
 8002b90:	da08      	bge.n	8002ba4 <__swhatbuf_r+0x24>
 8002b92:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	602a      	str	r2, [r5, #0]
 8002b9a:	061a      	lsls	r2, r3, #24
 8002b9c:	d410      	bmi.n	8002bc0 <__swhatbuf_r+0x40>
 8002b9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ba2:	e00e      	b.n	8002bc2 <__swhatbuf_r+0x42>
 8002ba4:	466a      	mov	r2, sp
 8002ba6:	f000 f9a7 	bl	8002ef8 <_fstat_r>
 8002baa:	2800      	cmp	r0, #0
 8002bac:	dbf1      	blt.n	8002b92 <__swhatbuf_r+0x12>
 8002bae:	9a01      	ldr	r2, [sp, #4]
 8002bb0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002bb4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002bb8:	425a      	negs	r2, r3
 8002bba:	415a      	adcs	r2, r3
 8002bbc:	602a      	str	r2, [r5, #0]
 8002bbe:	e7ee      	b.n	8002b9e <__swhatbuf_r+0x1e>
 8002bc0:	2340      	movs	r3, #64	; 0x40
 8002bc2:	2000      	movs	r0, #0
 8002bc4:	6023      	str	r3, [r4, #0]
 8002bc6:	b016      	add	sp, #88	; 0x58
 8002bc8:	bd70      	pop	{r4, r5, r6, pc}
	...

08002bcc <__smakebuf_r>:
 8002bcc:	898b      	ldrh	r3, [r1, #12]
 8002bce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002bd0:	079d      	lsls	r5, r3, #30
 8002bd2:	4606      	mov	r6, r0
 8002bd4:	460c      	mov	r4, r1
 8002bd6:	d507      	bpl.n	8002be8 <__smakebuf_r+0x1c>
 8002bd8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002bdc:	6023      	str	r3, [r4, #0]
 8002bde:	6123      	str	r3, [r4, #16]
 8002be0:	2301      	movs	r3, #1
 8002be2:	6163      	str	r3, [r4, #20]
 8002be4:	b002      	add	sp, #8
 8002be6:	bd70      	pop	{r4, r5, r6, pc}
 8002be8:	ab01      	add	r3, sp, #4
 8002bea:	466a      	mov	r2, sp
 8002bec:	f7ff ffc8 	bl	8002b80 <__swhatbuf_r>
 8002bf0:	9900      	ldr	r1, [sp, #0]
 8002bf2:	4605      	mov	r5, r0
 8002bf4:	4630      	mov	r0, r6
 8002bf6:	f000 f895 	bl	8002d24 <_malloc_r>
 8002bfa:	b948      	cbnz	r0, 8002c10 <__smakebuf_r+0x44>
 8002bfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c00:	059a      	lsls	r2, r3, #22
 8002c02:	d4ef      	bmi.n	8002be4 <__smakebuf_r+0x18>
 8002c04:	f023 0303 	bic.w	r3, r3, #3
 8002c08:	f043 0302 	orr.w	r3, r3, #2
 8002c0c:	81a3      	strh	r3, [r4, #12]
 8002c0e:	e7e3      	b.n	8002bd8 <__smakebuf_r+0xc>
 8002c10:	4b0d      	ldr	r3, [pc, #52]	; (8002c48 <__smakebuf_r+0x7c>)
 8002c12:	62b3      	str	r3, [r6, #40]	; 0x28
 8002c14:	89a3      	ldrh	r3, [r4, #12]
 8002c16:	6020      	str	r0, [r4, #0]
 8002c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c1c:	81a3      	strh	r3, [r4, #12]
 8002c1e:	9b00      	ldr	r3, [sp, #0]
 8002c20:	6163      	str	r3, [r4, #20]
 8002c22:	9b01      	ldr	r3, [sp, #4]
 8002c24:	6120      	str	r0, [r4, #16]
 8002c26:	b15b      	cbz	r3, 8002c40 <__smakebuf_r+0x74>
 8002c28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c2c:	4630      	mov	r0, r6
 8002c2e:	f000 f975 	bl	8002f1c <_isatty_r>
 8002c32:	b128      	cbz	r0, 8002c40 <__smakebuf_r+0x74>
 8002c34:	89a3      	ldrh	r3, [r4, #12]
 8002c36:	f023 0303 	bic.w	r3, r3, #3
 8002c3a:	f043 0301 	orr.w	r3, r3, #1
 8002c3e:	81a3      	strh	r3, [r4, #12]
 8002c40:	89a0      	ldrh	r0, [r4, #12]
 8002c42:	4305      	orrs	r5, r0
 8002c44:	81a5      	strh	r5, [r4, #12]
 8002c46:	e7cd      	b.n	8002be4 <__smakebuf_r+0x18>
 8002c48:	080029d9 	.word	0x080029d9

08002c4c <_free_r>:
 8002c4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002c4e:	2900      	cmp	r1, #0
 8002c50:	d044      	beq.n	8002cdc <_free_r+0x90>
 8002c52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c56:	9001      	str	r0, [sp, #4]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f1a1 0404 	sub.w	r4, r1, #4
 8002c5e:	bfb8      	it	lt
 8002c60:	18e4      	addlt	r4, r4, r3
 8002c62:	f000 f97d 	bl	8002f60 <__malloc_lock>
 8002c66:	4a1e      	ldr	r2, [pc, #120]	; (8002ce0 <_free_r+0x94>)
 8002c68:	9801      	ldr	r0, [sp, #4]
 8002c6a:	6813      	ldr	r3, [r2, #0]
 8002c6c:	b933      	cbnz	r3, 8002c7c <_free_r+0x30>
 8002c6e:	6063      	str	r3, [r4, #4]
 8002c70:	6014      	str	r4, [r2, #0]
 8002c72:	b003      	add	sp, #12
 8002c74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002c78:	f000 b978 	b.w	8002f6c <__malloc_unlock>
 8002c7c:	42a3      	cmp	r3, r4
 8002c7e:	d908      	bls.n	8002c92 <_free_r+0x46>
 8002c80:	6825      	ldr	r5, [r4, #0]
 8002c82:	1961      	adds	r1, r4, r5
 8002c84:	428b      	cmp	r3, r1
 8002c86:	bf01      	itttt	eq
 8002c88:	6819      	ldreq	r1, [r3, #0]
 8002c8a:	685b      	ldreq	r3, [r3, #4]
 8002c8c:	1949      	addeq	r1, r1, r5
 8002c8e:	6021      	streq	r1, [r4, #0]
 8002c90:	e7ed      	b.n	8002c6e <_free_r+0x22>
 8002c92:	461a      	mov	r2, r3
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	b10b      	cbz	r3, 8002c9c <_free_r+0x50>
 8002c98:	42a3      	cmp	r3, r4
 8002c9a:	d9fa      	bls.n	8002c92 <_free_r+0x46>
 8002c9c:	6811      	ldr	r1, [r2, #0]
 8002c9e:	1855      	adds	r5, r2, r1
 8002ca0:	42a5      	cmp	r5, r4
 8002ca2:	d10b      	bne.n	8002cbc <_free_r+0x70>
 8002ca4:	6824      	ldr	r4, [r4, #0]
 8002ca6:	4421      	add	r1, r4
 8002ca8:	1854      	adds	r4, r2, r1
 8002caa:	42a3      	cmp	r3, r4
 8002cac:	6011      	str	r1, [r2, #0]
 8002cae:	d1e0      	bne.n	8002c72 <_free_r+0x26>
 8002cb0:	681c      	ldr	r4, [r3, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	6053      	str	r3, [r2, #4]
 8002cb6:	4421      	add	r1, r4
 8002cb8:	6011      	str	r1, [r2, #0]
 8002cba:	e7da      	b.n	8002c72 <_free_r+0x26>
 8002cbc:	d902      	bls.n	8002cc4 <_free_r+0x78>
 8002cbe:	230c      	movs	r3, #12
 8002cc0:	6003      	str	r3, [r0, #0]
 8002cc2:	e7d6      	b.n	8002c72 <_free_r+0x26>
 8002cc4:	6825      	ldr	r5, [r4, #0]
 8002cc6:	1961      	adds	r1, r4, r5
 8002cc8:	428b      	cmp	r3, r1
 8002cca:	bf04      	itt	eq
 8002ccc:	6819      	ldreq	r1, [r3, #0]
 8002cce:	685b      	ldreq	r3, [r3, #4]
 8002cd0:	6063      	str	r3, [r4, #4]
 8002cd2:	bf04      	itt	eq
 8002cd4:	1949      	addeq	r1, r1, r5
 8002cd6:	6021      	streq	r1, [r4, #0]
 8002cd8:	6054      	str	r4, [r2, #4]
 8002cda:	e7ca      	b.n	8002c72 <_free_r+0x26>
 8002cdc:	b003      	add	sp, #12
 8002cde:	bd30      	pop	{r4, r5, pc}
 8002ce0:	200000e0 	.word	0x200000e0

08002ce4 <sbrk_aligned>:
 8002ce4:	b570      	push	{r4, r5, r6, lr}
 8002ce6:	4e0e      	ldr	r6, [pc, #56]	; (8002d20 <sbrk_aligned+0x3c>)
 8002ce8:	460c      	mov	r4, r1
 8002cea:	6831      	ldr	r1, [r6, #0]
 8002cec:	4605      	mov	r5, r0
 8002cee:	b911      	cbnz	r1, 8002cf6 <sbrk_aligned+0x12>
 8002cf0:	f000 f88c 	bl	8002e0c <_sbrk_r>
 8002cf4:	6030      	str	r0, [r6, #0]
 8002cf6:	4621      	mov	r1, r4
 8002cf8:	4628      	mov	r0, r5
 8002cfa:	f000 f887 	bl	8002e0c <_sbrk_r>
 8002cfe:	1c43      	adds	r3, r0, #1
 8002d00:	d00a      	beq.n	8002d18 <sbrk_aligned+0x34>
 8002d02:	1cc4      	adds	r4, r0, #3
 8002d04:	f024 0403 	bic.w	r4, r4, #3
 8002d08:	42a0      	cmp	r0, r4
 8002d0a:	d007      	beq.n	8002d1c <sbrk_aligned+0x38>
 8002d0c:	1a21      	subs	r1, r4, r0
 8002d0e:	4628      	mov	r0, r5
 8002d10:	f000 f87c 	bl	8002e0c <_sbrk_r>
 8002d14:	3001      	adds	r0, #1
 8002d16:	d101      	bne.n	8002d1c <sbrk_aligned+0x38>
 8002d18:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002d1c:	4620      	mov	r0, r4
 8002d1e:	bd70      	pop	{r4, r5, r6, pc}
 8002d20:	200000e4 	.word	0x200000e4

08002d24 <_malloc_r>:
 8002d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d28:	1ccd      	adds	r5, r1, #3
 8002d2a:	f025 0503 	bic.w	r5, r5, #3
 8002d2e:	3508      	adds	r5, #8
 8002d30:	2d0c      	cmp	r5, #12
 8002d32:	bf38      	it	cc
 8002d34:	250c      	movcc	r5, #12
 8002d36:	2d00      	cmp	r5, #0
 8002d38:	4607      	mov	r7, r0
 8002d3a:	db01      	blt.n	8002d40 <_malloc_r+0x1c>
 8002d3c:	42a9      	cmp	r1, r5
 8002d3e:	d905      	bls.n	8002d4c <_malloc_r+0x28>
 8002d40:	230c      	movs	r3, #12
 8002d42:	603b      	str	r3, [r7, #0]
 8002d44:	2600      	movs	r6, #0
 8002d46:	4630      	mov	r0, r6
 8002d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d4c:	4e2e      	ldr	r6, [pc, #184]	; (8002e08 <_malloc_r+0xe4>)
 8002d4e:	f000 f907 	bl	8002f60 <__malloc_lock>
 8002d52:	6833      	ldr	r3, [r6, #0]
 8002d54:	461c      	mov	r4, r3
 8002d56:	bb34      	cbnz	r4, 8002da6 <_malloc_r+0x82>
 8002d58:	4629      	mov	r1, r5
 8002d5a:	4638      	mov	r0, r7
 8002d5c:	f7ff ffc2 	bl	8002ce4 <sbrk_aligned>
 8002d60:	1c43      	adds	r3, r0, #1
 8002d62:	4604      	mov	r4, r0
 8002d64:	d14d      	bne.n	8002e02 <_malloc_r+0xde>
 8002d66:	6834      	ldr	r4, [r6, #0]
 8002d68:	4626      	mov	r6, r4
 8002d6a:	2e00      	cmp	r6, #0
 8002d6c:	d140      	bne.n	8002df0 <_malloc_r+0xcc>
 8002d6e:	6823      	ldr	r3, [r4, #0]
 8002d70:	4631      	mov	r1, r6
 8002d72:	4638      	mov	r0, r7
 8002d74:	eb04 0803 	add.w	r8, r4, r3
 8002d78:	f000 f848 	bl	8002e0c <_sbrk_r>
 8002d7c:	4580      	cmp	r8, r0
 8002d7e:	d13a      	bne.n	8002df6 <_malloc_r+0xd2>
 8002d80:	6821      	ldr	r1, [r4, #0]
 8002d82:	3503      	adds	r5, #3
 8002d84:	1a6d      	subs	r5, r5, r1
 8002d86:	f025 0503 	bic.w	r5, r5, #3
 8002d8a:	3508      	adds	r5, #8
 8002d8c:	2d0c      	cmp	r5, #12
 8002d8e:	bf38      	it	cc
 8002d90:	250c      	movcc	r5, #12
 8002d92:	4629      	mov	r1, r5
 8002d94:	4638      	mov	r0, r7
 8002d96:	f7ff ffa5 	bl	8002ce4 <sbrk_aligned>
 8002d9a:	3001      	adds	r0, #1
 8002d9c:	d02b      	beq.n	8002df6 <_malloc_r+0xd2>
 8002d9e:	6823      	ldr	r3, [r4, #0]
 8002da0:	442b      	add	r3, r5
 8002da2:	6023      	str	r3, [r4, #0]
 8002da4:	e00e      	b.n	8002dc4 <_malloc_r+0xa0>
 8002da6:	6822      	ldr	r2, [r4, #0]
 8002da8:	1b52      	subs	r2, r2, r5
 8002daa:	d41e      	bmi.n	8002dea <_malloc_r+0xc6>
 8002dac:	2a0b      	cmp	r2, #11
 8002dae:	d916      	bls.n	8002dde <_malloc_r+0xba>
 8002db0:	1961      	adds	r1, r4, r5
 8002db2:	42a3      	cmp	r3, r4
 8002db4:	6025      	str	r5, [r4, #0]
 8002db6:	bf18      	it	ne
 8002db8:	6059      	strne	r1, [r3, #4]
 8002dba:	6863      	ldr	r3, [r4, #4]
 8002dbc:	bf08      	it	eq
 8002dbe:	6031      	streq	r1, [r6, #0]
 8002dc0:	5162      	str	r2, [r4, r5]
 8002dc2:	604b      	str	r3, [r1, #4]
 8002dc4:	4638      	mov	r0, r7
 8002dc6:	f104 060b 	add.w	r6, r4, #11
 8002dca:	f000 f8cf 	bl	8002f6c <__malloc_unlock>
 8002dce:	f026 0607 	bic.w	r6, r6, #7
 8002dd2:	1d23      	adds	r3, r4, #4
 8002dd4:	1af2      	subs	r2, r6, r3
 8002dd6:	d0b6      	beq.n	8002d46 <_malloc_r+0x22>
 8002dd8:	1b9b      	subs	r3, r3, r6
 8002dda:	50a3      	str	r3, [r4, r2]
 8002ddc:	e7b3      	b.n	8002d46 <_malloc_r+0x22>
 8002dde:	6862      	ldr	r2, [r4, #4]
 8002de0:	42a3      	cmp	r3, r4
 8002de2:	bf0c      	ite	eq
 8002de4:	6032      	streq	r2, [r6, #0]
 8002de6:	605a      	strne	r2, [r3, #4]
 8002de8:	e7ec      	b.n	8002dc4 <_malloc_r+0xa0>
 8002dea:	4623      	mov	r3, r4
 8002dec:	6864      	ldr	r4, [r4, #4]
 8002dee:	e7b2      	b.n	8002d56 <_malloc_r+0x32>
 8002df0:	4634      	mov	r4, r6
 8002df2:	6876      	ldr	r6, [r6, #4]
 8002df4:	e7b9      	b.n	8002d6a <_malloc_r+0x46>
 8002df6:	230c      	movs	r3, #12
 8002df8:	603b      	str	r3, [r7, #0]
 8002dfa:	4638      	mov	r0, r7
 8002dfc:	f000 f8b6 	bl	8002f6c <__malloc_unlock>
 8002e00:	e7a1      	b.n	8002d46 <_malloc_r+0x22>
 8002e02:	6025      	str	r5, [r4, #0]
 8002e04:	e7de      	b.n	8002dc4 <_malloc_r+0xa0>
 8002e06:	bf00      	nop
 8002e08:	200000e0 	.word	0x200000e0

08002e0c <_sbrk_r>:
 8002e0c:	b538      	push	{r3, r4, r5, lr}
 8002e0e:	4d06      	ldr	r5, [pc, #24]	; (8002e28 <_sbrk_r+0x1c>)
 8002e10:	2300      	movs	r3, #0
 8002e12:	4604      	mov	r4, r0
 8002e14:	4608      	mov	r0, r1
 8002e16:	602b      	str	r3, [r5, #0]
 8002e18:	f7fd fe04 	bl	8000a24 <_sbrk>
 8002e1c:	1c43      	adds	r3, r0, #1
 8002e1e:	d102      	bne.n	8002e26 <_sbrk_r+0x1a>
 8002e20:	682b      	ldr	r3, [r5, #0]
 8002e22:	b103      	cbz	r3, 8002e26 <_sbrk_r+0x1a>
 8002e24:	6023      	str	r3, [r4, #0]
 8002e26:	bd38      	pop	{r3, r4, r5, pc}
 8002e28:	200000e8 	.word	0x200000e8

08002e2c <__sread>:
 8002e2c:	b510      	push	{r4, lr}
 8002e2e:	460c      	mov	r4, r1
 8002e30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e34:	f000 f8a0 	bl	8002f78 <_read_r>
 8002e38:	2800      	cmp	r0, #0
 8002e3a:	bfab      	itete	ge
 8002e3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002e3e:	89a3      	ldrhlt	r3, [r4, #12]
 8002e40:	181b      	addge	r3, r3, r0
 8002e42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002e46:	bfac      	ite	ge
 8002e48:	6563      	strge	r3, [r4, #84]	; 0x54
 8002e4a:	81a3      	strhlt	r3, [r4, #12]
 8002e4c:	bd10      	pop	{r4, pc}

08002e4e <__swrite>:
 8002e4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e52:	461f      	mov	r7, r3
 8002e54:	898b      	ldrh	r3, [r1, #12]
 8002e56:	05db      	lsls	r3, r3, #23
 8002e58:	4605      	mov	r5, r0
 8002e5a:	460c      	mov	r4, r1
 8002e5c:	4616      	mov	r6, r2
 8002e5e:	d505      	bpl.n	8002e6c <__swrite+0x1e>
 8002e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e64:	2302      	movs	r3, #2
 8002e66:	2200      	movs	r2, #0
 8002e68:	f000 f868 	bl	8002f3c <_lseek_r>
 8002e6c:	89a3      	ldrh	r3, [r4, #12]
 8002e6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e76:	81a3      	strh	r3, [r4, #12]
 8002e78:	4632      	mov	r2, r6
 8002e7a:	463b      	mov	r3, r7
 8002e7c:	4628      	mov	r0, r5
 8002e7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002e82:	f000 b817 	b.w	8002eb4 <_write_r>

08002e86 <__sseek>:
 8002e86:	b510      	push	{r4, lr}
 8002e88:	460c      	mov	r4, r1
 8002e8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e8e:	f000 f855 	bl	8002f3c <_lseek_r>
 8002e92:	1c43      	adds	r3, r0, #1
 8002e94:	89a3      	ldrh	r3, [r4, #12]
 8002e96:	bf15      	itete	ne
 8002e98:	6560      	strne	r0, [r4, #84]	; 0x54
 8002e9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002e9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002ea2:	81a3      	strheq	r3, [r4, #12]
 8002ea4:	bf18      	it	ne
 8002ea6:	81a3      	strhne	r3, [r4, #12]
 8002ea8:	bd10      	pop	{r4, pc}

08002eaa <__sclose>:
 8002eaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002eae:	f000 b813 	b.w	8002ed8 <_close_r>
	...

08002eb4 <_write_r>:
 8002eb4:	b538      	push	{r3, r4, r5, lr}
 8002eb6:	4d07      	ldr	r5, [pc, #28]	; (8002ed4 <_write_r+0x20>)
 8002eb8:	4604      	mov	r4, r0
 8002eba:	4608      	mov	r0, r1
 8002ebc:	4611      	mov	r1, r2
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	602a      	str	r2, [r5, #0]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	f7fd fd5e 	bl	8000984 <_write>
 8002ec8:	1c43      	adds	r3, r0, #1
 8002eca:	d102      	bne.n	8002ed2 <_write_r+0x1e>
 8002ecc:	682b      	ldr	r3, [r5, #0]
 8002ece:	b103      	cbz	r3, 8002ed2 <_write_r+0x1e>
 8002ed0:	6023      	str	r3, [r4, #0]
 8002ed2:	bd38      	pop	{r3, r4, r5, pc}
 8002ed4:	200000e8 	.word	0x200000e8

08002ed8 <_close_r>:
 8002ed8:	b538      	push	{r3, r4, r5, lr}
 8002eda:	4d06      	ldr	r5, [pc, #24]	; (8002ef4 <_close_r+0x1c>)
 8002edc:	2300      	movs	r3, #0
 8002ede:	4604      	mov	r4, r0
 8002ee0:	4608      	mov	r0, r1
 8002ee2:	602b      	str	r3, [r5, #0]
 8002ee4:	f7fd fd6a 	bl	80009bc <_close>
 8002ee8:	1c43      	adds	r3, r0, #1
 8002eea:	d102      	bne.n	8002ef2 <_close_r+0x1a>
 8002eec:	682b      	ldr	r3, [r5, #0]
 8002eee:	b103      	cbz	r3, 8002ef2 <_close_r+0x1a>
 8002ef0:	6023      	str	r3, [r4, #0]
 8002ef2:	bd38      	pop	{r3, r4, r5, pc}
 8002ef4:	200000e8 	.word	0x200000e8

08002ef8 <_fstat_r>:
 8002ef8:	b538      	push	{r3, r4, r5, lr}
 8002efa:	4d07      	ldr	r5, [pc, #28]	; (8002f18 <_fstat_r+0x20>)
 8002efc:	2300      	movs	r3, #0
 8002efe:	4604      	mov	r4, r0
 8002f00:	4608      	mov	r0, r1
 8002f02:	4611      	mov	r1, r2
 8002f04:	602b      	str	r3, [r5, #0]
 8002f06:	f7fd fd65 	bl	80009d4 <_fstat>
 8002f0a:	1c43      	adds	r3, r0, #1
 8002f0c:	d102      	bne.n	8002f14 <_fstat_r+0x1c>
 8002f0e:	682b      	ldr	r3, [r5, #0]
 8002f10:	b103      	cbz	r3, 8002f14 <_fstat_r+0x1c>
 8002f12:	6023      	str	r3, [r4, #0]
 8002f14:	bd38      	pop	{r3, r4, r5, pc}
 8002f16:	bf00      	nop
 8002f18:	200000e8 	.word	0x200000e8

08002f1c <_isatty_r>:
 8002f1c:	b538      	push	{r3, r4, r5, lr}
 8002f1e:	4d06      	ldr	r5, [pc, #24]	; (8002f38 <_isatty_r+0x1c>)
 8002f20:	2300      	movs	r3, #0
 8002f22:	4604      	mov	r4, r0
 8002f24:	4608      	mov	r0, r1
 8002f26:	602b      	str	r3, [r5, #0]
 8002f28:	f7fd fd64 	bl	80009f4 <_isatty>
 8002f2c:	1c43      	adds	r3, r0, #1
 8002f2e:	d102      	bne.n	8002f36 <_isatty_r+0x1a>
 8002f30:	682b      	ldr	r3, [r5, #0]
 8002f32:	b103      	cbz	r3, 8002f36 <_isatty_r+0x1a>
 8002f34:	6023      	str	r3, [r4, #0]
 8002f36:	bd38      	pop	{r3, r4, r5, pc}
 8002f38:	200000e8 	.word	0x200000e8

08002f3c <_lseek_r>:
 8002f3c:	b538      	push	{r3, r4, r5, lr}
 8002f3e:	4d07      	ldr	r5, [pc, #28]	; (8002f5c <_lseek_r+0x20>)
 8002f40:	4604      	mov	r4, r0
 8002f42:	4608      	mov	r0, r1
 8002f44:	4611      	mov	r1, r2
 8002f46:	2200      	movs	r2, #0
 8002f48:	602a      	str	r2, [r5, #0]
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	f7fd fd5d 	bl	8000a0a <_lseek>
 8002f50:	1c43      	adds	r3, r0, #1
 8002f52:	d102      	bne.n	8002f5a <_lseek_r+0x1e>
 8002f54:	682b      	ldr	r3, [r5, #0]
 8002f56:	b103      	cbz	r3, 8002f5a <_lseek_r+0x1e>
 8002f58:	6023      	str	r3, [r4, #0]
 8002f5a:	bd38      	pop	{r3, r4, r5, pc}
 8002f5c:	200000e8 	.word	0x200000e8

08002f60 <__malloc_lock>:
 8002f60:	4801      	ldr	r0, [pc, #4]	; (8002f68 <__malloc_lock+0x8>)
 8002f62:	f7ff be0b 	b.w	8002b7c <__retarget_lock_acquire_recursive>
 8002f66:	bf00      	nop
 8002f68:	200000dc 	.word	0x200000dc

08002f6c <__malloc_unlock>:
 8002f6c:	4801      	ldr	r0, [pc, #4]	; (8002f74 <__malloc_unlock+0x8>)
 8002f6e:	f7ff be06 	b.w	8002b7e <__retarget_lock_release_recursive>
 8002f72:	bf00      	nop
 8002f74:	200000dc 	.word	0x200000dc

08002f78 <_read_r>:
 8002f78:	b538      	push	{r3, r4, r5, lr}
 8002f7a:	4d07      	ldr	r5, [pc, #28]	; (8002f98 <_read_r+0x20>)
 8002f7c:	4604      	mov	r4, r0
 8002f7e:	4608      	mov	r0, r1
 8002f80:	4611      	mov	r1, r2
 8002f82:	2200      	movs	r2, #0
 8002f84:	602a      	str	r2, [r5, #0]
 8002f86:	461a      	mov	r2, r3
 8002f88:	f7fd fcdf 	bl	800094a <_read>
 8002f8c:	1c43      	adds	r3, r0, #1
 8002f8e:	d102      	bne.n	8002f96 <_read_r+0x1e>
 8002f90:	682b      	ldr	r3, [r5, #0]
 8002f92:	b103      	cbz	r3, 8002f96 <_read_r+0x1e>
 8002f94:	6023      	str	r3, [r4, #0]
 8002f96:	bd38      	pop	{r3, r4, r5, pc}
 8002f98:	200000e8 	.word	0x200000e8

08002f9c <_init>:
 8002f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f9e:	bf00      	nop
 8002fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fa2:	bc08      	pop	{r3}
 8002fa4:	469e      	mov	lr, r3
 8002fa6:	4770      	bx	lr

08002fa8 <_fini>:
 8002fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002faa:	bf00      	nop
 8002fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fae:	bc08      	pop	{r3}
 8002fb0:	469e      	mov	lr, r3
 8002fb2:	4770      	bx	lr
